name: Dependabot Auto-merge

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  automerge:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read  # 新增权限

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Calculate dynamic threshold
        id: threshold
        run: |
          PACKAGE_COUNT=$(find packages/ -maxdepth 2 -name package.json | wc -l)
          echo "FILE_THRESHOLD=$(( PACKAGE_COUNT * 2 + 5 ))" >> $GITHUB_OUTPUT

      - name: Extract PR metadata
        id: meta
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          FILES=$(gh pr view $PR_URL --json files -q '.files | length')
          
          echo "PR_TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "FILES_CHANGED=$FILES" >> $GITHUB_OUTPUT
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}

      - name: Advanced safety checks
        id: safety
        run: |
          # 检测主版本更新
          if echo "${{ steps.meta.outputs.PR_TITLE }}" | grep -Piq 'bump .* to (v)?\d+\.\d+\.0(\D|$)'; then
            echo "is_major=true" >> $GITHUB_OUTPUT
          fi

          # 检查安全标签
          LABELS=$(gh pr view $PR_URL --json labels -q '.labels[].name' | tr '\n' ',')
          if [[ $LABELS == *"security"* ]]; then
            echo "is_security=true" >> $GITHUB_OUTPUT
          fi

          # 检查CI状态
          CI_STATUS=$(gh pr view $PR_URL --json statusCheckRollup -q '.statusCheckRollup[0].state')
          echo "ci_status=$CI_STATUS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ steps.meta.outputs.PR_URL }}

      - name: Decision logic
        id: decision
        run: |
          safe=false
          THRESHOLD=${{ steps.threshold.outputs.FILE_THRESHOLD }}

          if [[ "${{ steps.safety.outputs.is_security }}" == "true" && "${{ steps.safety.outputs.ci_status }}" == "SUCCESS" ]]; then
            safe=true
          elif [[ "${{ steps.safety.outputs.ci_status }}" == "SUCCESS" ]]; then
            if [[ "${{ steps.safety.outputs.is_major }}" != "true" ]]; then
              if [ ${{ steps.meta.outputs.FILES_CHANGED }} -le $THRESHOLD ]; then
                safe=true
              fi
            fi
          fi

          echo "safe=$safe" >> $GITHUB_OUTPUT

      - name: Auto-merge
        if: steps.decision.outputs.safe == 'true'
        run: gh pr merge "$PR_URL" --auto --merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ steps.meta.outputs.PR_URL }}
