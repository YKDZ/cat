
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PluginUserConfigInstance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PluginUserConfigInstance
 * 
 */
export type PluginUserConfigInstanceModel = runtime.Types.Result.DefaultSelection<Prisma.$PluginUserConfigInstancePayload>

export type AggregatePluginUserConfigInstance = {
  _count: PluginUserConfigInstanceCountAggregateOutputType | null
  _avg: PluginUserConfigInstanceAvgAggregateOutputType | null
  _sum: PluginUserConfigInstanceSumAggregateOutputType | null
  _min: PluginUserConfigInstanceMinAggregateOutputType | null
  _max: PluginUserConfigInstanceMaxAggregateOutputType | null
}

export type PluginUserConfigInstanceAvgAggregateOutputType = {
  id: number | null
  configId: number | null
}

export type PluginUserConfigInstanceSumAggregateOutputType = {
  id: number | null
  configId: number | null
}

export type PluginUserConfigInstanceMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  isActive: boolean | null
  creatorId: string | null
  configId: number | null
}

export type PluginUserConfigInstanceMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  isActive: boolean | null
  creatorId: string | null
  configId: number | null
}

export type PluginUserConfigInstanceCountAggregateOutputType = {
  id: number
  value: number
  createdAt: number
  updatedAt: number
  isActive: number
  creatorId: number
  configId: number
  _all: number
}


export type PluginUserConfigInstanceAvgAggregateInputType = {
  id?: true
  configId?: true
}

export type PluginUserConfigInstanceSumAggregateInputType = {
  id?: true
  configId?: true
}

export type PluginUserConfigInstanceMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  isActive?: true
  creatorId?: true
  configId?: true
}

export type PluginUserConfigInstanceMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  isActive?: true
  creatorId?: true
  configId?: true
}

export type PluginUserConfigInstanceCountAggregateInputType = {
  id?: true
  value?: true
  createdAt?: true
  updatedAt?: true
  isActive?: true
  creatorId?: true
  configId?: true
  _all?: true
}

export type PluginUserConfigInstanceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginUserConfigInstance to aggregate.
   */
  where?: Prisma.PluginUserConfigInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginUserConfigInstances to fetch.
   */
  orderBy?: Prisma.PluginUserConfigInstanceOrderByWithRelationInput | Prisma.PluginUserConfigInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PluginUserConfigInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginUserConfigInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginUserConfigInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PluginUserConfigInstances
  **/
  _count?: true | PluginUserConfigInstanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PluginUserConfigInstanceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PluginUserConfigInstanceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PluginUserConfigInstanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PluginUserConfigInstanceMaxAggregateInputType
}

export type GetPluginUserConfigInstanceAggregateType<T extends PluginUserConfigInstanceAggregateArgs> = {
      [P in keyof T & keyof AggregatePluginUserConfigInstance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePluginUserConfigInstance[P]>
    : Prisma.GetScalarType<T[P], AggregatePluginUserConfigInstance[P]>
}




export type PluginUserConfigInstanceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PluginUserConfigInstanceWhereInput
  orderBy?: Prisma.PluginUserConfigInstanceOrderByWithAggregationInput | Prisma.PluginUserConfigInstanceOrderByWithAggregationInput[]
  by: Prisma.PluginUserConfigInstanceScalarFieldEnum[] | Prisma.PluginUserConfigInstanceScalarFieldEnum
  having?: Prisma.PluginUserConfigInstanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PluginUserConfigInstanceCountAggregateInputType | true
  _avg?: PluginUserConfigInstanceAvgAggregateInputType
  _sum?: PluginUserConfigInstanceSumAggregateInputType
  _min?: PluginUserConfigInstanceMinAggregateInputType
  _max?: PluginUserConfigInstanceMaxAggregateInputType
}

export type PluginUserConfigInstanceGroupByOutputType = {
  id: number
  value: unknown
  createdAt: Date
  updatedAt: Date
  isActive: boolean
  creatorId: string
  configId: number
  _count: PluginUserConfigInstanceCountAggregateOutputType | null
  _avg: PluginUserConfigInstanceAvgAggregateOutputType | null
  _sum: PluginUserConfigInstanceSumAggregateOutputType | null
  _min: PluginUserConfigInstanceMinAggregateOutputType | null
  _max: PluginUserConfigInstanceMaxAggregateOutputType | null
}

type GetPluginUserConfigInstanceGroupByPayload<T extends PluginUserConfigInstanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PluginUserConfigInstanceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PluginUserConfigInstanceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PluginUserConfigInstanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PluginUserConfigInstanceGroupByOutputType[P]>
      }
    >
  > 



export type PluginUserConfigInstanceWhereInput = {
  AND?: Prisma.PluginUserConfigInstanceWhereInput | Prisma.PluginUserConfigInstanceWhereInput[]
  OR?: Prisma.PluginUserConfigInstanceWhereInput[]
  NOT?: Prisma.PluginUserConfigInstanceWhereInput | Prisma.PluginUserConfigInstanceWhereInput[]
  id?: Prisma.IntFilter<"PluginUserConfigInstance"> | number
  value?: Prisma.JsonFilter<"PluginUserConfigInstance">
  createdAt?: Prisma.DateTimeFilter<"PluginUserConfigInstance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginUserConfigInstance"> | Date | string
  isActive?: Prisma.BoolFilter<"PluginUserConfigInstance"> | boolean
  creatorId?: Prisma.StringFilter<"PluginUserConfigInstance"> | string
  configId?: Prisma.IntFilter<"PluginUserConfigInstance"> | number
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Config?: Prisma.XOR<Prisma.PluginConfigScalarRelationFilter, Prisma.PluginConfigWhereInput>
}

export type PluginUserConfigInstanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  configId?: Prisma.SortOrder
  Creator?: Prisma.UserOrderByWithRelationInput
  Config?: Prisma.PluginConfigOrderByWithRelationInput
  _relevance?: Prisma.PluginUserConfigInstanceOrderByRelevanceInput
}

export type PluginUserConfigInstanceWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  configId_creatorId?: Prisma.PluginUserConfigInstanceConfigIdCreatorIdCompoundUniqueInput
  AND?: Prisma.PluginUserConfigInstanceWhereInput | Prisma.PluginUserConfigInstanceWhereInput[]
  OR?: Prisma.PluginUserConfigInstanceWhereInput[]
  NOT?: Prisma.PluginUserConfigInstanceWhereInput | Prisma.PluginUserConfigInstanceWhereInput[]
  value?: Prisma.JsonFilter<"PluginUserConfigInstance">
  createdAt?: Prisma.DateTimeFilter<"PluginUserConfigInstance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginUserConfigInstance"> | Date | string
  isActive?: Prisma.BoolFilter<"PluginUserConfigInstance"> | boolean
  creatorId?: Prisma.StringFilter<"PluginUserConfigInstance"> | string
  configId?: Prisma.IntFilter<"PluginUserConfigInstance"> | number
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Config?: Prisma.XOR<Prisma.PluginConfigScalarRelationFilter, Prisma.PluginConfigWhereInput>
}, "id" | "configId_creatorId">

export type PluginUserConfigInstanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  configId?: Prisma.SortOrder
  _count?: Prisma.PluginUserConfigInstanceCountOrderByAggregateInput
  _avg?: Prisma.PluginUserConfigInstanceAvgOrderByAggregateInput
  _max?: Prisma.PluginUserConfigInstanceMaxOrderByAggregateInput
  _min?: Prisma.PluginUserConfigInstanceMinOrderByAggregateInput
  _sum?: Prisma.PluginUserConfigInstanceSumOrderByAggregateInput
}

export type PluginUserConfigInstanceScalarWhereWithAggregatesInput = {
  AND?: Prisma.PluginUserConfigInstanceScalarWhereWithAggregatesInput | Prisma.PluginUserConfigInstanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.PluginUserConfigInstanceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PluginUserConfigInstanceScalarWhereWithAggregatesInput | Prisma.PluginUserConfigInstanceScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PluginUserConfigInstance"> | number
  value?: Prisma.JsonWithAggregatesFilter<"PluginUserConfigInstance">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PluginUserConfigInstance"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PluginUserConfigInstance"> | Date | string
  isActive?: Prisma.BoolWithAggregatesFilter<"PluginUserConfigInstance"> | boolean
  creatorId?: Prisma.StringWithAggregatesFilter<"PluginUserConfigInstance"> | string
  configId?: Prisma.IntWithAggregatesFilter<"PluginUserConfigInstance"> | number
}

export type PluginUserConfigInstanceCreateInput = {
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  Creator: Prisma.UserCreateNestedOneWithoutPluginUserConfigInstancesInput
  Config: Prisma.PluginConfigCreateNestedOneWithoutUserInstancesInput
}

export type PluginUserConfigInstanceUncheckedCreateInput = {
  id?: number
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  creatorId: string
  configId: number
}

export type PluginUserConfigInstanceUpdateInput = {
  value?: unknown
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Creator?: Prisma.UserUpdateOneRequiredWithoutPluginUserConfigInstancesNestedInput
  Config?: Prisma.PluginConfigUpdateOneRequiredWithoutUserInstancesNestedInput
}

export type PluginUserConfigInstanceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: unknown
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  configId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PluginUserConfigInstanceCreateManyInput = {
  id?: number
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  creatorId: string
  configId: number
}

export type PluginUserConfigInstanceUpdateManyMutationInput = {
  value?: unknown
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PluginUserConfigInstanceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: unknown
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  configId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PluginUserConfigInstanceListRelationFilter = {
  every?: Prisma.PluginUserConfigInstanceWhereInput
  some?: Prisma.PluginUserConfigInstanceWhereInput
  none?: Prisma.PluginUserConfigInstanceWhereInput
}

export type PluginUserConfigInstanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PluginUserConfigInstanceOrderByRelevanceInput = {
  fields: Prisma.PluginUserConfigInstanceOrderByRelevanceFieldEnum | Prisma.PluginUserConfigInstanceOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PluginUserConfigInstanceConfigIdCreatorIdCompoundUniqueInput = {
  configId: number
  creatorId: string
}

export type PluginUserConfigInstanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  configId?: Prisma.SortOrder
}

export type PluginUserConfigInstanceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  configId?: Prisma.SortOrder
}

export type PluginUserConfigInstanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  configId?: Prisma.SortOrder
}

export type PluginUserConfigInstanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  configId?: Prisma.SortOrder
}

export type PluginUserConfigInstanceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  configId?: Prisma.SortOrder
}

export type PluginUserConfigInstanceCreateNestedManyWithoutConfigInput = {
  create?: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutConfigInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput> | Prisma.PluginUserConfigInstanceCreateWithoutConfigInput[] | Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput[]
  connectOrCreate?: Prisma.PluginUserConfigInstanceCreateOrConnectWithoutConfigInput | Prisma.PluginUserConfigInstanceCreateOrConnectWithoutConfigInput[]
  createMany?: Prisma.PluginUserConfigInstanceCreateManyConfigInputEnvelope
  connect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
}

export type PluginUserConfigInstanceUncheckedCreateNestedManyWithoutConfigInput = {
  create?: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutConfigInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput> | Prisma.PluginUserConfigInstanceCreateWithoutConfigInput[] | Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput[]
  connectOrCreate?: Prisma.PluginUserConfigInstanceCreateOrConnectWithoutConfigInput | Prisma.PluginUserConfigInstanceCreateOrConnectWithoutConfigInput[]
  createMany?: Prisma.PluginUserConfigInstanceCreateManyConfigInputEnvelope
  connect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
}

export type PluginUserConfigInstanceUpdateManyWithoutConfigNestedInput = {
  create?: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutConfigInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput> | Prisma.PluginUserConfigInstanceCreateWithoutConfigInput[] | Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput[]
  connectOrCreate?: Prisma.PluginUserConfigInstanceCreateOrConnectWithoutConfigInput | Prisma.PluginUserConfigInstanceCreateOrConnectWithoutConfigInput[]
  upsert?: Prisma.PluginUserConfigInstanceUpsertWithWhereUniqueWithoutConfigInput | Prisma.PluginUserConfigInstanceUpsertWithWhereUniqueWithoutConfigInput[]
  createMany?: Prisma.PluginUserConfigInstanceCreateManyConfigInputEnvelope
  set?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  disconnect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  delete?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  connect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  update?: Prisma.PluginUserConfigInstanceUpdateWithWhereUniqueWithoutConfigInput | Prisma.PluginUserConfigInstanceUpdateWithWhereUniqueWithoutConfigInput[]
  updateMany?: Prisma.PluginUserConfigInstanceUpdateManyWithWhereWithoutConfigInput | Prisma.PluginUserConfigInstanceUpdateManyWithWhereWithoutConfigInput[]
  deleteMany?: Prisma.PluginUserConfigInstanceScalarWhereInput | Prisma.PluginUserConfigInstanceScalarWhereInput[]
}

export type PluginUserConfigInstanceUncheckedUpdateManyWithoutConfigNestedInput = {
  create?: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutConfigInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput> | Prisma.PluginUserConfigInstanceCreateWithoutConfigInput[] | Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput[]
  connectOrCreate?: Prisma.PluginUserConfigInstanceCreateOrConnectWithoutConfigInput | Prisma.PluginUserConfigInstanceCreateOrConnectWithoutConfigInput[]
  upsert?: Prisma.PluginUserConfigInstanceUpsertWithWhereUniqueWithoutConfigInput | Prisma.PluginUserConfigInstanceUpsertWithWhereUniqueWithoutConfigInput[]
  createMany?: Prisma.PluginUserConfigInstanceCreateManyConfigInputEnvelope
  set?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  disconnect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  delete?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  connect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  update?: Prisma.PluginUserConfigInstanceUpdateWithWhereUniqueWithoutConfigInput | Prisma.PluginUserConfigInstanceUpdateWithWhereUniqueWithoutConfigInput[]
  updateMany?: Prisma.PluginUserConfigInstanceUpdateManyWithWhereWithoutConfigInput | Prisma.PluginUserConfigInstanceUpdateManyWithWhereWithoutConfigInput[]
  deleteMany?: Prisma.PluginUserConfigInstanceScalarWhereInput | Prisma.PluginUserConfigInstanceScalarWhereInput[]
}

export type PluginUserConfigInstanceCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput> | Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput[] | Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput | Prisma.PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.PluginUserConfigInstanceCreateManyCreatorInputEnvelope
  connect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
}

export type PluginUserConfigInstanceUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput> | Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput[] | Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput | Prisma.PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.PluginUserConfigInstanceCreateManyCreatorInputEnvelope
  connect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
}

export type PluginUserConfigInstanceUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput> | Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput[] | Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput | Prisma.PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.PluginUserConfigInstanceUpsertWithWhereUniqueWithoutCreatorInput | Prisma.PluginUserConfigInstanceUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.PluginUserConfigInstanceCreateManyCreatorInputEnvelope
  set?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  disconnect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  delete?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  connect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  update?: Prisma.PluginUserConfigInstanceUpdateWithWhereUniqueWithoutCreatorInput | Prisma.PluginUserConfigInstanceUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.PluginUserConfigInstanceUpdateManyWithWhereWithoutCreatorInput | Prisma.PluginUserConfigInstanceUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.PluginUserConfigInstanceScalarWhereInput | Prisma.PluginUserConfigInstanceScalarWhereInput[]
}

export type PluginUserConfigInstanceUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput> | Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput[] | Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput | Prisma.PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.PluginUserConfigInstanceUpsertWithWhereUniqueWithoutCreatorInput | Prisma.PluginUserConfigInstanceUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.PluginUserConfigInstanceCreateManyCreatorInputEnvelope
  set?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  disconnect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  delete?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  connect?: Prisma.PluginUserConfigInstanceWhereUniqueInput | Prisma.PluginUserConfigInstanceWhereUniqueInput[]
  update?: Prisma.PluginUserConfigInstanceUpdateWithWhereUniqueWithoutCreatorInput | Prisma.PluginUserConfigInstanceUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.PluginUserConfigInstanceUpdateManyWithWhereWithoutCreatorInput | Prisma.PluginUserConfigInstanceUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.PluginUserConfigInstanceScalarWhereInput | Prisma.PluginUserConfigInstanceScalarWhereInput[]
}

export type PluginUserConfigInstanceCreateWithoutConfigInput = {
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  Creator: Prisma.UserCreateNestedOneWithoutPluginUserConfigInstancesInput
}

export type PluginUserConfigInstanceUncheckedCreateWithoutConfigInput = {
  id?: number
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  creatorId: string
}

export type PluginUserConfigInstanceCreateOrConnectWithoutConfigInput = {
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
  create: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutConfigInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput>
}

export type PluginUserConfigInstanceCreateManyConfigInputEnvelope = {
  data: Prisma.PluginUserConfigInstanceCreateManyConfigInput | Prisma.PluginUserConfigInstanceCreateManyConfigInput[]
  skipDuplicates?: boolean
}

export type PluginUserConfigInstanceUpsertWithWhereUniqueWithoutConfigInput = {
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
  update: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateWithoutConfigInput, Prisma.PluginUserConfigInstanceUncheckedUpdateWithoutConfigInput>
  create: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutConfigInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutConfigInput>
}

export type PluginUserConfigInstanceUpdateWithWhereUniqueWithoutConfigInput = {
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
  data: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateWithoutConfigInput, Prisma.PluginUserConfigInstanceUncheckedUpdateWithoutConfigInput>
}

export type PluginUserConfigInstanceUpdateManyWithWhereWithoutConfigInput = {
  where: Prisma.PluginUserConfigInstanceScalarWhereInput
  data: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateManyMutationInput, Prisma.PluginUserConfigInstanceUncheckedUpdateManyWithoutConfigInput>
}

export type PluginUserConfigInstanceScalarWhereInput = {
  AND?: Prisma.PluginUserConfigInstanceScalarWhereInput | Prisma.PluginUserConfigInstanceScalarWhereInput[]
  OR?: Prisma.PluginUserConfigInstanceScalarWhereInput[]
  NOT?: Prisma.PluginUserConfigInstanceScalarWhereInput | Prisma.PluginUserConfigInstanceScalarWhereInput[]
  id?: Prisma.IntFilter<"PluginUserConfigInstance"> | number
  value?: Prisma.JsonFilter<"PluginUserConfigInstance">
  createdAt?: Prisma.DateTimeFilter<"PluginUserConfigInstance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginUserConfigInstance"> | Date | string
  isActive?: Prisma.BoolFilter<"PluginUserConfigInstance"> | boolean
  creatorId?: Prisma.StringFilter<"PluginUserConfigInstance"> | string
  configId?: Prisma.IntFilter<"PluginUserConfigInstance"> | number
}

export type PluginUserConfigInstanceCreateWithoutCreatorInput = {
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  Config: Prisma.PluginConfigCreateNestedOneWithoutUserInstancesInput
}

export type PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput = {
  id?: number
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  configId: number
}

export type PluginUserConfigInstanceCreateOrConnectWithoutCreatorInput = {
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
  create: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput>
}

export type PluginUserConfigInstanceCreateManyCreatorInputEnvelope = {
  data: Prisma.PluginUserConfigInstanceCreateManyCreatorInput | Prisma.PluginUserConfigInstanceCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type PluginUserConfigInstanceUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
  update: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateWithoutCreatorInput, Prisma.PluginUserConfigInstanceUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateWithoutCreatorInput, Prisma.PluginUserConfigInstanceUncheckedCreateWithoutCreatorInput>
}

export type PluginUserConfigInstanceUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
  data: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateWithoutCreatorInput, Prisma.PluginUserConfigInstanceUncheckedUpdateWithoutCreatorInput>
}

export type PluginUserConfigInstanceUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.PluginUserConfigInstanceScalarWhereInput
  data: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateManyMutationInput, Prisma.PluginUserConfigInstanceUncheckedUpdateManyWithoutCreatorInput>
}

export type PluginUserConfigInstanceCreateManyConfigInput = {
  id?: number
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  creatorId: string
}

export type PluginUserConfigInstanceUpdateWithoutConfigInput = {
  value?: unknown
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Creator?: Prisma.UserUpdateOneRequiredWithoutPluginUserConfigInstancesNestedInput
}

export type PluginUserConfigInstanceUncheckedUpdateWithoutConfigInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: unknown
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginUserConfigInstanceUncheckedUpdateManyWithoutConfigInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginUserConfigInstanceCreateManyCreatorInput = {
  id?: number
  value: unknown
  createdAt?: Date | string
  updatedAt?: Date | string
  isActive?: boolean
  configId: number
}

export type PluginUserConfigInstanceUpdateWithoutCreatorInput = {
  value?: unknown
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Config?: Prisma.PluginConfigUpdateOneRequiredWithoutUserInstancesNestedInput
}

export type PluginUserConfigInstanceUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: unknown
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  configId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PluginUserConfigInstanceUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  configId?: Prisma.IntFieldUpdateOperationsInput | number
}



export type PluginUserConfigInstanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isActive?: boolean
  creatorId?: boolean
  configId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Config?: boolean | Prisma.PluginConfigDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginUserConfigInstance"]>

export type PluginUserConfigInstanceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isActive?: boolean
  creatorId?: boolean
  configId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Config?: boolean | Prisma.PluginConfigDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginUserConfigInstance"]>

export type PluginUserConfigInstanceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isActive?: boolean
  creatorId?: boolean
  configId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Config?: boolean | Prisma.PluginConfigDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginUserConfigInstance"]>

export type PluginUserConfigInstanceSelectScalar = {
  id?: boolean
  value?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isActive?: boolean
  creatorId?: boolean
  configId?: boolean
}

export type PluginUserConfigInstanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "value" | "createdAt" | "updatedAt" | "isActive" | "creatorId" | "configId", ExtArgs["result"]["pluginUserConfigInstance"]>
export type PluginUserConfigInstanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Config?: boolean | Prisma.PluginConfigDefaultArgs<ExtArgs>
}
export type PluginUserConfigInstanceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Config?: boolean | Prisma.PluginConfigDefaultArgs<ExtArgs>
}
export type PluginUserConfigInstanceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Config?: boolean | Prisma.PluginConfigDefaultArgs<ExtArgs>
}

export type $PluginUserConfigInstancePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PluginUserConfigInstance"
  objects: {
    Creator: Prisma.$UserPayload<ExtArgs>
    Config: Prisma.$PluginConfigPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    value: unknown
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    creatorId: string
    configId: number
  }, ExtArgs["result"]["pluginUserConfigInstance"]>
  composites: {}
}

export type PluginUserConfigInstanceGetPayload<S extends boolean | null | undefined | PluginUserConfigInstanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload, S>

export type PluginUserConfigInstanceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PluginUserConfigInstanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PluginUserConfigInstanceCountAggregateInputType | true
  }

export interface PluginUserConfigInstanceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PluginUserConfigInstance'], meta: { name: 'PluginUserConfigInstance' } }
  /**
   * Find zero or one PluginUserConfigInstance that matches the filter.
   * @param {PluginUserConfigInstanceFindUniqueArgs} args - Arguments to find a PluginUserConfigInstance
   * @example
   * // Get one PluginUserConfigInstance
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PluginUserConfigInstanceFindUniqueArgs>(args: Prisma.SelectSubset<T, PluginUserConfigInstanceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PluginUserConfigInstanceClient<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PluginUserConfigInstance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PluginUserConfigInstanceFindUniqueOrThrowArgs} args - Arguments to find a PluginUserConfigInstance
   * @example
   * // Get one PluginUserConfigInstance
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PluginUserConfigInstanceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PluginUserConfigInstanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginUserConfigInstanceClient<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginUserConfigInstance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginUserConfigInstanceFindFirstArgs} args - Arguments to find a PluginUserConfigInstance
   * @example
   * // Get one PluginUserConfigInstance
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PluginUserConfigInstanceFindFirstArgs>(args?: Prisma.SelectSubset<T, PluginUserConfigInstanceFindFirstArgs<ExtArgs>>): Prisma.Prisma__PluginUserConfigInstanceClient<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginUserConfigInstance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginUserConfigInstanceFindFirstOrThrowArgs} args - Arguments to find a PluginUserConfigInstance
   * @example
   * // Get one PluginUserConfigInstance
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PluginUserConfigInstanceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PluginUserConfigInstanceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginUserConfigInstanceClient<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PluginUserConfigInstances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginUserConfigInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PluginUserConfigInstances
   * const pluginUserConfigInstances = await prisma.pluginUserConfigInstance.findMany()
   * 
   * // Get first 10 PluginUserConfigInstances
   * const pluginUserConfigInstances = await prisma.pluginUserConfigInstance.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pluginUserConfigInstanceWithIdOnly = await prisma.pluginUserConfigInstance.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PluginUserConfigInstanceFindManyArgs>(args?: Prisma.SelectSubset<T, PluginUserConfigInstanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PluginUserConfigInstance.
   * @param {PluginUserConfigInstanceCreateArgs} args - Arguments to create a PluginUserConfigInstance.
   * @example
   * // Create one PluginUserConfigInstance
   * const PluginUserConfigInstance = await prisma.pluginUserConfigInstance.create({
   *   data: {
   *     // ... data to create a PluginUserConfigInstance
   *   }
   * })
   * 
   */
  create<T extends PluginUserConfigInstanceCreateArgs>(args: Prisma.SelectSubset<T, PluginUserConfigInstanceCreateArgs<ExtArgs>>): Prisma.Prisma__PluginUserConfigInstanceClient<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PluginUserConfigInstances.
   * @param {PluginUserConfigInstanceCreateManyArgs} args - Arguments to create many PluginUserConfigInstances.
   * @example
   * // Create many PluginUserConfigInstances
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PluginUserConfigInstanceCreateManyArgs>(args?: Prisma.SelectSubset<T, PluginUserConfigInstanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PluginUserConfigInstances and returns the data saved in the database.
   * @param {PluginUserConfigInstanceCreateManyAndReturnArgs} args - Arguments to create many PluginUserConfigInstances.
   * @example
   * // Create many PluginUserConfigInstances
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PluginUserConfigInstances and only return the `id`
   * const pluginUserConfigInstanceWithIdOnly = await prisma.pluginUserConfigInstance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PluginUserConfigInstanceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PluginUserConfigInstanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PluginUserConfigInstance.
   * @param {PluginUserConfigInstanceDeleteArgs} args - Arguments to delete one PluginUserConfigInstance.
   * @example
   * // Delete one PluginUserConfigInstance
   * const PluginUserConfigInstance = await prisma.pluginUserConfigInstance.delete({
   *   where: {
   *     // ... filter to delete one PluginUserConfigInstance
   *   }
   * })
   * 
   */
  delete<T extends PluginUserConfigInstanceDeleteArgs>(args: Prisma.SelectSubset<T, PluginUserConfigInstanceDeleteArgs<ExtArgs>>): Prisma.Prisma__PluginUserConfigInstanceClient<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PluginUserConfigInstance.
   * @param {PluginUserConfigInstanceUpdateArgs} args - Arguments to update one PluginUserConfigInstance.
   * @example
   * // Update one PluginUserConfigInstance
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PluginUserConfigInstanceUpdateArgs>(args: Prisma.SelectSubset<T, PluginUserConfigInstanceUpdateArgs<ExtArgs>>): Prisma.Prisma__PluginUserConfigInstanceClient<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PluginUserConfigInstances.
   * @param {PluginUserConfigInstanceDeleteManyArgs} args - Arguments to filter PluginUserConfigInstances to delete.
   * @example
   * // Delete a few PluginUserConfigInstances
   * const { count } = await prisma.pluginUserConfigInstance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PluginUserConfigInstanceDeleteManyArgs>(args?: Prisma.SelectSubset<T, PluginUserConfigInstanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginUserConfigInstances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginUserConfigInstanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PluginUserConfigInstances
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PluginUserConfigInstanceUpdateManyArgs>(args: Prisma.SelectSubset<T, PluginUserConfigInstanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginUserConfigInstances and returns the data updated in the database.
   * @param {PluginUserConfigInstanceUpdateManyAndReturnArgs} args - Arguments to update many PluginUserConfigInstances.
   * @example
   * // Update many PluginUserConfigInstances
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PluginUserConfigInstances and only return the `id`
   * const pluginUserConfigInstanceWithIdOnly = await prisma.pluginUserConfigInstance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PluginUserConfigInstanceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PluginUserConfigInstanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PluginUserConfigInstance.
   * @param {PluginUserConfigInstanceUpsertArgs} args - Arguments to update or create a PluginUserConfigInstance.
   * @example
   * // Update or create a PluginUserConfigInstance
   * const pluginUserConfigInstance = await prisma.pluginUserConfigInstance.upsert({
   *   create: {
   *     // ... data to create a PluginUserConfigInstance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PluginUserConfigInstance we want to update
   *   }
   * })
   */
  upsert<T extends PluginUserConfigInstanceUpsertArgs>(args: Prisma.SelectSubset<T, PluginUserConfigInstanceUpsertArgs<ExtArgs>>): Prisma.Prisma__PluginUserConfigInstanceClient<runtime.Types.Result.GetResult<Prisma.$PluginUserConfigInstancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PluginUserConfigInstances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginUserConfigInstanceCountArgs} args - Arguments to filter PluginUserConfigInstances to count.
   * @example
   * // Count the number of PluginUserConfigInstances
   * const count = await prisma.pluginUserConfigInstance.count({
   *   where: {
   *     // ... the filter for the PluginUserConfigInstances we want to count
   *   }
   * })
  **/
  count<T extends PluginUserConfigInstanceCountArgs>(
    args?: Prisma.Subset<T, PluginUserConfigInstanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PluginUserConfigInstanceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PluginUserConfigInstance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginUserConfigInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PluginUserConfigInstanceAggregateArgs>(args: Prisma.Subset<T, PluginUserConfigInstanceAggregateArgs>): Prisma.PrismaPromise<GetPluginUserConfigInstanceAggregateType<T>>

  /**
   * Group by PluginUserConfigInstance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginUserConfigInstanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PluginUserConfigInstanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PluginUserConfigInstanceGroupByArgs['orderBy'] }
      : { orderBy?: PluginUserConfigInstanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PluginUserConfigInstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPluginUserConfigInstanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PluginUserConfigInstance model
 */
readonly fields: PluginUserConfigInstanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PluginUserConfigInstance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PluginUserConfigInstanceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Config<T extends Prisma.PluginConfigDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PluginConfigDefaultArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PluginUserConfigInstance model
 */
export interface PluginUserConfigInstanceFieldRefs {
  readonly id: Prisma.FieldRef<"PluginUserConfigInstance", 'Int'>
  readonly value: Prisma.FieldRef<"PluginUserConfigInstance", 'Json'>
  readonly createdAt: Prisma.FieldRef<"PluginUserConfigInstance", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PluginUserConfigInstance", 'DateTime'>
  readonly isActive: Prisma.FieldRef<"PluginUserConfigInstance", 'Boolean'>
  readonly creatorId: Prisma.FieldRef<"PluginUserConfigInstance", 'String'>
  readonly configId: Prisma.FieldRef<"PluginUserConfigInstance", 'Int'>
}
    

// Custom InputTypes
/**
 * PluginUserConfigInstance findUnique
 */
export type PluginUserConfigInstanceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * Filter, which PluginUserConfigInstance to fetch.
   */
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
}

/**
 * PluginUserConfigInstance findUniqueOrThrow
 */
export type PluginUserConfigInstanceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * Filter, which PluginUserConfigInstance to fetch.
   */
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
}

/**
 * PluginUserConfigInstance findFirst
 */
export type PluginUserConfigInstanceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * Filter, which PluginUserConfigInstance to fetch.
   */
  where?: Prisma.PluginUserConfigInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginUserConfigInstances to fetch.
   */
  orderBy?: Prisma.PluginUserConfigInstanceOrderByWithRelationInput | Prisma.PluginUserConfigInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginUserConfigInstances.
   */
  cursor?: Prisma.PluginUserConfigInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginUserConfigInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginUserConfigInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginUserConfigInstances.
   */
  distinct?: Prisma.PluginUserConfigInstanceScalarFieldEnum | Prisma.PluginUserConfigInstanceScalarFieldEnum[]
}

/**
 * PluginUserConfigInstance findFirstOrThrow
 */
export type PluginUserConfigInstanceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * Filter, which PluginUserConfigInstance to fetch.
   */
  where?: Prisma.PluginUserConfigInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginUserConfigInstances to fetch.
   */
  orderBy?: Prisma.PluginUserConfigInstanceOrderByWithRelationInput | Prisma.PluginUserConfigInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginUserConfigInstances.
   */
  cursor?: Prisma.PluginUserConfigInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginUserConfigInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginUserConfigInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginUserConfigInstances.
   */
  distinct?: Prisma.PluginUserConfigInstanceScalarFieldEnum | Prisma.PluginUserConfigInstanceScalarFieldEnum[]
}

/**
 * PluginUserConfigInstance findMany
 */
export type PluginUserConfigInstanceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * Filter, which PluginUserConfigInstances to fetch.
   */
  where?: Prisma.PluginUserConfigInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginUserConfigInstances to fetch.
   */
  orderBy?: Prisma.PluginUserConfigInstanceOrderByWithRelationInput | Prisma.PluginUserConfigInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PluginUserConfigInstances.
   */
  cursor?: Prisma.PluginUserConfigInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginUserConfigInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginUserConfigInstances.
   */
  skip?: number
  distinct?: Prisma.PluginUserConfigInstanceScalarFieldEnum | Prisma.PluginUserConfigInstanceScalarFieldEnum[]
}

/**
 * PluginUserConfigInstance create
 */
export type PluginUserConfigInstanceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * The data needed to create a PluginUserConfigInstance.
   */
  data: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateInput, Prisma.PluginUserConfigInstanceUncheckedCreateInput>
}

/**
 * PluginUserConfigInstance createMany
 */
export type PluginUserConfigInstanceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PluginUserConfigInstances.
   */
  data: Prisma.PluginUserConfigInstanceCreateManyInput | Prisma.PluginUserConfigInstanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PluginUserConfigInstance createManyAndReturn
 */
export type PluginUserConfigInstanceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * The data used to create many PluginUserConfigInstances.
   */
  data: Prisma.PluginUserConfigInstanceCreateManyInput | Prisma.PluginUserConfigInstanceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PluginUserConfigInstance update
 */
export type PluginUserConfigInstanceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * The data needed to update a PluginUserConfigInstance.
   */
  data: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateInput, Prisma.PluginUserConfigInstanceUncheckedUpdateInput>
  /**
   * Choose, which PluginUserConfigInstance to update.
   */
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
}

/**
 * PluginUserConfigInstance updateMany
 */
export type PluginUserConfigInstanceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PluginUserConfigInstances.
   */
  data: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateManyMutationInput, Prisma.PluginUserConfigInstanceUncheckedUpdateManyInput>
  /**
   * Filter which PluginUserConfigInstances to update
   */
  where?: Prisma.PluginUserConfigInstanceWhereInput
  /**
   * Limit how many PluginUserConfigInstances to update.
   */
  limit?: number
}

/**
 * PluginUserConfigInstance updateManyAndReturn
 */
export type PluginUserConfigInstanceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * The data used to update PluginUserConfigInstances.
   */
  data: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateManyMutationInput, Prisma.PluginUserConfigInstanceUncheckedUpdateManyInput>
  /**
   * Filter which PluginUserConfigInstances to update
   */
  where?: Prisma.PluginUserConfigInstanceWhereInput
  /**
   * Limit how many PluginUserConfigInstances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PluginUserConfigInstance upsert
 */
export type PluginUserConfigInstanceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * The filter to search for the PluginUserConfigInstance to update in case it exists.
   */
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
  /**
   * In case the PluginUserConfigInstance found by the `where` argument doesn't exist, create a new PluginUserConfigInstance with this data.
   */
  create: Prisma.XOR<Prisma.PluginUserConfigInstanceCreateInput, Prisma.PluginUserConfigInstanceUncheckedCreateInput>
  /**
   * In case the PluginUserConfigInstance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PluginUserConfigInstanceUpdateInput, Prisma.PluginUserConfigInstanceUncheckedUpdateInput>
}

/**
 * PluginUserConfigInstance delete
 */
export type PluginUserConfigInstanceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
  /**
   * Filter which PluginUserConfigInstance to delete.
   */
  where: Prisma.PluginUserConfigInstanceWhereUniqueInput
}

/**
 * PluginUserConfigInstance deleteMany
 */
export type PluginUserConfigInstanceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginUserConfigInstances to delete
   */
  where?: Prisma.PluginUserConfigInstanceWhereInput
  /**
   * Limit how many PluginUserConfigInstances to delete.
   */
  limit?: number
}

/**
 * PluginUserConfigInstance without action
 */
export type PluginUserConfigInstanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginUserConfigInstance
   */
  select?: Prisma.PluginUserConfigInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginUserConfigInstance
   */
  omit?: Prisma.PluginUserConfigInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginUserConfigInstanceInclude<ExtArgs> | null
}
