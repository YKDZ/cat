
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `StorageType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StorageType
 * 
 */
export type StorageTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$StorageTypePayload>

export type AggregateStorageType = {
  _count: StorageTypeCountAggregateOutputType | null
  _avg: StorageTypeAvgAggregateOutputType | null
  _sum: StorageTypeSumAggregateOutputType | null
  _min: StorageTypeMinAggregateOutputType | null
  _max: StorageTypeMaxAggregateOutputType | null
}

export type StorageTypeAvgAggregateOutputType = {
  id: number | null
}

export type StorageTypeSumAggregateOutputType = {
  id: number | null
}

export type StorageTypeMinAggregateOutputType = {
  id: number | null
  name: string | null
}

export type StorageTypeMaxAggregateOutputType = {
  id: number | null
  name: string | null
}

export type StorageTypeCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type StorageTypeAvgAggregateInputType = {
  id?: true
}

export type StorageTypeSumAggregateInputType = {
  id?: true
}

export type StorageTypeMinAggregateInputType = {
  id?: true
  name?: true
}

export type StorageTypeMaxAggregateInputType = {
  id?: true
  name?: true
}

export type StorageTypeCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type StorageTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StorageType to aggregate.
   */
  where?: Prisma.StorageTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StorageTypes to fetch.
   */
  orderBy?: Prisma.StorageTypeOrderByWithRelationInput | Prisma.StorageTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StorageTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StorageTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StorageTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StorageTypes
  **/
  _count?: true | StorageTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: StorageTypeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: StorageTypeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StorageTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StorageTypeMaxAggregateInputType
}

export type GetStorageTypeAggregateType<T extends StorageTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateStorageType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStorageType[P]>
    : Prisma.GetScalarType<T[P], AggregateStorageType[P]>
}




export type StorageTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StorageTypeWhereInput
  orderBy?: Prisma.StorageTypeOrderByWithAggregationInput | Prisma.StorageTypeOrderByWithAggregationInput[]
  by: Prisma.StorageTypeScalarFieldEnum[] | Prisma.StorageTypeScalarFieldEnum
  having?: Prisma.StorageTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StorageTypeCountAggregateInputType | true
  _avg?: StorageTypeAvgAggregateInputType
  _sum?: StorageTypeSumAggregateInputType
  _min?: StorageTypeMinAggregateInputType
  _max?: StorageTypeMaxAggregateInputType
}

export type StorageTypeGroupByOutputType = {
  id: number
  name: string
  _count: StorageTypeCountAggregateOutputType | null
  _avg: StorageTypeAvgAggregateOutputType | null
  _sum: StorageTypeSumAggregateOutputType | null
  _min: StorageTypeMinAggregateOutputType | null
  _max: StorageTypeMaxAggregateOutputType | null
}

type GetStorageTypeGroupByPayload<T extends StorageTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StorageTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StorageTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StorageTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StorageTypeGroupByOutputType[P]>
      }
    >
  > 



export type StorageTypeWhereInput = {
  AND?: Prisma.StorageTypeWhereInput | Prisma.StorageTypeWhereInput[]
  OR?: Prisma.StorageTypeWhereInput[]
  NOT?: Prisma.StorageTypeWhereInput | Prisma.StorageTypeWhereInput[]
  id?: Prisma.IntFilter<"StorageType"> | number
  name?: Prisma.StringFilter<"StorageType"> | string
  Files?: Prisma.FileListRelationFilter
}

export type StorageTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  Files?: Prisma.FileOrderByRelationAggregateInput
  _relevance?: Prisma.StorageTypeOrderByRelevanceInput
}

export type StorageTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.StorageTypeWhereInput | Prisma.StorageTypeWhereInput[]
  OR?: Prisma.StorageTypeWhereInput[]
  NOT?: Prisma.StorageTypeWhereInput | Prisma.StorageTypeWhereInput[]
  Files?: Prisma.FileListRelationFilter
}, "id" | "name">

export type StorageTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.StorageTypeCountOrderByAggregateInput
  _avg?: Prisma.StorageTypeAvgOrderByAggregateInput
  _max?: Prisma.StorageTypeMaxOrderByAggregateInput
  _min?: Prisma.StorageTypeMinOrderByAggregateInput
  _sum?: Prisma.StorageTypeSumOrderByAggregateInput
}

export type StorageTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.StorageTypeScalarWhereWithAggregatesInput | Prisma.StorageTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.StorageTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StorageTypeScalarWhereWithAggregatesInput | Prisma.StorageTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"StorageType"> | number
  name?: Prisma.StringWithAggregatesFilter<"StorageType"> | string
}

export type StorageTypeCreateInput = {
  name: string
  Files?: Prisma.FileCreateNestedManyWithoutStorageTypeInput
}

export type StorageTypeUncheckedCreateInput = {
  id?: number
  name: string
  Files?: Prisma.FileUncheckedCreateNestedManyWithoutStorageTypeInput
}

export type StorageTypeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  Files?: Prisma.FileUpdateManyWithoutStorageTypeNestedInput
}

export type StorageTypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  Files?: Prisma.FileUncheckedUpdateManyWithoutStorageTypeNestedInput
}

export type StorageTypeCreateManyInput = {
  id?: number
  name: string
}

export type StorageTypeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StorageTypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StorageTypeScalarRelationFilter = {
  is?: Prisma.StorageTypeWhereInput
  isNot?: Prisma.StorageTypeWhereInput
}

export type StorageTypeOrderByRelevanceInput = {
  fields: Prisma.StorageTypeOrderByRelevanceFieldEnum | Prisma.StorageTypeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type StorageTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type StorageTypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StorageTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type StorageTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type StorageTypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StorageTypeCreateNestedOneWithoutFilesInput = {
  create?: Prisma.XOR<Prisma.StorageTypeCreateWithoutFilesInput, Prisma.StorageTypeUncheckedCreateWithoutFilesInput>
  connectOrCreate?: Prisma.StorageTypeCreateOrConnectWithoutFilesInput
  connect?: Prisma.StorageTypeWhereUniqueInput
}

export type StorageTypeUpdateOneRequiredWithoutFilesNestedInput = {
  create?: Prisma.XOR<Prisma.StorageTypeCreateWithoutFilesInput, Prisma.StorageTypeUncheckedCreateWithoutFilesInput>
  connectOrCreate?: Prisma.StorageTypeCreateOrConnectWithoutFilesInput
  upsert?: Prisma.StorageTypeUpsertWithoutFilesInput
  connect?: Prisma.StorageTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StorageTypeUpdateToOneWithWhereWithoutFilesInput, Prisma.StorageTypeUpdateWithoutFilesInput>, Prisma.StorageTypeUncheckedUpdateWithoutFilesInput>
}

export type StorageTypeCreateWithoutFilesInput = {
  name: string
}

export type StorageTypeUncheckedCreateWithoutFilesInput = {
  id?: number
  name: string
}

export type StorageTypeCreateOrConnectWithoutFilesInput = {
  where: Prisma.StorageTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.StorageTypeCreateWithoutFilesInput, Prisma.StorageTypeUncheckedCreateWithoutFilesInput>
}

export type StorageTypeUpsertWithoutFilesInput = {
  update: Prisma.XOR<Prisma.StorageTypeUpdateWithoutFilesInput, Prisma.StorageTypeUncheckedUpdateWithoutFilesInput>
  create: Prisma.XOR<Prisma.StorageTypeCreateWithoutFilesInput, Prisma.StorageTypeUncheckedCreateWithoutFilesInput>
  where?: Prisma.StorageTypeWhereInput
}

export type StorageTypeUpdateToOneWithWhereWithoutFilesInput = {
  where?: Prisma.StorageTypeWhereInput
  data: Prisma.XOR<Prisma.StorageTypeUpdateWithoutFilesInput, Prisma.StorageTypeUncheckedUpdateWithoutFilesInput>
}

export type StorageTypeUpdateWithoutFilesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StorageTypeUncheckedUpdateWithoutFilesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type StorageTypeCountOutputType
 */

export type StorageTypeCountOutputType = {
  Files: number
}

export type StorageTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Files?: boolean | StorageTypeCountOutputTypeCountFilesArgs
}

/**
 * StorageTypeCountOutputType without action
 */
export type StorageTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageTypeCountOutputType
   */
  select?: Prisma.StorageTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * StorageTypeCountOutputType without action
 */
export type StorageTypeCountOutputTypeCountFilesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FileWhereInput
}


export type StorageTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  Files?: boolean | Prisma.StorageType$FilesArgs<ExtArgs>
  _count?: boolean | Prisma.StorageTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["storageType"]>

export type StorageTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["storageType"]>

export type StorageTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["storageType"]>

export type StorageTypeSelectScalar = {
  id?: boolean
  name?: boolean
}

export type StorageTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["storageType"]>
export type StorageTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Files?: boolean | Prisma.StorageType$FilesArgs<ExtArgs>
  _count?: boolean | Prisma.StorageTypeCountOutputTypeDefaultArgs<ExtArgs>
}
export type StorageTypeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type StorageTypeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $StorageTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StorageType"
  objects: {
    Files: Prisma.$FilePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
  }, ExtArgs["result"]["storageType"]>
  composites: {}
}

export type StorageTypeGetPayload<S extends boolean | null | undefined | StorageTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StorageTypePayload, S>

export type StorageTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StorageTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StorageTypeCountAggregateInputType | true
  }

export interface StorageTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StorageType'], meta: { name: 'StorageType' } }
  /**
   * Find zero or one StorageType that matches the filter.
   * @param {StorageTypeFindUniqueArgs} args - Arguments to find a StorageType
   * @example
   * // Get one StorageType
   * const storageType = await prisma.storageType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StorageTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, StorageTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StorageType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StorageTypeFindUniqueOrThrowArgs} args - Arguments to find a StorageType
   * @example
   * // Get one StorageType
   * const storageType = await prisma.storageType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StorageTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StorageTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StorageType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StorageTypeFindFirstArgs} args - Arguments to find a StorageType
   * @example
   * // Get one StorageType
   * const storageType = await prisma.storageType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StorageTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, StorageTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StorageType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StorageTypeFindFirstOrThrowArgs} args - Arguments to find a StorageType
   * @example
   * // Get one StorageType
   * const storageType = await prisma.storageType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StorageTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StorageTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StorageTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StorageTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StorageTypes
   * const storageTypes = await prisma.storageType.findMany()
   * 
   * // Get first 10 StorageTypes
   * const storageTypes = await prisma.storageType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const storageTypeWithIdOnly = await prisma.storageType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StorageTypeFindManyArgs>(args?: Prisma.SelectSubset<T, StorageTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StorageType.
   * @param {StorageTypeCreateArgs} args - Arguments to create a StorageType.
   * @example
   * // Create one StorageType
   * const StorageType = await prisma.storageType.create({
   *   data: {
   *     // ... data to create a StorageType
   *   }
   * })
   * 
   */
  create<T extends StorageTypeCreateArgs>(args: Prisma.SelectSubset<T, StorageTypeCreateArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StorageTypes.
   * @param {StorageTypeCreateManyArgs} args - Arguments to create many StorageTypes.
   * @example
   * // Create many StorageTypes
   * const storageType = await prisma.storageType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StorageTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, StorageTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StorageTypes and returns the data saved in the database.
   * @param {StorageTypeCreateManyAndReturnArgs} args - Arguments to create many StorageTypes.
   * @example
   * // Create many StorageTypes
   * const storageType = await prisma.storageType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StorageTypes and only return the `id`
   * const storageTypeWithIdOnly = await prisma.storageType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StorageTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StorageTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StorageType.
   * @param {StorageTypeDeleteArgs} args - Arguments to delete one StorageType.
   * @example
   * // Delete one StorageType
   * const StorageType = await prisma.storageType.delete({
   *   where: {
   *     // ... filter to delete one StorageType
   *   }
   * })
   * 
   */
  delete<T extends StorageTypeDeleteArgs>(args: Prisma.SelectSubset<T, StorageTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StorageType.
   * @param {StorageTypeUpdateArgs} args - Arguments to update one StorageType.
   * @example
   * // Update one StorageType
   * const storageType = await prisma.storageType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StorageTypeUpdateArgs>(args: Prisma.SelectSubset<T, StorageTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StorageTypes.
   * @param {StorageTypeDeleteManyArgs} args - Arguments to filter StorageTypes to delete.
   * @example
   * // Delete a few StorageTypes
   * const { count } = await prisma.storageType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StorageTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, StorageTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StorageTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StorageTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StorageTypes
   * const storageType = await prisma.storageType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StorageTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, StorageTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StorageTypes and returns the data updated in the database.
   * @param {StorageTypeUpdateManyAndReturnArgs} args - Arguments to update many StorageTypes.
   * @example
   * // Update many StorageTypes
   * const storageType = await prisma.storageType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StorageTypes and only return the `id`
   * const storageTypeWithIdOnly = await prisma.storageType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StorageTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StorageTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StorageType.
   * @param {StorageTypeUpsertArgs} args - Arguments to update or create a StorageType.
   * @example
   * // Update or create a StorageType
   * const storageType = await prisma.storageType.upsert({
   *   create: {
   *     // ... data to create a StorageType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StorageType we want to update
   *   }
   * })
   */
  upsert<T extends StorageTypeUpsertArgs>(args: Prisma.SelectSubset<T, StorageTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StorageTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StorageTypeCountArgs} args - Arguments to filter StorageTypes to count.
   * @example
   * // Count the number of StorageTypes
   * const count = await prisma.storageType.count({
   *   where: {
   *     // ... the filter for the StorageTypes we want to count
   *   }
   * })
  **/
  count<T extends StorageTypeCountArgs>(
    args?: Prisma.Subset<T, StorageTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StorageTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StorageType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StorageTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StorageTypeAggregateArgs>(args: Prisma.Subset<T, StorageTypeAggregateArgs>): Prisma.PrismaPromise<GetStorageTypeAggregateType<T>>

  /**
   * Group by StorageType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StorageTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StorageTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StorageTypeGroupByArgs['orderBy'] }
      : { orderBy?: StorageTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StorageTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStorageTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StorageType model
 */
readonly fields: StorageTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StorageType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StorageTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Files<T extends Prisma.StorageType$FilesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StorageType$FilesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StorageType model
 */
export interface StorageTypeFieldRefs {
  readonly id: Prisma.FieldRef<"StorageType", 'Int'>
  readonly name: Prisma.FieldRef<"StorageType", 'String'>
}
    

// Custom InputTypes
/**
 * StorageType findUnique
 */
export type StorageTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * Filter, which StorageType to fetch.
   */
  where: Prisma.StorageTypeWhereUniqueInput
}

/**
 * StorageType findUniqueOrThrow
 */
export type StorageTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * Filter, which StorageType to fetch.
   */
  where: Prisma.StorageTypeWhereUniqueInput
}

/**
 * StorageType findFirst
 */
export type StorageTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * Filter, which StorageType to fetch.
   */
  where?: Prisma.StorageTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StorageTypes to fetch.
   */
  orderBy?: Prisma.StorageTypeOrderByWithRelationInput | Prisma.StorageTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StorageTypes.
   */
  cursor?: Prisma.StorageTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StorageTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StorageTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StorageTypes.
   */
  distinct?: Prisma.StorageTypeScalarFieldEnum | Prisma.StorageTypeScalarFieldEnum[]
}

/**
 * StorageType findFirstOrThrow
 */
export type StorageTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * Filter, which StorageType to fetch.
   */
  where?: Prisma.StorageTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StorageTypes to fetch.
   */
  orderBy?: Prisma.StorageTypeOrderByWithRelationInput | Prisma.StorageTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StorageTypes.
   */
  cursor?: Prisma.StorageTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StorageTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StorageTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StorageTypes.
   */
  distinct?: Prisma.StorageTypeScalarFieldEnum | Prisma.StorageTypeScalarFieldEnum[]
}

/**
 * StorageType findMany
 */
export type StorageTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * Filter, which StorageTypes to fetch.
   */
  where?: Prisma.StorageTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StorageTypes to fetch.
   */
  orderBy?: Prisma.StorageTypeOrderByWithRelationInput | Prisma.StorageTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StorageTypes.
   */
  cursor?: Prisma.StorageTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StorageTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StorageTypes.
   */
  skip?: number
  distinct?: Prisma.StorageTypeScalarFieldEnum | Prisma.StorageTypeScalarFieldEnum[]
}

/**
 * StorageType create
 */
export type StorageTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a StorageType.
   */
  data: Prisma.XOR<Prisma.StorageTypeCreateInput, Prisma.StorageTypeUncheckedCreateInput>
}

/**
 * StorageType createMany
 */
export type StorageTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StorageTypes.
   */
  data: Prisma.StorageTypeCreateManyInput | Prisma.StorageTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StorageType createManyAndReturn
 */
export type StorageTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * The data used to create many StorageTypes.
   */
  data: Prisma.StorageTypeCreateManyInput | Prisma.StorageTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StorageType update
 */
export type StorageTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a StorageType.
   */
  data: Prisma.XOR<Prisma.StorageTypeUpdateInput, Prisma.StorageTypeUncheckedUpdateInput>
  /**
   * Choose, which StorageType to update.
   */
  where: Prisma.StorageTypeWhereUniqueInput
}

/**
 * StorageType updateMany
 */
export type StorageTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StorageTypes.
   */
  data: Prisma.XOR<Prisma.StorageTypeUpdateManyMutationInput, Prisma.StorageTypeUncheckedUpdateManyInput>
  /**
   * Filter which StorageTypes to update
   */
  where?: Prisma.StorageTypeWhereInput
  /**
   * Limit how many StorageTypes to update.
   */
  limit?: number
}

/**
 * StorageType updateManyAndReturn
 */
export type StorageTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * The data used to update StorageTypes.
   */
  data: Prisma.XOR<Prisma.StorageTypeUpdateManyMutationInput, Prisma.StorageTypeUncheckedUpdateManyInput>
  /**
   * Filter which StorageTypes to update
   */
  where?: Prisma.StorageTypeWhereInput
  /**
   * Limit how many StorageTypes to update.
   */
  limit?: number
}

/**
 * StorageType upsert
 */
export type StorageTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the StorageType to update in case it exists.
   */
  where: Prisma.StorageTypeWhereUniqueInput
  /**
   * In case the StorageType found by the `where` argument doesn't exist, create a new StorageType with this data.
   */
  create: Prisma.XOR<Prisma.StorageTypeCreateInput, Prisma.StorageTypeUncheckedCreateInput>
  /**
   * In case the StorageType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StorageTypeUpdateInput, Prisma.StorageTypeUncheckedUpdateInput>
}

/**
 * StorageType delete
 */
export type StorageTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
  /**
   * Filter which StorageType to delete.
   */
  where: Prisma.StorageTypeWhereUniqueInput
}

/**
 * StorageType deleteMany
 */
export type StorageTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StorageTypes to delete
   */
  where?: Prisma.StorageTypeWhereInput
  /**
   * Limit how many StorageTypes to delete.
   */
  limit?: number
}

/**
 * StorageType.Files
 */
export type StorageType$FilesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  where?: Prisma.FileWhereInput
  orderBy?: Prisma.FileOrderByWithRelationInput | Prisma.FileOrderByWithRelationInput[]
  cursor?: Prisma.FileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FileScalarFieldEnum | Prisma.FileScalarFieldEnum[]
}

/**
 * StorageType without action
 */
export type StorageTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StorageType
   */
  select?: Prisma.StorageTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StorageType
   */
  omit?: Prisma.StorageTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StorageTypeInclude<ExtArgs> | null
}
