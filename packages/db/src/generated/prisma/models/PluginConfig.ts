
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PluginConfig` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PluginConfig
 * 
 */
export type PluginConfigModel = runtime.Types.Result.DefaultSelection<Prisma.$PluginConfigPayload>

export type AggregatePluginConfig = {
  _count: PluginConfigCountAggregateOutputType | null
  _avg: PluginConfigAvgAggregateOutputType | null
  _sum: PluginConfigSumAggregateOutputType | null
  _min: PluginConfigMinAggregateOutputType | null
  _max: PluginConfigMaxAggregateOutputType | null
}

export type PluginConfigAvgAggregateOutputType = {
  id: number | null
}

export type PluginConfigSumAggregateOutputType = {
  id: number | null
}

export type PluginConfigMinAggregateOutputType = {
  id: number | null
  type: string | null
  key: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  pluginId: string | null
}

export type PluginConfigMaxAggregateOutputType = {
  id: number | null
  type: string | null
  key: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  pluginId: string | null
}

export type PluginConfigCountAggregateOutputType = {
  id: number
  type: number
  key: number
  default: number
  value: number
  description: number
  createdAt: number
  updatedAt: number
  pluginId: number
  _all: number
}


export type PluginConfigAvgAggregateInputType = {
  id?: true
}

export type PluginConfigSumAggregateInputType = {
  id?: true
}

export type PluginConfigMinAggregateInputType = {
  id?: true
  type?: true
  key?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
}

export type PluginConfigMaxAggregateInputType = {
  id?: true
  type?: true
  key?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
}

export type PluginConfigCountAggregateInputType = {
  id?: true
  type?: true
  key?: true
  default?: true
  value?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
  _all?: true
}

export type PluginConfigAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginConfig to aggregate.
   */
  where?: Prisma.PluginConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginConfigs to fetch.
   */
  orderBy?: Prisma.PluginConfigOrderByWithRelationInput | Prisma.PluginConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PluginConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PluginConfigs
  **/
  _count?: true | PluginConfigCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PluginConfigAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PluginConfigSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PluginConfigMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PluginConfigMaxAggregateInputType
}

export type GetPluginConfigAggregateType<T extends PluginConfigAggregateArgs> = {
      [P in keyof T & keyof AggregatePluginConfig]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePluginConfig[P]>
    : Prisma.GetScalarType<T[P], AggregatePluginConfig[P]>
}




export type PluginConfigGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PluginConfigWhereInput
  orderBy?: Prisma.PluginConfigOrderByWithAggregationInput | Prisma.PluginConfigOrderByWithAggregationInput[]
  by: Prisma.PluginConfigScalarFieldEnum[] | Prisma.PluginConfigScalarFieldEnum
  having?: Prisma.PluginConfigScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PluginConfigCountAggregateInputType | true
  _avg?: PluginConfigAvgAggregateInputType
  _sum?: PluginConfigSumAggregateInputType
  _min?: PluginConfigMinAggregateInputType
  _max?: PluginConfigMaxAggregateInputType
}

export type PluginConfigGroupByOutputType = {
  id: number
  type: string
  key: string
  default: unknown
  value: unknown
  description: string | null
  createdAt: Date
  updatedAt: Date
  pluginId: string
  _count: PluginConfigCountAggregateOutputType | null
  _avg: PluginConfigAvgAggregateOutputType | null
  _sum: PluginConfigSumAggregateOutputType | null
  _min: PluginConfigMinAggregateOutputType | null
  _max: PluginConfigMaxAggregateOutputType | null
}

type GetPluginConfigGroupByPayload<T extends PluginConfigGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PluginConfigGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PluginConfigGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PluginConfigGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PluginConfigGroupByOutputType[P]>
      }
    >
  > 



export type PluginConfigWhereInput = {
  AND?: Prisma.PluginConfigWhereInput | Prisma.PluginConfigWhereInput[]
  OR?: Prisma.PluginConfigWhereInput[]
  NOT?: Prisma.PluginConfigWhereInput | Prisma.PluginConfigWhereInput[]
  id?: Prisma.IntFilter<"PluginConfig"> | number
  type?: Prisma.StringFilter<"PluginConfig"> | string
  key?: Prisma.StringFilter<"PluginConfig"> | string
  default?: Prisma.JsonFilter<"PluginConfig">
  value?: Prisma.JsonFilter<"PluginConfig">
  description?: Prisma.StringNullableFilter<"PluginConfig"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PluginConfig"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginConfig"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginConfig"> | string
  Plugin?: Prisma.XOR<Prisma.PluginScalarRelationFilter, Prisma.PluginWhereInput>
}

export type PluginConfigOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  key?: Prisma.SortOrder
  default?: Prisma.SortOrder
  value?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
  Plugin?: Prisma.PluginOrderByWithRelationInput
  _relevance?: Prisma.PluginConfigOrderByRelevanceInput
}

export type PluginConfigWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  pluginId_key?: Prisma.PluginConfigPluginIdKeyCompoundUniqueInput
  AND?: Prisma.PluginConfigWhereInput | Prisma.PluginConfigWhereInput[]
  OR?: Prisma.PluginConfigWhereInput[]
  NOT?: Prisma.PluginConfigWhereInput | Prisma.PluginConfigWhereInput[]
  type?: Prisma.StringFilter<"PluginConfig"> | string
  key?: Prisma.StringFilter<"PluginConfig"> | string
  default?: Prisma.JsonFilter<"PluginConfig">
  value?: Prisma.JsonFilter<"PluginConfig">
  description?: Prisma.StringNullableFilter<"PluginConfig"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PluginConfig"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginConfig"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginConfig"> | string
  Plugin?: Prisma.XOR<Prisma.PluginScalarRelationFilter, Prisma.PluginWhereInput>
}, "id" | "pluginId_key">

export type PluginConfigOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  key?: Prisma.SortOrder
  default?: Prisma.SortOrder
  value?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
  _count?: Prisma.PluginConfigCountOrderByAggregateInput
  _avg?: Prisma.PluginConfigAvgOrderByAggregateInput
  _max?: Prisma.PluginConfigMaxOrderByAggregateInput
  _min?: Prisma.PluginConfigMinOrderByAggregateInput
  _sum?: Prisma.PluginConfigSumOrderByAggregateInput
}

export type PluginConfigScalarWhereWithAggregatesInput = {
  AND?: Prisma.PluginConfigScalarWhereWithAggregatesInput | Prisma.PluginConfigScalarWhereWithAggregatesInput[]
  OR?: Prisma.PluginConfigScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PluginConfigScalarWhereWithAggregatesInput | Prisma.PluginConfigScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PluginConfig"> | number
  type?: Prisma.StringWithAggregatesFilter<"PluginConfig"> | string
  key?: Prisma.StringWithAggregatesFilter<"PluginConfig"> | string
  default?: Prisma.JsonWithAggregatesFilter<"PluginConfig">
  value?: Prisma.JsonWithAggregatesFilter<"PluginConfig">
  description?: Prisma.StringNullableWithAggregatesFilter<"PluginConfig"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PluginConfig"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PluginConfig"> | Date | string
  pluginId?: Prisma.StringWithAggregatesFilter<"PluginConfig"> | string
}

export type PluginConfigCreateInput = {
  type: string
  key: string
  default: unknown
  value: unknown
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Plugin: Prisma.PluginCreateNestedOneWithoutConfigsInput
}

export type PluginConfigUncheckedCreateInput = {
  id?: number
  type: string
  key: string
  default: unknown
  value: unknown
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  pluginId: string
}

export type PluginConfigUpdateInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  default?: unknown
  value?: unknown
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Plugin?: Prisma.PluginUpdateOneRequiredWithoutConfigsNestedInput
}

export type PluginConfigUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  default?: unknown
  value?: unknown
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pluginId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginConfigCreateManyInput = {
  id?: number
  type: string
  key: string
  default: unknown
  value: unknown
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  pluginId: string
}

export type PluginConfigUpdateManyMutationInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  default?: unknown
  value?: unknown
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginConfigUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  default?: unknown
  value?: unknown
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pluginId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginConfigListRelationFilter = {
  every?: Prisma.PluginConfigWhereInput
  some?: Prisma.PluginConfigWhereInput
  none?: Prisma.PluginConfigWhereInput
}

export type PluginConfigOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PluginConfigOrderByRelevanceInput = {
  fields: Prisma.PluginConfigOrderByRelevanceFieldEnum | Prisma.PluginConfigOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PluginConfigPluginIdKeyCompoundUniqueInput = {
  pluginId: string
  key: string
}

export type PluginConfigCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  key?: Prisma.SortOrder
  default?: Prisma.SortOrder
  value?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginConfigAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PluginConfigMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  key?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginConfigMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  key?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginConfigSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PluginConfigCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginConfigCreateWithoutPluginInput, Prisma.PluginConfigUncheckedCreateWithoutPluginInput> | Prisma.PluginConfigCreateWithoutPluginInput[] | Prisma.PluginConfigUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginConfigCreateOrConnectWithoutPluginInput | Prisma.PluginConfigCreateOrConnectWithoutPluginInput[]
  createMany?: Prisma.PluginConfigCreateManyPluginInputEnvelope
  connect?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
}

export type PluginConfigUncheckedCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginConfigCreateWithoutPluginInput, Prisma.PluginConfigUncheckedCreateWithoutPluginInput> | Prisma.PluginConfigCreateWithoutPluginInput[] | Prisma.PluginConfigUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginConfigCreateOrConnectWithoutPluginInput | Prisma.PluginConfigCreateOrConnectWithoutPluginInput[]
  createMany?: Prisma.PluginConfigCreateManyPluginInputEnvelope
  connect?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
}

export type PluginConfigUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginConfigCreateWithoutPluginInput, Prisma.PluginConfigUncheckedCreateWithoutPluginInput> | Prisma.PluginConfigCreateWithoutPluginInput[] | Prisma.PluginConfigUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginConfigCreateOrConnectWithoutPluginInput | Prisma.PluginConfigCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginConfigUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginConfigUpsertWithWhereUniqueWithoutPluginInput[]
  createMany?: Prisma.PluginConfigCreateManyPluginInputEnvelope
  set?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
  disconnect?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
  delete?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
  connect?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
  update?: Prisma.PluginConfigUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginConfigUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginConfigUpdateManyWithWhereWithoutPluginInput | Prisma.PluginConfigUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginConfigScalarWhereInput | Prisma.PluginConfigScalarWhereInput[]
}

export type PluginConfigUncheckedUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginConfigCreateWithoutPluginInput, Prisma.PluginConfigUncheckedCreateWithoutPluginInput> | Prisma.PluginConfigCreateWithoutPluginInput[] | Prisma.PluginConfigUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginConfigCreateOrConnectWithoutPluginInput | Prisma.PluginConfigCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginConfigUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginConfigUpsertWithWhereUniqueWithoutPluginInput[]
  createMany?: Prisma.PluginConfigCreateManyPluginInputEnvelope
  set?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
  disconnect?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
  delete?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
  connect?: Prisma.PluginConfigWhereUniqueInput | Prisma.PluginConfigWhereUniqueInput[]
  update?: Prisma.PluginConfigUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginConfigUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginConfigUpdateManyWithWhereWithoutPluginInput | Prisma.PluginConfigUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginConfigScalarWhereInput | Prisma.PluginConfigScalarWhereInput[]
}

export type PluginConfigCreateWithoutPluginInput = {
  type: string
  key: string
  default: unknown
  value: unknown
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginConfigUncheckedCreateWithoutPluginInput = {
  id?: number
  type: string
  key: string
  default: unknown
  value: unknown
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginConfigCreateOrConnectWithoutPluginInput = {
  where: Prisma.PluginConfigWhereUniqueInput
  create: Prisma.XOR<Prisma.PluginConfigCreateWithoutPluginInput, Prisma.PluginConfigUncheckedCreateWithoutPluginInput>
}

export type PluginConfigCreateManyPluginInputEnvelope = {
  data: Prisma.PluginConfigCreateManyPluginInput | Prisma.PluginConfigCreateManyPluginInput[]
  skipDuplicates?: boolean
}

export type PluginConfigUpsertWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginConfigWhereUniqueInput
  update: Prisma.XOR<Prisma.PluginConfigUpdateWithoutPluginInput, Prisma.PluginConfigUncheckedUpdateWithoutPluginInput>
  create: Prisma.XOR<Prisma.PluginConfigCreateWithoutPluginInput, Prisma.PluginConfigUncheckedCreateWithoutPluginInput>
}

export type PluginConfigUpdateWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginConfigWhereUniqueInput
  data: Prisma.XOR<Prisma.PluginConfigUpdateWithoutPluginInput, Prisma.PluginConfigUncheckedUpdateWithoutPluginInput>
}

export type PluginConfigUpdateManyWithWhereWithoutPluginInput = {
  where: Prisma.PluginConfigScalarWhereInput
  data: Prisma.XOR<Prisma.PluginConfigUpdateManyMutationInput, Prisma.PluginConfigUncheckedUpdateManyWithoutPluginInput>
}

export type PluginConfigScalarWhereInput = {
  AND?: Prisma.PluginConfigScalarWhereInput | Prisma.PluginConfigScalarWhereInput[]
  OR?: Prisma.PluginConfigScalarWhereInput[]
  NOT?: Prisma.PluginConfigScalarWhereInput | Prisma.PluginConfigScalarWhereInput[]
  id?: Prisma.IntFilter<"PluginConfig"> | number
  type?: Prisma.StringFilter<"PluginConfig"> | string
  key?: Prisma.StringFilter<"PluginConfig"> | string
  default?: Prisma.JsonFilter<"PluginConfig">
  value?: Prisma.JsonFilter<"PluginConfig">
  description?: Prisma.StringNullableFilter<"PluginConfig"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PluginConfig"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginConfig"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginConfig"> | string
}

export type PluginConfigCreateManyPluginInput = {
  id?: number
  type: string
  key: string
  default: unknown
  value: unknown
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginConfigUpdateWithoutPluginInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  default?: unknown
  value?: unknown
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginConfigUncheckedUpdateWithoutPluginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  default?: unknown
  value?: unknown
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginConfigUncheckedUpdateManyWithoutPluginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  default?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PluginConfigSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  key?: boolean
  default?: boolean
  value?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginConfig"]>

export type PluginConfigSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  key?: boolean
  default?: boolean
  value?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginConfig"]>

export type PluginConfigSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  key?: boolean
  default?: boolean
  value?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginConfig"]>

export type PluginConfigSelectScalar = {
  id?: boolean
  type?: boolean
  key?: boolean
  default?: boolean
  value?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
}

export type PluginConfigOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "key" | "default" | "value" | "description" | "createdAt" | "updatedAt" | "pluginId", ExtArgs["result"]["pluginConfig"]>
export type PluginConfigInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}
export type PluginConfigIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}
export type PluginConfigIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}

export type $PluginConfigPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PluginConfig"
  objects: {
    Plugin: Prisma.$PluginPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    type: string
    key: string
    default: unknown
    value: unknown
    description: string | null
    createdAt: Date
    updatedAt: Date
    pluginId: string
  }, ExtArgs["result"]["pluginConfig"]>
  composites: {}
}

export type PluginConfigGetPayload<S extends boolean | null | undefined | PluginConfigDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload, S>

export type PluginConfigCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PluginConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PluginConfigCountAggregateInputType | true
  }

export interface PluginConfigDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PluginConfig'], meta: { name: 'PluginConfig' } }
  /**
   * Find zero or one PluginConfig that matches the filter.
   * @param {PluginConfigFindUniqueArgs} args - Arguments to find a PluginConfig
   * @example
   * // Get one PluginConfig
   * const pluginConfig = await prisma.pluginConfig.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PluginConfigFindUniqueArgs>(args: Prisma.SelectSubset<T, PluginConfigFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PluginConfig that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PluginConfigFindUniqueOrThrowArgs} args - Arguments to find a PluginConfig
   * @example
   * // Get one PluginConfig
   * const pluginConfig = await prisma.pluginConfig.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PluginConfigFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PluginConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginConfig that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginConfigFindFirstArgs} args - Arguments to find a PluginConfig
   * @example
   * // Get one PluginConfig
   * const pluginConfig = await prisma.pluginConfig.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PluginConfigFindFirstArgs>(args?: Prisma.SelectSubset<T, PluginConfigFindFirstArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginConfig that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginConfigFindFirstOrThrowArgs} args - Arguments to find a PluginConfig
   * @example
   * // Get one PluginConfig
   * const pluginConfig = await prisma.pluginConfig.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PluginConfigFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PluginConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PluginConfigs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginConfigFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PluginConfigs
   * const pluginConfigs = await prisma.pluginConfig.findMany()
   * 
   * // Get first 10 PluginConfigs
   * const pluginConfigs = await prisma.pluginConfig.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pluginConfigWithIdOnly = await prisma.pluginConfig.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PluginConfigFindManyArgs>(args?: Prisma.SelectSubset<T, PluginConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PluginConfig.
   * @param {PluginConfigCreateArgs} args - Arguments to create a PluginConfig.
   * @example
   * // Create one PluginConfig
   * const PluginConfig = await prisma.pluginConfig.create({
   *   data: {
   *     // ... data to create a PluginConfig
   *   }
   * })
   * 
   */
  create<T extends PluginConfigCreateArgs>(args: Prisma.SelectSubset<T, PluginConfigCreateArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PluginConfigs.
   * @param {PluginConfigCreateManyArgs} args - Arguments to create many PluginConfigs.
   * @example
   * // Create many PluginConfigs
   * const pluginConfig = await prisma.pluginConfig.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PluginConfigCreateManyArgs>(args?: Prisma.SelectSubset<T, PluginConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PluginConfigs and returns the data saved in the database.
   * @param {PluginConfigCreateManyAndReturnArgs} args - Arguments to create many PluginConfigs.
   * @example
   * // Create many PluginConfigs
   * const pluginConfig = await prisma.pluginConfig.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PluginConfigs and only return the `id`
   * const pluginConfigWithIdOnly = await prisma.pluginConfig.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PluginConfigCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PluginConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PluginConfig.
   * @param {PluginConfigDeleteArgs} args - Arguments to delete one PluginConfig.
   * @example
   * // Delete one PluginConfig
   * const PluginConfig = await prisma.pluginConfig.delete({
   *   where: {
   *     // ... filter to delete one PluginConfig
   *   }
   * })
   * 
   */
  delete<T extends PluginConfigDeleteArgs>(args: Prisma.SelectSubset<T, PluginConfigDeleteArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PluginConfig.
   * @param {PluginConfigUpdateArgs} args - Arguments to update one PluginConfig.
   * @example
   * // Update one PluginConfig
   * const pluginConfig = await prisma.pluginConfig.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PluginConfigUpdateArgs>(args: Prisma.SelectSubset<T, PluginConfigUpdateArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PluginConfigs.
   * @param {PluginConfigDeleteManyArgs} args - Arguments to filter PluginConfigs to delete.
   * @example
   * // Delete a few PluginConfigs
   * const { count } = await prisma.pluginConfig.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PluginConfigDeleteManyArgs>(args?: Prisma.SelectSubset<T, PluginConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginConfigUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PluginConfigs
   * const pluginConfig = await prisma.pluginConfig.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PluginConfigUpdateManyArgs>(args: Prisma.SelectSubset<T, PluginConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginConfigs and returns the data updated in the database.
   * @param {PluginConfigUpdateManyAndReturnArgs} args - Arguments to update many PluginConfigs.
   * @example
   * // Update many PluginConfigs
   * const pluginConfig = await prisma.pluginConfig.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PluginConfigs and only return the `id`
   * const pluginConfigWithIdOnly = await prisma.pluginConfig.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PluginConfigUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PluginConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PluginConfig.
   * @param {PluginConfigUpsertArgs} args - Arguments to update or create a PluginConfig.
   * @example
   * // Update or create a PluginConfig
   * const pluginConfig = await prisma.pluginConfig.upsert({
   *   create: {
   *     // ... data to create a PluginConfig
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PluginConfig we want to update
   *   }
   * })
   */
  upsert<T extends PluginConfigUpsertArgs>(args: Prisma.SelectSubset<T, PluginConfigUpsertArgs<ExtArgs>>): Prisma.Prisma__PluginConfigClient<runtime.Types.Result.GetResult<Prisma.$PluginConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PluginConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginConfigCountArgs} args - Arguments to filter PluginConfigs to count.
   * @example
   * // Count the number of PluginConfigs
   * const count = await prisma.pluginConfig.count({
   *   where: {
   *     // ... the filter for the PluginConfigs we want to count
   *   }
   * })
  **/
  count<T extends PluginConfigCountArgs>(
    args?: Prisma.Subset<T, PluginConfigCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PluginConfigCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PluginConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PluginConfigAggregateArgs>(args: Prisma.Subset<T, PluginConfigAggregateArgs>): Prisma.PrismaPromise<GetPluginConfigAggregateType<T>>

  /**
   * Group by PluginConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginConfigGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PluginConfigGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PluginConfigGroupByArgs['orderBy'] }
      : { orderBy?: PluginConfigGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PluginConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPluginConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PluginConfig model
 */
readonly fields: PluginConfigFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PluginConfig.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PluginConfigClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Plugin<T extends Prisma.PluginDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PluginDefaultArgs<ExtArgs>>): Prisma.Prisma__PluginClient<runtime.Types.Result.GetResult<Prisma.$PluginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PluginConfig model
 */
export interface PluginConfigFieldRefs {
  readonly id: Prisma.FieldRef<"PluginConfig", 'Int'>
  readonly type: Prisma.FieldRef<"PluginConfig", 'String'>
  readonly key: Prisma.FieldRef<"PluginConfig", 'String'>
  readonly default: Prisma.FieldRef<"PluginConfig", 'Json'>
  readonly value: Prisma.FieldRef<"PluginConfig", 'Json'>
  readonly description: Prisma.FieldRef<"PluginConfig", 'String'>
  readonly createdAt: Prisma.FieldRef<"PluginConfig", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PluginConfig", 'DateTime'>
  readonly pluginId: Prisma.FieldRef<"PluginConfig", 'String'>
}
    

// Custom InputTypes
/**
 * PluginConfig findUnique
 */
export type PluginConfigFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * Filter, which PluginConfig to fetch.
   */
  where: Prisma.PluginConfigWhereUniqueInput
}

/**
 * PluginConfig findUniqueOrThrow
 */
export type PluginConfigFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * Filter, which PluginConfig to fetch.
   */
  where: Prisma.PluginConfigWhereUniqueInput
}

/**
 * PluginConfig findFirst
 */
export type PluginConfigFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * Filter, which PluginConfig to fetch.
   */
  where?: Prisma.PluginConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginConfigs to fetch.
   */
  orderBy?: Prisma.PluginConfigOrderByWithRelationInput | Prisma.PluginConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginConfigs.
   */
  cursor?: Prisma.PluginConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginConfigs.
   */
  distinct?: Prisma.PluginConfigScalarFieldEnum | Prisma.PluginConfigScalarFieldEnum[]
}

/**
 * PluginConfig findFirstOrThrow
 */
export type PluginConfigFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * Filter, which PluginConfig to fetch.
   */
  where?: Prisma.PluginConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginConfigs to fetch.
   */
  orderBy?: Prisma.PluginConfigOrderByWithRelationInput | Prisma.PluginConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginConfigs.
   */
  cursor?: Prisma.PluginConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginConfigs.
   */
  distinct?: Prisma.PluginConfigScalarFieldEnum | Prisma.PluginConfigScalarFieldEnum[]
}

/**
 * PluginConfig findMany
 */
export type PluginConfigFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * Filter, which PluginConfigs to fetch.
   */
  where?: Prisma.PluginConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginConfigs to fetch.
   */
  orderBy?: Prisma.PluginConfigOrderByWithRelationInput | Prisma.PluginConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PluginConfigs.
   */
  cursor?: Prisma.PluginConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginConfigs.
   */
  skip?: number
  distinct?: Prisma.PluginConfigScalarFieldEnum | Prisma.PluginConfigScalarFieldEnum[]
}

/**
 * PluginConfig create
 */
export type PluginConfigCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * The data needed to create a PluginConfig.
   */
  data: Prisma.XOR<Prisma.PluginConfigCreateInput, Prisma.PluginConfigUncheckedCreateInput>
}

/**
 * PluginConfig createMany
 */
export type PluginConfigCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PluginConfigs.
   */
  data: Prisma.PluginConfigCreateManyInput | Prisma.PluginConfigCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PluginConfig createManyAndReturn
 */
export type PluginConfigCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * The data used to create many PluginConfigs.
   */
  data: Prisma.PluginConfigCreateManyInput | Prisma.PluginConfigCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PluginConfig update
 */
export type PluginConfigUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * The data needed to update a PluginConfig.
   */
  data: Prisma.XOR<Prisma.PluginConfigUpdateInput, Prisma.PluginConfigUncheckedUpdateInput>
  /**
   * Choose, which PluginConfig to update.
   */
  where: Prisma.PluginConfigWhereUniqueInput
}

/**
 * PluginConfig updateMany
 */
export type PluginConfigUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PluginConfigs.
   */
  data: Prisma.XOR<Prisma.PluginConfigUpdateManyMutationInput, Prisma.PluginConfigUncheckedUpdateManyInput>
  /**
   * Filter which PluginConfigs to update
   */
  where?: Prisma.PluginConfigWhereInput
  /**
   * Limit how many PluginConfigs to update.
   */
  limit?: number
}

/**
 * PluginConfig updateManyAndReturn
 */
export type PluginConfigUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * The data used to update PluginConfigs.
   */
  data: Prisma.XOR<Prisma.PluginConfigUpdateManyMutationInput, Prisma.PluginConfigUncheckedUpdateManyInput>
  /**
   * Filter which PluginConfigs to update
   */
  where?: Prisma.PluginConfigWhereInput
  /**
   * Limit how many PluginConfigs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PluginConfig upsert
 */
export type PluginConfigUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * The filter to search for the PluginConfig to update in case it exists.
   */
  where: Prisma.PluginConfigWhereUniqueInput
  /**
   * In case the PluginConfig found by the `where` argument doesn't exist, create a new PluginConfig with this data.
   */
  create: Prisma.XOR<Prisma.PluginConfigCreateInput, Prisma.PluginConfigUncheckedCreateInput>
  /**
   * In case the PluginConfig was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PluginConfigUpdateInput, Prisma.PluginConfigUncheckedUpdateInput>
}

/**
 * PluginConfig delete
 */
export type PluginConfigDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
  /**
   * Filter which PluginConfig to delete.
   */
  where: Prisma.PluginConfigWhereUniqueInput
}

/**
 * PluginConfig deleteMany
 */
export type PluginConfigDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginConfigs to delete
   */
  where?: Prisma.PluginConfigWhereInput
  /**
   * Limit how many PluginConfigs to delete.
   */
  limit?: number
}

/**
 * PluginConfig without action
 */
export type PluginConfigDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginConfig
   */
  select?: Prisma.PluginConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginConfig
   */
  omit?: Prisma.PluginConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginConfigInclude<ExtArgs> | null
}
