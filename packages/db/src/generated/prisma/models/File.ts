
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `File` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model File
 * 
 */
export type FileModel = runtime.Types.Result.DefaultSelection<Prisma.$FilePayload>

export type AggregateFile = {
  _count: FileCountAggregateOutputType | null
  _avg: FileAvgAggregateOutputType | null
  _sum: FileSumAggregateOutputType | null
  _min: FileMinAggregateOutputType | null
  _max: FileMaxAggregateOutputType | null
}

export type FileAvgAggregateOutputType = {
  id: number | null
  typeId: number | null
  storageTypeId: number | null
}

export type FileSumAggregateOutputType = {
  id: number | null
  typeId: number | null
  storageTypeId: number | null
}

export type FileMinAggregateOutputType = {
  id: number | null
  originName: string | null
  storedPath: string | null
  createdAt: Date | null
  updatedAt: Date | null
  typeId: number | null
  storageTypeId: number | null
  documentId: string | null
  userId: string | null
}

export type FileMaxAggregateOutputType = {
  id: number | null
  originName: string | null
  storedPath: string | null
  createdAt: Date | null
  updatedAt: Date | null
  typeId: number | null
  storageTypeId: number | null
  documentId: string | null
  userId: string | null
}

export type FileCountAggregateOutputType = {
  id: number
  originName: number
  storedPath: number
  createdAt: number
  updatedAt: number
  typeId: number
  storageTypeId: number
  documentId: number
  userId: number
  _all: number
}


export type FileAvgAggregateInputType = {
  id?: true
  typeId?: true
  storageTypeId?: true
}

export type FileSumAggregateInputType = {
  id?: true
  typeId?: true
  storageTypeId?: true
}

export type FileMinAggregateInputType = {
  id?: true
  originName?: true
  storedPath?: true
  createdAt?: true
  updatedAt?: true
  typeId?: true
  storageTypeId?: true
  documentId?: true
  userId?: true
}

export type FileMaxAggregateInputType = {
  id?: true
  originName?: true
  storedPath?: true
  createdAt?: true
  updatedAt?: true
  typeId?: true
  storageTypeId?: true
  documentId?: true
  userId?: true
}

export type FileCountAggregateInputType = {
  id?: true
  originName?: true
  storedPath?: true
  createdAt?: true
  updatedAt?: true
  typeId?: true
  storageTypeId?: true
  documentId?: true
  userId?: true
  _all?: true
}

export type FileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which File to aggregate.
   */
  where?: Prisma.FileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Files to fetch.
   */
  orderBy?: Prisma.FileOrderByWithRelationInput | Prisma.FileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Files from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Files.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Files
  **/
  _count?: true | FileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FileAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FileSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FileMaxAggregateInputType
}

export type GetFileAggregateType<T extends FileAggregateArgs> = {
      [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFile[P]>
    : Prisma.GetScalarType<T[P], AggregateFile[P]>
}




export type FileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FileWhereInput
  orderBy?: Prisma.FileOrderByWithAggregationInput | Prisma.FileOrderByWithAggregationInput[]
  by: Prisma.FileScalarFieldEnum[] | Prisma.FileScalarFieldEnum
  having?: Prisma.FileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FileCountAggregateInputType | true
  _avg?: FileAvgAggregateInputType
  _sum?: FileSumAggregateInputType
  _min?: FileMinAggregateInputType
  _max?: FileMaxAggregateInputType
}

export type FileGroupByOutputType = {
  id: number
  originName: string
  storedPath: string
  createdAt: Date
  updatedAt: Date
  typeId: number
  storageTypeId: number
  documentId: string | null
  userId: string | null
  _count: FileCountAggregateOutputType | null
  _avg: FileAvgAggregateOutputType | null
  _sum: FileSumAggregateOutputType | null
  _min: FileMinAggregateOutputType | null
  _max: FileMaxAggregateOutputType | null
}

type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FileGroupByOutputType[P]>
      }
    >
  > 



export type FileWhereInput = {
  AND?: Prisma.FileWhereInput | Prisma.FileWhereInput[]
  OR?: Prisma.FileWhereInput[]
  NOT?: Prisma.FileWhereInput | Prisma.FileWhereInput[]
  id?: Prisma.IntFilter<"File"> | number
  originName?: Prisma.StringFilter<"File"> | string
  storedPath?: Prisma.StringFilter<"File"> | string
  createdAt?: Prisma.DateTimeFilter<"File"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"File"> | Date | string
  typeId?: Prisma.IntFilter<"File"> | number
  storageTypeId?: Prisma.IntFilter<"File"> | number
  documentId?: Prisma.StringNullableFilter<"File"> | string | null
  userId?: Prisma.StringNullableFilter<"File"> | string | null
  Type?: Prisma.XOR<Prisma.FileTypeScalarRelationFilter, Prisma.FileTypeWhereInput>
  StorageType?: Prisma.XOR<Prisma.StorageTypeScalarRelationFilter, Prisma.StorageTypeWhereInput>
  Document?: Prisma.XOR<Prisma.DocumentNullableScalarRelationFilter, Prisma.DocumentWhereInput> | null
  User?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type FileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  originName?: Prisma.SortOrder
  storedPath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  storageTypeId?: Prisma.SortOrder
  documentId?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  Type?: Prisma.FileTypeOrderByWithRelationInput
  StorageType?: Prisma.StorageTypeOrderByWithRelationInput
  Document?: Prisma.DocumentOrderByWithRelationInput
  User?: Prisma.UserOrderByWithRelationInput
  _relevance?: Prisma.FileOrderByRelevanceInput
}

export type FileWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  documentId?: string
  userId?: string
  AND?: Prisma.FileWhereInput | Prisma.FileWhereInput[]
  OR?: Prisma.FileWhereInput[]
  NOT?: Prisma.FileWhereInput | Prisma.FileWhereInput[]
  originName?: Prisma.StringFilter<"File"> | string
  storedPath?: Prisma.StringFilter<"File"> | string
  createdAt?: Prisma.DateTimeFilter<"File"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"File"> | Date | string
  typeId?: Prisma.IntFilter<"File"> | number
  storageTypeId?: Prisma.IntFilter<"File"> | number
  Type?: Prisma.XOR<Prisma.FileTypeScalarRelationFilter, Prisma.FileTypeWhereInput>
  StorageType?: Prisma.XOR<Prisma.StorageTypeScalarRelationFilter, Prisma.StorageTypeWhereInput>
  Document?: Prisma.XOR<Prisma.DocumentNullableScalarRelationFilter, Prisma.DocumentWhereInput> | null
  User?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id" | "documentId" | "userId">

export type FileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  originName?: Prisma.SortOrder
  storedPath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  storageTypeId?: Prisma.SortOrder
  documentId?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FileCountOrderByAggregateInput
  _avg?: Prisma.FileAvgOrderByAggregateInput
  _max?: Prisma.FileMaxOrderByAggregateInput
  _min?: Prisma.FileMinOrderByAggregateInput
  _sum?: Prisma.FileSumOrderByAggregateInput
}

export type FileScalarWhereWithAggregatesInput = {
  AND?: Prisma.FileScalarWhereWithAggregatesInput | Prisma.FileScalarWhereWithAggregatesInput[]
  OR?: Prisma.FileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FileScalarWhereWithAggregatesInput | Prisma.FileScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"File"> | number
  originName?: Prisma.StringWithAggregatesFilter<"File"> | string
  storedPath?: Prisma.StringWithAggregatesFilter<"File"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"File"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"File"> | Date | string
  typeId?: Prisma.IntWithAggregatesFilter<"File"> | number
  storageTypeId?: Prisma.IntWithAggregatesFilter<"File"> | number
  documentId?: Prisma.StringNullableWithAggregatesFilter<"File"> | string | null
  userId?: Prisma.StringNullableWithAggregatesFilter<"File"> | string | null
}

export type FileCreateInput = {
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Type: Prisma.FileTypeCreateNestedOneWithoutFilesInput
  StorageType: Prisma.StorageTypeCreateNestedOneWithoutFilesInput
  Document?: Prisma.DocumentCreateNestedOneWithoutFileInput
  User?: Prisma.UserCreateNestedOneWithoutAvatarFileInput
}

export type FileUncheckedCreateInput = {
  id?: number
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  typeId: number
  storageTypeId: number
  documentId?: string | null
  userId?: string | null
}

export type FileUpdateInput = {
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Type?: Prisma.FileTypeUpdateOneRequiredWithoutFilesNestedInput
  StorageType?: Prisma.StorageTypeUpdateOneRequiredWithoutFilesNestedInput
  Document?: Prisma.DocumentUpdateOneWithoutFileNestedInput
  User?: Prisma.UserUpdateOneWithoutAvatarFileNestedInput
}

export type FileUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
  storageTypeId?: Prisma.IntFieldUpdateOperationsInput | number
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FileCreateManyInput = {
  id?: number
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  typeId: number
  storageTypeId: number
  documentId?: string | null
  userId?: string | null
}

export type FileUpdateManyMutationInput = {
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FileUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
  storageTypeId?: Prisma.IntFieldUpdateOperationsInput | number
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FileNullableScalarRelationFilter = {
  is?: Prisma.FileWhereInput | null
  isNot?: Prisma.FileWhereInput | null
}

export type FileOrderByRelevanceInput = {
  fields: Prisma.FileOrderByRelevanceFieldEnum | Prisma.FileOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  originName?: Prisma.SortOrder
  storedPath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  storageTypeId?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type FileAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  storageTypeId?: Prisma.SortOrder
}

export type FileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  originName?: Prisma.SortOrder
  storedPath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  storageTypeId?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type FileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  originName?: Prisma.SortOrder
  storedPath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  storageTypeId?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type FileSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  storageTypeId?: Prisma.SortOrder
}

export type FileListRelationFilter = {
  every?: Prisma.FileWhereInput
  some?: Prisma.FileWhereInput
  none?: Prisma.FileWhereInput
}

export type FileOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FileCreateNestedOneWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutDocumentInput, Prisma.FileUncheckedCreateWithoutDocumentInput>
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutDocumentInput
  connect?: Prisma.FileWhereUniqueInput
}

export type FileUncheckedCreateNestedOneWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutDocumentInput, Prisma.FileUncheckedCreateWithoutDocumentInput>
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutDocumentInput
  connect?: Prisma.FileWhereUniqueInput
}

export type FileUpdateOneWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutDocumentInput, Prisma.FileUncheckedCreateWithoutDocumentInput>
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutDocumentInput
  upsert?: Prisma.FileUpsertWithoutDocumentInput
  disconnect?: Prisma.FileWhereInput | boolean
  delete?: Prisma.FileWhereInput | boolean
  connect?: Prisma.FileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FileUpdateToOneWithWhereWithoutDocumentInput, Prisma.FileUpdateWithoutDocumentInput>, Prisma.FileUncheckedUpdateWithoutDocumentInput>
}

export type FileUncheckedUpdateOneWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutDocumentInput, Prisma.FileUncheckedCreateWithoutDocumentInput>
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutDocumentInput
  upsert?: Prisma.FileUpsertWithoutDocumentInput
  disconnect?: Prisma.FileWhereInput | boolean
  delete?: Prisma.FileWhereInput | boolean
  connect?: Prisma.FileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FileUpdateToOneWithWhereWithoutDocumentInput, Prisma.FileUpdateWithoutDocumentInput>, Prisma.FileUncheckedUpdateWithoutDocumentInput>
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type FileCreateNestedManyWithoutTypeInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutTypeInput, Prisma.FileUncheckedCreateWithoutTypeInput> | Prisma.FileCreateWithoutTypeInput[] | Prisma.FileUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutTypeInput | Prisma.FileCreateOrConnectWithoutTypeInput[]
  createMany?: Prisma.FileCreateManyTypeInputEnvelope
  connect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
}

export type FileUncheckedCreateNestedManyWithoutTypeInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutTypeInput, Prisma.FileUncheckedCreateWithoutTypeInput> | Prisma.FileCreateWithoutTypeInput[] | Prisma.FileUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutTypeInput | Prisma.FileCreateOrConnectWithoutTypeInput[]
  createMany?: Prisma.FileCreateManyTypeInputEnvelope
  connect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
}

export type FileUpdateManyWithoutTypeNestedInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutTypeInput, Prisma.FileUncheckedCreateWithoutTypeInput> | Prisma.FileCreateWithoutTypeInput[] | Prisma.FileUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutTypeInput | Prisma.FileCreateOrConnectWithoutTypeInput[]
  upsert?: Prisma.FileUpsertWithWhereUniqueWithoutTypeInput | Prisma.FileUpsertWithWhereUniqueWithoutTypeInput[]
  createMany?: Prisma.FileCreateManyTypeInputEnvelope
  set?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  disconnect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  delete?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  connect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  update?: Prisma.FileUpdateWithWhereUniqueWithoutTypeInput | Prisma.FileUpdateWithWhereUniqueWithoutTypeInput[]
  updateMany?: Prisma.FileUpdateManyWithWhereWithoutTypeInput | Prisma.FileUpdateManyWithWhereWithoutTypeInput[]
  deleteMany?: Prisma.FileScalarWhereInput | Prisma.FileScalarWhereInput[]
}

export type FileUncheckedUpdateManyWithoutTypeNestedInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutTypeInput, Prisma.FileUncheckedCreateWithoutTypeInput> | Prisma.FileCreateWithoutTypeInput[] | Prisma.FileUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutTypeInput | Prisma.FileCreateOrConnectWithoutTypeInput[]
  upsert?: Prisma.FileUpsertWithWhereUniqueWithoutTypeInput | Prisma.FileUpsertWithWhereUniqueWithoutTypeInput[]
  createMany?: Prisma.FileCreateManyTypeInputEnvelope
  set?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  disconnect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  delete?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  connect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  update?: Prisma.FileUpdateWithWhereUniqueWithoutTypeInput | Prisma.FileUpdateWithWhereUniqueWithoutTypeInput[]
  updateMany?: Prisma.FileUpdateManyWithWhereWithoutTypeInput | Prisma.FileUpdateManyWithWhereWithoutTypeInput[]
  deleteMany?: Prisma.FileScalarWhereInput | Prisma.FileScalarWhereInput[]
}

export type FileCreateNestedManyWithoutStorageTypeInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutStorageTypeInput, Prisma.FileUncheckedCreateWithoutStorageTypeInput> | Prisma.FileCreateWithoutStorageTypeInput[] | Prisma.FileUncheckedCreateWithoutStorageTypeInput[]
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutStorageTypeInput | Prisma.FileCreateOrConnectWithoutStorageTypeInput[]
  createMany?: Prisma.FileCreateManyStorageTypeInputEnvelope
  connect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
}

export type FileUncheckedCreateNestedManyWithoutStorageTypeInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutStorageTypeInput, Prisma.FileUncheckedCreateWithoutStorageTypeInput> | Prisma.FileCreateWithoutStorageTypeInput[] | Prisma.FileUncheckedCreateWithoutStorageTypeInput[]
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutStorageTypeInput | Prisma.FileCreateOrConnectWithoutStorageTypeInput[]
  createMany?: Prisma.FileCreateManyStorageTypeInputEnvelope
  connect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
}

export type FileUpdateManyWithoutStorageTypeNestedInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutStorageTypeInput, Prisma.FileUncheckedCreateWithoutStorageTypeInput> | Prisma.FileCreateWithoutStorageTypeInput[] | Prisma.FileUncheckedCreateWithoutStorageTypeInput[]
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutStorageTypeInput | Prisma.FileCreateOrConnectWithoutStorageTypeInput[]
  upsert?: Prisma.FileUpsertWithWhereUniqueWithoutStorageTypeInput | Prisma.FileUpsertWithWhereUniqueWithoutStorageTypeInput[]
  createMany?: Prisma.FileCreateManyStorageTypeInputEnvelope
  set?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  disconnect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  delete?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  connect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  update?: Prisma.FileUpdateWithWhereUniqueWithoutStorageTypeInput | Prisma.FileUpdateWithWhereUniqueWithoutStorageTypeInput[]
  updateMany?: Prisma.FileUpdateManyWithWhereWithoutStorageTypeInput | Prisma.FileUpdateManyWithWhereWithoutStorageTypeInput[]
  deleteMany?: Prisma.FileScalarWhereInput | Prisma.FileScalarWhereInput[]
}

export type FileUncheckedUpdateManyWithoutStorageTypeNestedInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutStorageTypeInput, Prisma.FileUncheckedCreateWithoutStorageTypeInput> | Prisma.FileCreateWithoutStorageTypeInput[] | Prisma.FileUncheckedCreateWithoutStorageTypeInput[]
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutStorageTypeInput | Prisma.FileCreateOrConnectWithoutStorageTypeInput[]
  upsert?: Prisma.FileUpsertWithWhereUniqueWithoutStorageTypeInput | Prisma.FileUpsertWithWhereUniqueWithoutStorageTypeInput[]
  createMany?: Prisma.FileCreateManyStorageTypeInputEnvelope
  set?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  disconnect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  delete?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  connect?: Prisma.FileWhereUniqueInput | Prisma.FileWhereUniqueInput[]
  update?: Prisma.FileUpdateWithWhereUniqueWithoutStorageTypeInput | Prisma.FileUpdateWithWhereUniqueWithoutStorageTypeInput[]
  updateMany?: Prisma.FileUpdateManyWithWhereWithoutStorageTypeInput | Prisma.FileUpdateManyWithWhereWithoutStorageTypeInput[]
  deleteMany?: Prisma.FileScalarWhereInput | Prisma.FileScalarWhereInput[]
}

export type FileCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutUserInput, Prisma.FileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutUserInput
  connect?: Prisma.FileWhereUniqueInput
}

export type FileUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutUserInput, Prisma.FileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutUserInput
  connect?: Prisma.FileWhereUniqueInput
}

export type FileUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutUserInput, Prisma.FileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutUserInput
  upsert?: Prisma.FileUpsertWithoutUserInput
  disconnect?: Prisma.FileWhereInput | boolean
  delete?: Prisma.FileWhereInput | boolean
  connect?: Prisma.FileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FileUpdateToOneWithWhereWithoutUserInput, Prisma.FileUpdateWithoutUserInput>, Prisma.FileUncheckedUpdateWithoutUserInput>
}

export type FileUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.FileCreateWithoutUserInput, Prisma.FileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.FileCreateOrConnectWithoutUserInput
  upsert?: Prisma.FileUpsertWithoutUserInput
  disconnect?: Prisma.FileWhereInput | boolean
  delete?: Prisma.FileWhereInput | boolean
  connect?: Prisma.FileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FileUpdateToOneWithWhereWithoutUserInput, Prisma.FileUpdateWithoutUserInput>, Prisma.FileUncheckedUpdateWithoutUserInput>
}

export type FileCreateWithoutDocumentInput = {
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Type: Prisma.FileTypeCreateNestedOneWithoutFilesInput
  StorageType: Prisma.StorageTypeCreateNestedOneWithoutFilesInput
  User?: Prisma.UserCreateNestedOneWithoutAvatarFileInput
}

export type FileUncheckedCreateWithoutDocumentInput = {
  id?: number
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  typeId: number
  storageTypeId: number
  userId?: string | null
}

export type FileCreateOrConnectWithoutDocumentInput = {
  where: Prisma.FileWhereUniqueInput
  create: Prisma.XOR<Prisma.FileCreateWithoutDocumentInput, Prisma.FileUncheckedCreateWithoutDocumentInput>
}

export type FileUpsertWithoutDocumentInput = {
  update: Prisma.XOR<Prisma.FileUpdateWithoutDocumentInput, Prisma.FileUncheckedUpdateWithoutDocumentInput>
  create: Prisma.XOR<Prisma.FileCreateWithoutDocumentInput, Prisma.FileUncheckedCreateWithoutDocumentInput>
  where?: Prisma.FileWhereInput
}

export type FileUpdateToOneWithWhereWithoutDocumentInput = {
  where?: Prisma.FileWhereInput
  data: Prisma.XOR<Prisma.FileUpdateWithoutDocumentInput, Prisma.FileUncheckedUpdateWithoutDocumentInput>
}

export type FileUpdateWithoutDocumentInput = {
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Type?: Prisma.FileTypeUpdateOneRequiredWithoutFilesNestedInput
  StorageType?: Prisma.StorageTypeUpdateOneRequiredWithoutFilesNestedInput
  User?: Prisma.UserUpdateOneWithoutAvatarFileNestedInput
}

export type FileUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
  storageTypeId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FileCreateWithoutTypeInput = {
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  StorageType: Prisma.StorageTypeCreateNestedOneWithoutFilesInput
  Document?: Prisma.DocumentCreateNestedOneWithoutFileInput
  User?: Prisma.UserCreateNestedOneWithoutAvatarFileInput
}

export type FileUncheckedCreateWithoutTypeInput = {
  id?: number
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  storageTypeId: number
  documentId?: string | null
  userId?: string | null
}

export type FileCreateOrConnectWithoutTypeInput = {
  where: Prisma.FileWhereUniqueInput
  create: Prisma.XOR<Prisma.FileCreateWithoutTypeInput, Prisma.FileUncheckedCreateWithoutTypeInput>
}

export type FileCreateManyTypeInputEnvelope = {
  data: Prisma.FileCreateManyTypeInput | Prisma.FileCreateManyTypeInput[]
  skipDuplicates?: boolean
}

export type FileUpsertWithWhereUniqueWithoutTypeInput = {
  where: Prisma.FileWhereUniqueInput
  update: Prisma.XOR<Prisma.FileUpdateWithoutTypeInput, Prisma.FileUncheckedUpdateWithoutTypeInput>
  create: Prisma.XOR<Prisma.FileCreateWithoutTypeInput, Prisma.FileUncheckedCreateWithoutTypeInput>
}

export type FileUpdateWithWhereUniqueWithoutTypeInput = {
  where: Prisma.FileWhereUniqueInput
  data: Prisma.XOR<Prisma.FileUpdateWithoutTypeInput, Prisma.FileUncheckedUpdateWithoutTypeInput>
}

export type FileUpdateManyWithWhereWithoutTypeInput = {
  where: Prisma.FileScalarWhereInput
  data: Prisma.XOR<Prisma.FileUpdateManyMutationInput, Prisma.FileUncheckedUpdateManyWithoutTypeInput>
}

export type FileScalarWhereInput = {
  AND?: Prisma.FileScalarWhereInput | Prisma.FileScalarWhereInput[]
  OR?: Prisma.FileScalarWhereInput[]
  NOT?: Prisma.FileScalarWhereInput | Prisma.FileScalarWhereInput[]
  id?: Prisma.IntFilter<"File"> | number
  originName?: Prisma.StringFilter<"File"> | string
  storedPath?: Prisma.StringFilter<"File"> | string
  createdAt?: Prisma.DateTimeFilter<"File"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"File"> | Date | string
  typeId?: Prisma.IntFilter<"File"> | number
  storageTypeId?: Prisma.IntFilter<"File"> | number
  documentId?: Prisma.StringNullableFilter<"File"> | string | null
  userId?: Prisma.StringNullableFilter<"File"> | string | null
}

export type FileCreateWithoutStorageTypeInput = {
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Type: Prisma.FileTypeCreateNestedOneWithoutFilesInput
  Document?: Prisma.DocumentCreateNestedOneWithoutFileInput
  User?: Prisma.UserCreateNestedOneWithoutAvatarFileInput
}

export type FileUncheckedCreateWithoutStorageTypeInput = {
  id?: number
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  typeId: number
  documentId?: string | null
  userId?: string | null
}

export type FileCreateOrConnectWithoutStorageTypeInput = {
  where: Prisma.FileWhereUniqueInput
  create: Prisma.XOR<Prisma.FileCreateWithoutStorageTypeInput, Prisma.FileUncheckedCreateWithoutStorageTypeInput>
}

export type FileCreateManyStorageTypeInputEnvelope = {
  data: Prisma.FileCreateManyStorageTypeInput | Prisma.FileCreateManyStorageTypeInput[]
  skipDuplicates?: boolean
}

export type FileUpsertWithWhereUniqueWithoutStorageTypeInput = {
  where: Prisma.FileWhereUniqueInput
  update: Prisma.XOR<Prisma.FileUpdateWithoutStorageTypeInput, Prisma.FileUncheckedUpdateWithoutStorageTypeInput>
  create: Prisma.XOR<Prisma.FileCreateWithoutStorageTypeInput, Prisma.FileUncheckedCreateWithoutStorageTypeInput>
}

export type FileUpdateWithWhereUniqueWithoutStorageTypeInput = {
  where: Prisma.FileWhereUniqueInput
  data: Prisma.XOR<Prisma.FileUpdateWithoutStorageTypeInput, Prisma.FileUncheckedUpdateWithoutStorageTypeInput>
}

export type FileUpdateManyWithWhereWithoutStorageTypeInput = {
  where: Prisma.FileScalarWhereInput
  data: Prisma.XOR<Prisma.FileUpdateManyMutationInput, Prisma.FileUncheckedUpdateManyWithoutStorageTypeInput>
}

export type FileCreateWithoutUserInput = {
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Type: Prisma.FileTypeCreateNestedOneWithoutFilesInput
  StorageType: Prisma.StorageTypeCreateNestedOneWithoutFilesInput
  Document?: Prisma.DocumentCreateNestedOneWithoutFileInput
}

export type FileUncheckedCreateWithoutUserInput = {
  id?: number
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  typeId: number
  storageTypeId: number
  documentId?: string | null
}

export type FileCreateOrConnectWithoutUserInput = {
  where: Prisma.FileWhereUniqueInput
  create: Prisma.XOR<Prisma.FileCreateWithoutUserInput, Prisma.FileUncheckedCreateWithoutUserInput>
}

export type FileUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.FileUpdateWithoutUserInput, Prisma.FileUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.FileCreateWithoutUserInput, Prisma.FileUncheckedCreateWithoutUserInput>
  where?: Prisma.FileWhereInput
}

export type FileUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.FileWhereInput
  data: Prisma.XOR<Prisma.FileUpdateWithoutUserInput, Prisma.FileUncheckedUpdateWithoutUserInput>
}

export type FileUpdateWithoutUserInput = {
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Type?: Prisma.FileTypeUpdateOneRequiredWithoutFilesNestedInput
  StorageType?: Prisma.StorageTypeUpdateOneRequiredWithoutFilesNestedInput
  Document?: Prisma.DocumentUpdateOneWithoutFileNestedInput
}

export type FileUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
  storageTypeId?: Prisma.IntFieldUpdateOperationsInput | number
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FileCreateManyTypeInput = {
  id?: number
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  storageTypeId: number
  documentId?: string | null
  userId?: string | null
}

export type FileUpdateWithoutTypeInput = {
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  StorageType?: Prisma.StorageTypeUpdateOneRequiredWithoutFilesNestedInput
  Document?: Prisma.DocumentUpdateOneWithoutFileNestedInput
  User?: Prisma.UserUpdateOneWithoutAvatarFileNestedInput
}

export type FileUncheckedUpdateWithoutTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  storageTypeId?: Prisma.IntFieldUpdateOperationsInput | number
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FileUncheckedUpdateManyWithoutTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  storageTypeId?: Prisma.IntFieldUpdateOperationsInput | number
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FileCreateManyStorageTypeInput = {
  id?: number
  originName: string
  storedPath: string
  createdAt?: Date | string
  updatedAt?: Date | string
  typeId: number
  documentId?: string | null
  userId?: string | null
}

export type FileUpdateWithoutStorageTypeInput = {
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Type?: Prisma.FileTypeUpdateOneRequiredWithoutFilesNestedInput
  Document?: Prisma.DocumentUpdateOneWithoutFileNestedInput
  User?: Prisma.UserUpdateOneWithoutAvatarFileNestedInput
}

export type FileUncheckedUpdateWithoutStorageTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FileUncheckedUpdateManyWithoutStorageTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  originName?: Prisma.StringFieldUpdateOperationsInput | string
  storedPath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type FileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  originName?: boolean
  storedPath?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  typeId?: boolean
  storageTypeId?: boolean
  documentId?: boolean
  userId?: boolean
  Type?: boolean | Prisma.FileTypeDefaultArgs<ExtArgs>
  StorageType?: boolean | Prisma.StorageTypeDefaultArgs<ExtArgs>
  Document?: boolean | Prisma.File$DocumentArgs<ExtArgs>
  User?: boolean | Prisma.File$UserArgs<ExtArgs>
}, ExtArgs["result"]["file"]>

export type FileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  originName?: boolean
  storedPath?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  typeId?: boolean
  storageTypeId?: boolean
  documentId?: boolean
  userId?: boolean
  Type?: boolean | Prisma.FileTypeDefaultArgs<ExtArgs>
  StorageType?: boolean | Prisma.StorageTypeDefaultArgs<ExtArgs>
  Document?: boolean | Prisma.File$DocumentArgs<ExtArgs>
  User?: boolean | Prisma.File$UserArgs<ExtArgs>
}, ExtArgs["result"]["file"]>

export type FileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  originName?: boolean
  storedPath?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  typeId?: boolean
  storageTypeId?: boolean
  documentId?: boolean
  userId?: boolean
  Type?: boolean | Prisma.FileTypeDefaultArgs<ExtArgs>
  StorageType?: boolean | Prisma.StorageTypeDefaultArgs<ExtArgs>
  Document?: boolean | Prisma.File$DocumentArgs<ExtArgs>
  User?: boolean | Prisma.File$UserArgs<ExtArgs>
}, ExtArgs["result"]["file"]>

export type FileSelectScalar = {
  id?: boolean
  originName?: boolean
  storedPath?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  typeId?: boolean
  storageTypeId?: boolean
  documentId?: boolean
  userId?: boolean
}

export type FileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "originName" | "storedPath" | "createdAt" | "updatedAt" | "typeId" | "storageTypeId" | "documentId" | "userId", ExtArgs["result"]["file"]>
export type FileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Type?: boolean | Prisma.FileTypeDefaultArgs<ExtArgs>
  StorageType?: boolean | Prisma.StorageTypeDefaultArgs<ExtArgs>
  Document?: boolean | Prisma.File$DocumentArgs<ExtArgs>
  User?: boolean | Prisma.File$UserArgs<ExtArgs>
}
export type FileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Type?: boolean | Prisma.FileTypeDefaultArgs<ExtArgs>
  StorageType?: boolean | Prisma.StorageTypeDefaultArgs<ExtArgs>
  Document?: boolean | Prisma.File$DocumentArgs<ExtArgs>
  User?: boolean | Prisma.File$UserArgs<ExtArgs>
}
export type FileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Type?: boolean | Prisma.FileTypeDefaultArgs<ExtArgs>
  StorageType?: boolean | Prisma.StorageTypeDefaultArgs<ExtArgs>
  Document?: boolean | Prisma.File$DocumentArgs<ExtArgs>
  User?: boolean | Prisma.File$UserArgs<ExtArgs>
}

export type $FilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "File"
  objects: {
    Type: Prisma.$FileTypePayload<ExtArgs>
    StorageType: Prisma.$StorageTypePayload<ExtArgs>
    Document: Prisma.$DocumentPayload<ExtArgs> | null
    User: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    originName: string
    storedPath: string
    createdAt: Date
    updatedAt: Date
    typeId: number
    storageTypeId: number
    documentId: string | null
    userId: string | null
  }, ExtArgs["result"]["file"]>
  composites: {}
}

export type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FilePayload, S>

export type FileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FileCountAggregateInputType | true
  }

export interface FileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
  /**
   * Find zero or one File that matches the filter.
   * @param {FileFindUniqueArgs} args - Arguments to find a File
   * @example
   * // Get one File
   * const file = await prisma.file.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FileFindUniqueArgs>(args: Prisma.SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one File that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
   * @example
   * // Get one File
   * const file = await prisma.file.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first File that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileFindFirstArgs} args - Arguments to find a File
   * @example
   * // Get one File
   * const file = await prisma.file.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FileFindFirstArgs>(args?: Prisma.SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first File that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
   * @example
   * // Get one File
   * const file = await prisma.file.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Files that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Files
   * const files = await prisma.file.findMany()
   * 
   * // Get first 10 Files
   * const files = await prisma.file.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FileFindManyArgs>(args?: Prisma.SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a File.
   * @param {FileCreateArgs} args - Arguments to create a File.
   * @example
   * // Create one File
   * const File = await prisma.file.create({
   *   data: {
   *     // ... data to create a File
   *   }
   * })
   * 
   */
  create<T extends FileCreateArgs>(args: Prisma.SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Files.
   * @param {FileCreateManyArgs} args - Arguments to create many Files.
   * @example
   * // Create many Files
   * const file = await prisma.file.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FileCreateManyArgs>(args?: Prisma.SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Files and returns the data saved in the database.
   * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
   * @example
   * // Create many Files
   * const file = await prisma.file.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Files and only return the `id`
   * const fileWithIdOnly = await prisma.file.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a File.
   * @param {FileDeleteArgs} args - Arguments to delete one File.
   * @example
   * // Delete one File
   * const File = await prisma.file.delete({
   *   where: {
   *     // ... filter to delete one File
   *   }
   * })
   * 
   */
  delete<T extends FileDeleteArgs>(args: Prisma.SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one File.
   * @param {FileUpdateArgs} args - Arguments to update one File.
   * @example
   * // Update one File
   * const file = await prisma.file.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FileUpdateArgs>(args: Prisma.SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Files.
   * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
   * @example
   * // Delete a few Files
   * const { count } = await prisma.file.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FileDeleteManyArgs>(args?: Prisma.SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Files.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Files
   * const file = await prisma.file.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FileUpdateManyArgs>(args: Prisma.SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Files and returns the data updated in the database.
   * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
   * @example
   * // Update many Files
   * const file = await prisma.file.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Files and only return the `id`
   * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one File.
   * @param {FileUpsertArgs} args - Arguments to update or create a File.
   * @example
   * // Update or create a File
   * const file = await prisma.file.upsert({
   *   create: {
   *     // ... data to create a File
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the File we want to update
   *   }
   * })
   */
  upsert<T extends FileUpsertArgs>(args: Prisma.SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma.Prisma__FileClient<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Files.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileCountArgs} args - Arguments to filter Files to count.
   * @example
   * // Count the number of Files
   * const count = await prisma.file.count({
   *   where: {
   *     // ... the filter for the Files we want to count
   *   }
   * })
  **/
  count<T extends FileCountArgs>(
    args?: Prisma.Subset<T, FileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a File.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FileAggregateArgs>(args: Prisma.Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

  /**
   * Group by File.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FileGroupByArgs['orderBy'] }
      : { orderBy?: FileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the File model
 */
readonly fields: FileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for File.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Type<T extends Prisma.FileTypeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FileTypeDefaultArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  StorageType<T extends Prisma.StorageTypeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StorageTypeDefaultArgs<ExtArgs>>): Prisma.Prisma__StorageTypeClient<runtime.Types.Result.GetResult<Prisma.$StorageTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Document<T extends Prisma.File$DocumentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.File$DocumentArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  User<T extends Prisma.File$UserArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.File$UserArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the File model
 */
export interface FileFieldRefs {
  readonly id: Prisma.FieldRef<"File", 'Int'>
  readonly originName: Prisma.FieldRef<"File", 'String'>
  readonly storedPath: Prisma.FieldRef<"File", 'String'>
  readonly createdAt: Prisma.FieldRef<"File", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"File", 'DateTime'>
  readonly typeId: Prisma.FieldRef<"File", 'Int'>
  readonly storageTypeId: Prisma.FieldRef<"File", 'Int'>
  readonly documentId: Prisma.FieldRef<"File", 'String'>
  readonly userId: Prisma.FieldRef<"File", 'String'>
}
    

// Custom InputTypes
/**
 * File findUnique
 */
export type FileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * Filter, which File to fetch.
   */
  where: Prisma.FileWhereUniqueInput
}

/**
 * File findUniqueOrThrow
 */
export type FileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * Filter, which File to fetch.
   */
  where: Prisma.FileWhereUniqueInput
}

/**
 * File findFirst
 */
export type FileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * Filter, which File to fetch.
   */
  where?: Prisma.FileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Files to fetch.
   */
  orderBy?: Prisma.FileOrderByWithRelationInput | Prisma.FileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Files.
   */
  cursor?: Prisma.FileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Files from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Files.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Files.
   */
  distinct?: Prisma.FileScalarFieldEnum | Prisma.FileScalarFieldEnum[]
}

/**
 * File findFirstOrThrow
 */
export type FileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * Filter, which File to fetch.
   */
  where?: Prisma.FileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Files to fetch.
   */
  orderBy?: Prisma.FileOrderByWithRelationInput | Prisma.FileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Files.
   */
  cursor?: Prisma.FileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Files from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Files.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Files.
   */
  distinct?: Prisma.FileScalarFieldEnum | Prisma.FileScalarFieldEnum[]
}

/**
 * File findMany
 */
export type FileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * Filter, which Files to fetch.
   */
  where?: Prisma.FileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Files to fetch.
   */
  orderBy?: Prisma.FileOrderByWithRelationInput | Prisma.FileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Files.
   */
  cursor?: Prisma.FileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Files from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Files.
   */
  skip?: number
  distinct?: Prisma.FileScalarFieldEnum | Prisma.FileScalarFieldEnum[]
}

/**
 * File create
 */
export type FileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * The data needed to create a File.
   */
  data: Prisma.XOR<Prisma.FileCreateInput, Prisma.FileUncheckedCreateInput>
}

/**
 * File createMany
 */
export type FileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Files.
   */
  data: Prisma.FileCreateManyInput | Prisma.FileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * File createManyAndReturn
 */
export type FileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * The data used to create many Files.
   */
  data: Prisma.FileCreateManyInput | Prisma.FileCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * File update
 */
export type FileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * The data needed to update a File.
   */
  data: Prisma.XOR<Prisma.FileUpdateInput, Prisma.FileUncheckedUpdateInput>
  /**
   * Choose, which File to update.
   */
  where: Prisma.FileWhereUniqueInput
}

/**
 * File updateMany
 */
export type FileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Files.
   */
  data: Prisma.XOR<Prisma.FileUpdateManyMutationInput, Prisma.FileUncheckedUpdateManyInput>
  /**
   * Filter which Files to update
   */
  where?: Prisma.FileWhereInput
  /**
   * Limit how many Files to update.
   */
  limit?: number
}

/**
 * File updateManyAndReturn
 */
export type FileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * The data used to update Files.
   */
  data: Prisma.XOR<Prisma.FileUpdateManyMutationInput, Prisma.FileUncheckedUpdateManyInput>
  /**
   * Filter which Files to update
   */
  where?: Prisma.FileWhereInput
  /**
   * Limit how many Files to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * File upsert
 */
export type FileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * The filter to search for the File to update in case it exists.
   */
  where: Prisma.FileWhereUniqueInput
  /**
   * In case the File found by the `where` argument doesn't exist, create a new File with this data.
   */
  create: Prisma.XOR<Prisma.FileCreateInput, Prisma.FileUncheckedCreateInput>
  /**
   * In case the File was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FileUpdateInput, Prisma.FileUncheckedUpdateInput>
}

/**
 * File delete
 */
export type FileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  /**
   * Filter which File to delete.
   */
  where: Prisma.FileWhereUniqueInput
}

/**
 * File deleteMany
 */
export type FileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Files to delete
   */
  where?: Prisma.FileWhereInput
  /**
   * Limit how many Files to delete.
   */
  limit?: number
}

/**
 * File.Document
 */
export type File$DocumentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null
  where?: Prisma.DocumentWhereInput
}

/**
 * File.User
 */
export type File$UserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * File without action
 */
export type FileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
}
