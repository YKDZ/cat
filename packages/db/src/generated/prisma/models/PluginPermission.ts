
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PluginPermission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PluginPermission
 * 
 */
export type PluginPermissionModel = runtime.Types.Result.DefaultSelection<Prisma.$PluginPermissionPayload>

export type AggregatePluginPermission = {
  _count: PluginPermissionCountAggregateOutputType | null
  _avg: PluginPermissionAvgAggregateOutputType | null
  _sum: PluginPermissionSumAggregateOutputType | null
  _min: PluginPermissionMinAggregateOutputType | null
  _max: PluginPermissionMaxAggregateOutputType | null
}

export type PluginPermissionAvgAggregateOutputType = {
  id: number | null
}

export type PluginPermissionSumAggregateOutputType = {
  id: number | null
}

export type PluginPermissionMinAggregateOutputType = {
  id: number | null
  permission: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  pluginId: string | null
}

export type PluginPermissionMaxAggregateOutputType = {
  id: number | null
  permission: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  pluginId: string | null
}

export type PluginPermissionCountAggregateOutputType = {
  id: number
  permission: number
  description: number
  createdAt: number
  updatedAt: number
  pluginId: number
  _all: number
}


export type PluginPermissionAvgAggregateInputType = {
  id?: true
}

export type PluginPermissionSumAggregateInputType = {
  id?: true
}

export type PluginPermissionMinAggregateInputType = {
  id?: true
  permission?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
}

export type PluginPermissionMaxAggregateInputType = {
  id?: true
  permission?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
}

export type PluginPermissionCountAggregateInputType = {
  id?: true
  permission?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
  _all?: true
}

export type PluginPermissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginPermission to aggregate.
   */
  where?: Prisma.PluginPermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginPermissions to fetch.
   */
  orderBy?: Prisma.PluginPermissionOrderByWithRelationInput | Prisma.PluginPermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PluginPermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginPermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginPermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PluginPermissions
  **/
  _count?: true | PluginPermissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PluginPermissionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PluginPermissionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PluginPermissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PluginPermissionMaxAggregateInputType
}

export type GetPluginPermissionAggregateType<T extends PluginPermissionAggregateArgs> = {
      [P in keyof T & keyof AggregatePluginPermission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePluginPermission[P]>
    : Prisma.GetScalarType<T[P], AggregatePluginPermission[P]>
}




export type PluginPermissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PluginPermissionWhereInput
  orderBy?: Prisma.PluginPermissionOrderByWithAggregationInput | Prisma.PluginPermissionOrderByWithAggregationInput[]
  by: Prisma.PluginPermissionScalarFieldEnum[] | Prisma.PluginPermissionScalarFieldEnum
  having?: Prisma.PluginPermissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PluginPermissionCountAggregateInputType | true
  _avg?: PluginPermissionAvgAggregateInputType
  _sum?: PluginPermissionSumAggregateInputType
  _min?: PluginPermissionMinAggregateInputType
  _max?: PluginPermissionMaxAggregateInputType
}

export type PluginPermissionGroupByOutputType = {
  id: number
  permission: string
  description: string
  createdAt: Date
  updatedAt: Date
  pluginId: string
  _count: PluginPermissionCountAggregateOutputType | null
  _avg: PluginPermissionAvgAggregateOutputType | null
  _sum: PluginPermissionSumAggregateOutputType | null
  _min: PluginPermissionMinAggregateOutputType | null
  _max: PluginPermissionMaxAggregateOutputType | null
}

type GetPluginPermissionGroupByPayload<T extends PluginPermissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PluginPermissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PluginPermissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PluginPermissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PluginPermissionGroupByOutputType[P]>
      }
    >
  > 



export type PluginPermissionWhereInput = {
  AND?: Prisma.PluginPermissionWhereInput | Prisma.PluginPermissionWhereInput[]
  OR?: Prisma.PluginPermissionWhereInput[]
  NOT?: Prisma.PluginPermissionWhereInput | Prisma.PluginPermissionWhereInput[]
  id?: Prisma.IntFilter<"PluginPermission"> | number
  permission?: Prisma.StringFilter<"PluginPermission"> | string
  description?: Prisma.StringFilter<"PluginPermission"> | string
  createdAt?: Prisma.DateTimeFilter<"PluginPermission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginPermission"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginPermission"> | string
  Plugin?: Prisma.XOR<Prisma.PluginScalarRelationFilter, Prisma.PluginWhereInput>
}

export type PluginPermissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  permission?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
  Plugin?: Prisma.PluginOrderByWithRelationInput
  _relevance?: Prisma.PluginPermissionOrderByRelevanceInput
}

export type PluginPermissionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  pluginId_permission?: Prisma.PluginPermissionPluginIdPermissionCompoundUniqueInput
  AND?: Prisma.PluginPermissionWhereInput | Prisma.PluginPermissionWhereInput[]
  OR?: Prisma.PluginPermissionWhereInput[]
  NOT?: Prisma.PluginPermissionWhereInput | Prisma.PluginPermissionWhereInput[]
  permission?: Prisma.StringFilter<"PluginPermission"> | string
  description?: Prisma.StringFilter<"PluginPermission"> | string
  createdAt?: Prisma.DateTimeFilter<"PluginPermission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginPermission"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginPermission"> | string
  Plugin?: Prisma.XOR<Prisma.PluginScalarRelationFilter, Prisma.PluginWhereInput>
}, "id" | "pluginId_permission">

export type PluginPermissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  permission?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
  _count?: Prisma.PluginPermissionCountOrderByAggregateInput
  _avg?: Prisma.PluginPermissionAvgOrderByAggregateInput
  _max?: Prisma.PluginPermissionMaxOrderByAggregateInput
  _min?: Prisma.PluginPermissionMinOrderByAggregateInput
  _sum?: Prisma.PluginPermissionSumOrderByAggregateInput
}

export type PluginPermissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PluginPermissionScalarWhereWithAggregatesInput | Prisma.PluginPermissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PluginPermissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PluginPermissionScalarWhereWithAggregatesInput | Prisma.PluginPermissionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PluginPermission"> | number
  permission?: Prisma.StringWithAggregatesFilter<"PluginPermission"> | string
  description?: Prisma.StringWithAggregatesFilter<"PluginPermission"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PluginPermission"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PluginPermission"> | Date | string
  pluginId?: Prisma.StringWithAggregatesFilter<"PluginPermission"> | string
}

export type PluginPermissionCreateInput = {
  permission: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Plugin: Prisma.PluginCreateNestedOneWithoutPermissionsInput
}

export type PluginPermissionUncheckedCreateInput = {
  id?: number
  permission: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  pluginId: string
}

export type PluginPermissionUpdateInput = {
  permission?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Plugin?: Prisma.PluginUpdateOneRequiredWithoutPermissionsNestedInput
}

export type PluginPermissionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  permission?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pluginId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginPermissionCreateManyInput = {
  id?: number
  permission: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  pluginId: string
}

export type PluginPermissionUpdateManyMutationInput = {
  permission?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginPermissionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  permission?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pluginId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginPermissionListRelationFilter = {
  every?: Prisma.PluginPermissionWhereInput
  some?: Prisma.PluginPermissionWhereInput
  none?: Prisma.PluginPermissionWhereInput
}

export type PluginPermissionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PluginPermissionOrderByRelevanceInput = {
  fields: Prisma.PluginPermissionOrderByRelevanceFieldEnum | Prisma.PluginPermissionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PluginPermissionPluginIdPermissionCompoundUniqueInput = {
  pluginId: string
  permission: string
}

export type PluginPermissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  permission?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginPermissionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PluginPermissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  permission?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginPermissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  permission?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginPermissionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PluginPermissionCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginPermissionCreateWithoutPluginInput, Prisma.PluginPermissionUncheckedCreateWithoutPluginInput> | Prisma.PluginPermissionCreateWithoutPluginInput[] | Prisma.PluginPermissionUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginPermissionCreateOrConnectWithoutPluginInput | Prisma.PluginPermissionCreateOrConnectWithoutPluginInput[]
  createMany?: Prisma.PluginPermissionCreateManyPluginInputEnvelope
  connect?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
}

export type PluginPermissionUncheckedCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginPermissionCreateWithoutPluginInput, Prisma.PluginPermissionUncheckedCreateWithoutPluginInput> | Prisma.PluginPermissionCreateWithoutPluginInput[] | Prisma.PluginPermissionUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginPermissionCreateOrConnectWithoutPluginInput | Prisma.PluginPermissionCreateOrConnectWithoutPluginInput[]
  createMany?: Prisma.PluginPermissionCreateManyPluginInputEnvelope
  connect?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
}

export type PluginPermissionUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginPermissionCreateWithoutPluginInput, Prisma.PluginPermissionUncheckedCreateWithoutPluginInput> | Prisma.PluginPermissionCreateWithoutPluginInput[] | Prisma.PluginPermissionUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginPermissionCreateOrConnectWithoutPluginInput | Prisma.PluginPermissionCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginPermissionUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginPermissionUpsertWithWhereUniqueWithoutPluginInput[]
  createMany?: Prisma.PluginPermissionCreateManyPluginInputEnvelope
  set?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
  disconnect?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
  delete?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
  connect?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
  update?: Prisma.PluginPermissionUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginPermissionUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginPermissionUpdateManyWithWhereWithoutPluginInput | Prisma.PluginPermissionUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginPermissionScalarWhereInput | Prisma.PluginPermissionScalarWhereInput[]
}

export type PluginPermissionUncheckedUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginPermissionCreateWithoutPluginInput, Prisma.PluginPermissionUncheckedCreateWithoutPluginInput> | Prisma.PluginPermissionCreateWithoutPluginInput[] | Prisma.PluginPermissionUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginPermissionCreateOrConnectWithoutPluginInput | Prisma.PluginPermissionCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginPermissionUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginPermissionUpsertWithWhereUniqueWithoutPluginInput[]
  createMany?: Prisma.PluginPermissionCreateManyPluginInputEnvelope
  set?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
  disconnect?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
  delete?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
  connect?: Prisma.PluginPermissionWhereUniqueInput | Prisma.PluginPermissionWhereUniqueInput[]
  update?: Prisma.PluginPermissionUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginPermissionUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginPermissionUpdateManyWithWhereWithoutPluginInput | Prisma.PluginPermissionUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginPermissionScalarWhereInput | Prisma.PluginPermissionScalarWhereInput[]
}

export type PluginPermissionCreateWithoutPluginInput = {
  permission: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginPermissionUncheckedCreateWithoutPluginInput = {
  id?: number
  permission: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginPermissionCreateOrConnectWithoutPluginInput = {
  where: Prisma.PluginPermissionWhereUniqueInput
  create: Prisma.XOR<Prisma.PluginPermissionCreateWithoutPluginInput, Prisma.PluginPermissionUncheckedCreateWithoutPluginInput>
}

export type PluginPermissionCreateManyPluginInputEnvelope = {
  data: Prisma.PluginPermissionCreateManyPluginInput | Prisma.PluginPermissionCreateManyPluginInput[]
  skipDuplicates?: boolean
}

export type PluginPermissionUpsertWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginPermissionWhereUniqueInput
  update: Prisma.XOR<Prisma.PluginPermissionUpdateWithoutPluginInput, Prisma.PluginPermissionUncheckedUpdateWithoutPluginInput>
  create: Prisma.XOR<Prisma.PluginPermissionCreateWithoutPluginInput, Prisma.PluginPermissionUncheckedCreateWithoutPluginInput>
}

export type PluginPermissionUpdateWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginPermissionWhereUniqueInput
  data: Prisma.XOR<Prisma.PluginPermissionUpdateWithoutPluginInput, Prisma.PluginPermissionUncheckedUpdateWithoutPluginInput>
}

export type PluginPermissionUpdateManyWithWhereWithoutPluginInput = {
  where: Prisma.PluginPermissionScalarWhereInput
  data: Prisma.XOR<Prisma.PluginPermissionUpdateManyMutationInput, Prisma.PluginPermissionUncheckedUpdateManyWithoutPluginInput>
}

export type PluginPermissionScalarWhereInput = {
  AND?: Prisma.PluginPermissionScalarWhereInput | Prisma.PluginPermissionScalarWhereInput[]
  OR?: Prisma.PluginPermissionScalarWhereInput[]
  NOT?: Prisma.PluginPermissionScalarWhereInput | Prisma.PluginPermissionScalarWhereInput[]
  id?: Prisma.IntFilter<"PluginPermission"> | number
  permission?: Prisma.StringFilter<"PluginPermission"> | string
  description?: Prisma.StringFilter<"PluginPermission"> | string
  createdAt?: Prisma.DateTimeFilter<"PluginPermission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginPermission"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginPermission"> | string
}

export type PluginPermissionCreateManyPluginInput = {
  id?: number
  permission: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginPermissionUpdateWithoutPluginInput = {
  permission?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginPermissionUncheckedUpdateWithoutPluginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  permission?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginPermissionUncheckedUpdateManyWithoutPluginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  permission?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PluginPermissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  permission?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginPermission"]>

export type PluginPermissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  permission?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginPermission"]>

export type PluginPermissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  permission?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginPermission"]>

export type PluginPermissionSelectScalar = {
  id?: boolean
  permission?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
}

export type PluginPermissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "permission" | "description" | "createdAt" | "updatedAt" | "pluginId", ExtArgs["result"]["pluginPermission"]>
export type PluginPermissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}
export type PluginPermissionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}
export type PluginPermissionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}

export type $PluginPermissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PluginPermission"
  objects: {
    Plugin: Prisma.$PluginPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    permission: string
    description: string
    createdAt: Date
    updatedAt: Date
    pluginId: string
  }, ExtArgs["result"]["pluginPermission"]>
  composites: {}
}

export type PluginPermissionGetPayload<S extends boolean | null | undefined | PluginPermissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload, S>

export type PluginPermissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PluginPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PluginPermissionCountAggregateInputType | true
  }

export interface PluginPermissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PluginPermission'], meta: { name: 'PluginPermission' } }
  /**
   * Find zero or one PluginPermission that matches the filter.
   * @param {PluginPermissionFindUniqueArgs} args - Arguments to find a PluginPermission
   * @example
   * // Get one PluginPermission
   * const pluginPermission = await prisma.pluginPermission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PluginPermissionFindUniqueArgs>(args: Prisma.SelectSubset<T, PluginPermissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PluginPermissionClient<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PluginPermission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PluginPermissionFindUniqueOrThrowArgs} args - Arguments to find a PluginPermission
   * @example
   * // Get one PluginPermission
   * const pluginPermission = await prisma.pluginPermission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PluginPermissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PluginPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginPermissionClient<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginPermission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginPermissionFindFirstArgs} args - Arguments to find a PluginPermission
   * @example
   * // Get one PluginPermission
   * const pluginPermission = await prisma.pluginPermission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PluginPermissionFindFirstArgs>(args?: Prisma.SelectSubset<T, PluginPermissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PluginPermissionClient<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginPermission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginPermissionFindFirstOrThrowArgs} args - Arguments to find a PluginPermission
   * @example
   * // Get one PluginPermission
   * const pluginPermission = await prisma.pluginPermission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PluginPermissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PluginPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginPermissionClient<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PluginPermissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PluginPermissions
   * const pluginPermissions = await prisma.pluginPermission.findMany()
   * 
   * // Get first 10 PluginPermissions
   * const pluginPermissions = await prisma.pluginPermission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pluginPermissionWithIdOnly = await prisma.pluginPermission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PluginPermissionFindManyArgs>(args?: Prisma.SelectSubset<T, PluginPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PluginPermission.
   * @param {PluginPermissionCreateArgs} args - Arguments to create a PluginPermission.
   * @example
   * // Create one PluginPermission
   * const PluginPermission = await prisma.pluginPermission.create({
   *   data: {
   *     // ... data to create a PluginPermission
   *   }
   * })
   * 
   */
  create<T extends PluginPermissionCreateArgs>(args: Prisma.SelectSubset<T, PluginPermissionCreateArgs<ExtArgs>>): Prisma.Prisma__PluginPermissionClient<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PluginPermissions.
   * @param {PluginPermissionCreateManyArgs} args - Arguments to create many PluginPermissions.
   * @example
   * // Create many PluginPermissions
   * const pluginPermission = await prisma.pluginPermission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PluginPermissionCreateManyArgs>(args?: Prisma.SelectSubset<T, PluginPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PluginPermissions and returns the data saved in the database.
   * @param {PluginPermissionCreateManyAndReturnArgs} args - Arguments to create many PluginPermissions.
   * @example
   * // Create many PluginPermissions
   * const pluginPermission = await prisma.pluginPermission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PluginPermissions and only return the `id`
   * const pluginPermissionWithIdOnly = await prisma.pluginPermission.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PluginPermissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PluginPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PluginPermission.
   * @param {PluginPermissionDeleteArgs} args - Arguments to delete one PluginPermission.
   * @example
   * // Delete one PluginPermission
   * const PluginPermission = await prisma.pluginPermission.delete({
   *   where: {
   *     // ... filter to delete one PluginPermission
   *   }
   * })
   * 
   */
  delete<T extends PluginPermissionDeleteArgs>(args: Prisma.SelectSubset<T, PluginPermissionDeleteArgs<ExtArgs>>): Prisma.Prisma__PluginPermissionClient<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PluginPermission.
   * @param {PluginPermissionUpdateArgs} args - Arguments to update one PluginPermission.
   * @example
   * // Update one PluginPermission
   * const pluginPermission = await prisma.pluginPermission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PluginPermissionUpdateArgs>(args: Prisma.SelectSubset<T, PluginPermissionUpdateArgs<ExtArgs>>): Prisma.Prisma__PluginPermissionClient<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PluginPermissions.
   * @param {PluginPermissionDeleteManyArgs} args - Arguments to filter PluginPermissions to delete.
   * @example
   * // Delete a few PluginPermissions
   * const { count } = await prisma.pluginPermission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PluginPermissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PluginPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginPermissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginPermissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PluginPermissions
   * const pluginPermission = await prisma.pluginPermission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PluginPermissionUpdateManyArgs>(args: Prisma.SelectSubset<T, PluginPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginPermissions and returns the data updated in the database.
   * @param {PluginPermissionUpdateManyAndReturnArgs} args - Arguments to update many PluginPermissions.
   * @example
   * // Update many PluginPermissions
   * const pluginPermission = await prisma.pluginPermission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PluginPermissions and only return the `id`
   * const pluginPermissionWithIdOnly = await prisma.pluginPermission.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PluginPermissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PluginPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PluginPermission.
   * @param {PluginPermissionUpsertArgs} args - Arguments to update or create a PluginPermission.
   * @example
   * // Update or create a PluginPermission
   * const pluginPermission = await prisma.pluginPermission.upsert({
   *   create: {
   *     // ... data to create a PluginPermission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PluginPermission we want to update
   *   }
   * })
   */
  upsert<T extends PluginPermissionUpsertArgs>(args: Prisma.SelectSubset<T, PluginPermissionUpsertArgs<ExtArgs>>): Prisma.Prisma__PluginPermissionClient<runtime.Types.Result.GetResult<Prisma.$PluginPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PluginPermissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginPermissionCountArgs} args - Arguments to filter PluginPermissions to count.
   * @example
   * // Count the number of PluginPermissions
   * const count = await prisma.pluginPermission.count({
   *   where: {
   *     // ... the filter for the PluginPermissions we want to count
   *   }
   * })
  **/
  count<T extends PluginPermissionCountArgs>(
    args?: Prisma.Subset<T, PluginPermissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PluginPermissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PluginPermission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PluginPermissionAggregateArgs>(args: Prisma.Subset<T, PluginPermissionAggregateArgs>): Prisma.PrismaPromise<GetPluginPermissionAggregateType<T>>

  /**
   * Group by PluginPermission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginPermissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PluginPermissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PluginPermissionGroupByArgs['orderBy'] }
      : { orderBy?: PluginPermissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PluginPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPluginPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PluginPermission model
 */
readonly fields: PluginPermissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PluginPermission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PluginPermissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Plugin<T extends Prisma.PluginDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PluginDefaultArgs<ExtArgs>>): Prisma.Prisma__PluginClient<runtime.Types.Result.GetResult<Prisma.$PluginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PluginPermission model
 */
export interface PluginPermissionFieldRefs {
  readonly id: Prisma.FieldRef<"PluginPermission", 'Int'>
  readonly permission: Prisma.FieldRef<"PluginPermission", 'String'>
  readonly description: Prisma.FieldRef<"PluginPermission", 'String'>
  readonly createdAt: Prisma.FieldRef<"PluginPermission", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PluginPermission", 'DateTime'>
  readonly pluginId: Prisma.FieldRef<"PluginPermission", 'String'>
}
    

// Custom InputTypes
/**
 * PluginPermission findUnique
 */
export type PluginPermissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * Filter, which PluginPermission to fetch.
   */
  where: Prisma.PluginPermissionWhereUniqueInput
}

/**
 * PluginPermission findUniqueOrThrow
 */
export type PluginPermissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * Filter, which PluginPermission to fetch.
   */
  where: Prisma.PluginPermissionWhereUniqueInput
}

/**
 * PluginPermission findFirst
 */
export type PluginPermissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * Filter, which PluginPermission to fetch.
   */
  where?: Prisma.PluginPermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginPermissions to fetch.
   */
  orderBy?: Prisma.PluginPermissionOrderByWithRelationInput | Prisma.PluginPermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginPermissions.
   */
  cursor?: Prisma.PluginPermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginPermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginPermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginPermissions.
   */
  distinct?: Prisma.PluginPermissionScalarFieldEnum | Prisma.PluginPermissionScalarFieldEnum[]
}

/**
 * PluginPermission findFirstOrThrow
 */
export type PluginPermissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * Filter, which PluginPermission to fetch.
   */
  where?: Prisma.PluginPermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginPermissions to fetch.
   */
  orderBy?: Prisma.PluginPermissionOrderByWithRelationInput | Prisma.PluginPermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginPermissions.
   */
  cursor?: Prisma.PluginPermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginPermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginPermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginPermissions.
   */
  distinct?: Prisma.PluginPermissionScalarFieldEnum | Prisma.PluginPermissionScalarFieldEnum[]
}

/**
 * PluginPermission findMany
 */
export type PluginPermissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * Filter, which PluginPermissions to fetch.
   */
  where?: Prisma.PluginPermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginPermissions to fetch.
   */
  orderBy?: Prisma.PluginPermissionOrderByWithRelationInput | Prisma.PluginPermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PluginPermissions.
   */
  cursor?: Prisma.PluginPermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginPermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginPermissions.
   */
  skip?: number
  distinct?: Prisma.PluginPermissionScalarFieldEnum | Prisma.PluginPermissionScalarFieldEnum[]
}

/**
 * PluginPermission create
 */
export type PluginPermissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * The data needed to create a PluginPermission.
   */
  data: Prisma.XOR<Prisma.PluginPermissionCreateInput, Prisma.PluginPermissionUncheckedCreateInput>
}

/**
 * PluginPermission createMany
 */
export type PluginPermissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PluginPermissions.
   */
  data: Prisma.PluginPermissionCreateManyInput | Prisma.PluginPermissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PluginPermission createManyAndReturn
 */
export type PluginPermissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * The data used to create many PluginPermissions.
   */
  data: Prisma.PluginPermissionCreateManyInput | Prisma.PluginPermissionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PluginPermission update
 */
export type PluginPermissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * The data needed to update a PluginPermission.
   */
  data: Prisma.XOR<Prisma.PluginPermissionUpdateInput, Prisma.PluginPermissionUncheckedUpdateInput>
  /**
   * Choose, which PluginPermission to update.
   */
  where: Prisma.PluginPermissionWhereUniqueInput
}

/**
 * PluginPermission updateMany
 */
export type PluginPermissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PluginPermissions.
   */
  data: Prisma.XOR<Prisma.PluginPermissionUpdateManyMutationInput, Prisma.PluginPermissionUncheckedUpdateManyInput>
  /**
   * Filter which PluginPermissions to update
   */
  where?: Prisma.PluginPermissionWhereInput
  /**
   * Limit how many PluginPermissions to update.
   */
  limit?: number
}

/**
 * PluginPermission updateManyAndReturn
 */
export type PluginPermissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * The data used to update PluginPermissions.
   */
  data: Prisma.XOR<Prisma.PluginPermissionUpdateManyMutationInput, Prisma.PluginPermissionUncheckedUpdateManyInput>
  /**
   * Filter which PluginPermissions to update
   */
  where?: Prisma.PluginPermissionWhereInput
  /**
   * Limit how many PluginPermissions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PluginPermission upsert
 */
export type PluginPermissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * The filter to search for the PluginPermission to update in case it exists.
   */
  where: Prisma.PluginPermissionWhereUniqueInput
  /**
   * In case the PluginPermission found by the `where` argument doesn't exist, create a new PluginPermission with this data.
   */
  create: Prisma.XOR<Prisma.PluginPermissionCreateInput, Prisma.PluginPermissionUncheckedCreateInput>
  /**
   * In case the PluginPermission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PluginPermissionUpdateInput, Prisma.PluginPermissionUncheckedUpdateInput>
}

/**
 * PluginPermission delete
 */
export type PluginPermissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
  /**
   * Filter which PluginPermission to delete.
   */
  where: Prisma.PluginPermissionWhereUniqueInput
}

/**
 * PluginPermission deleteMany
 */
export type PluginPermissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginPermissions to delete
   */
  where?: Prisma.PluginPermissionWhereInput
  /**
   * Limit how many PluginPermissions to delete.
   */
  limit?: number
}

/**
 * PluginPermission without action
 */
export type PluginPermissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginPermission
   */
  select?: Prisma.PluginPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginPermission
   */
  omit?: Prisma.PluginPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginPermissionInclude<ExtArgs> | null
}
