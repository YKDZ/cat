
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Memory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Memory
 * 
 */
export type MemoryModel = runtime.Types.Result.DefaultSelection<Prisma.$MemoryPayload>

export type AggregateMemory = {
  _count: MemoryCountAggregateOutputType | null
  _min: MemoryMinAggregateOutputType | null
  _max: MemoryMaxAggregateOutputType | null
}

export type MemoryMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  creatorId: string | null
}

export type MemoryMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  creatorId: string | null
}

export type MemoryCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  creatorId: number
  _all: number
}


export type MemoryMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
}

export type MemoryMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
}

export type MemoryCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
  _all?: true
}

export type MemoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Memory to aggregate.
   */
  where?: Prisma.MemoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Memories to fetch.
   */
  orderBy?: Prisma.MemoryOrderByWithRelationInput | Prisma.MemoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MemoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Memories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Memories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Memories
  **/
  _count?: true | MemoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MemoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MemoryMaxAggregateInputType
}

export type GetMemoryAggregateType<T extends MemoryAggregateArgs> = {
      [P in keyof T & keyof AggregateMemory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMemory[P]>
    : Prisma.GetScalarType<T[P], AggregateMemory[P]>
}




export type MemoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MemoryWhereInput
  orderBy?: Prisma.MemoryOrderByWithAggregationInput | Prisma.MemoryOrderByWithAggregationInput[]
  by: Prisma.MemoryScalarFieldEnum[] | Prisma.MemoryScalarFieldEnum
  having?: Prisma.MemoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MemoryCountAggregateInputType | true
  _min?: MemoryMinAggregateInputType
  _max?: MemoryMaxAggregateInputType
}

export type MemoryGroupByOutputType = {
  id: string
  name: string
  description: string | null
  createdAt: Date
  updatedAt: Date
  creatorId: string
  _count: MemoryCountAggregateOutputType | null
  _min: MemoryMinAggregateOutputType | null
  _max: MemoryMaxAggregateOutputType | null
}

type GetMemoryGroupByPayload<T extends MemoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MemoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MemoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MemoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MemoryGroupByOutputType[P]>
      }
    >
  > 



export type MemoryWhereInput = {
  AND?: Prisma.MemoryWhereInput | Prisma.MemoryWhereInput[]
  OR?: Prisma.MemoryWhereInput[]
  NOT?: Prisma.MemoryWhereInput | Prisma.MemoryWhereInput[]
  id?: Prisma.StringFilter<"Memory"> | string
  name?: Prisma.StringFilter<"Memory"> | string
  description?: Prisma.StringNullableFilter<"Memory"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Memory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Memory"> | Date | string
  creatorId?: Prisma.StringFilter<"Memory"> | string
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  MemoryItems?: Prisma.MemoryItemListRelationFilter
  Projects?: Prisma.ProjectListRelationFilter
}

export type MemoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  Creator?: Prisma.UserOrderByWithRelationInput
  MemoryItems?: Prisma.MemoryItemOrderByRelationAggregateInput
  Projects?: Prisma.ProjectOrderByRelationAggregateInput
  _relevance?: Prisma.MemoryOrderByRelevanceInput
}

export type MemoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MemoryWhereInput | Prisma.MemoryWhereInput[]
  OR?: Prisma.MemoryWhereInput[]
  NOT?: Prisma.MemoryWhereInput | Prisma.MemoryWhereInput[]
  name?: Prisma.StringFilter<"Memory"> | string
  description?: Prisma.StringNullableFilter<"Memory"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Memory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Memory"> | Date | string
  creatorId?: Prisma.StringFilter<"Memory"> | string
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  MemoryItems?: Prisma.MemoryItemListRelationFilter
  Projects?: Prisma.ProjectListRelationFilter
}, "id">

export type MemoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  _count?: Prisma.MemoryCountOrderByAggregateInput
  _max?: Prisma.MemoryMaxOrderByAggregateInput
  _min?: Prisma.MemoryMinOrderByAggregateInput
}

export type MemoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.MemoryScalarWhereWithAggregatesInput | Prisma.MemoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.MemoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MemoryScalarWhereWithAggregatesInput | Prisma.MemoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Memory"> | string
  name?: Prisma.StringWithAggregatesFilter<"Memory"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Memory"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Memory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Memory"> | Date | string
  creatorId?: Prisma.StringWithAggregatesFilter<"Memory"> | string
}

export type MemoryCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Creator: Prisma.UserCreateNestedOneWithoutMemoriesInput
  MemoryItems?: Prisma.MemoryItemCreateNestedManyWithoutMemoryInput
  Projects?: Prisma.ProjectCreateNestedManyWithoutMemoriesInput
}

export type MemoryUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  MemoryItems?: Prisma.MemoryItemUncheckedCreateNestedManyWithoutMemoryInput
  Projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutMemoriesInput
}

export type MemoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Creator?: Prisma.UserUpdateOneRequiredWithoutMemoriesNestedInput
  MemoryItems?: Prisma.MemoryItemUpdateManyWithoutMemoryNestedInput
  Projects?: Prisma.ProjectUpdateManyWithoutMemoriesNestedInput
}

export type MemoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  MemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutMemoryNestedInput
  Projects?: Prisma.ProjectUncheckedUpdateManyWithoutMemoriesNestedInput
}

export type MemoryCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
}

export type MemoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MemoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MemoryOrderByRelevanceInput = {
  fields: Prisma.MemoryOrderByRelevanceFieldEnum | Prisma.MemoryOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type MemoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type MemoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type MemoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type MemoryScalarRelationFilter = {
  is?: Prisma.MemoryWhereInput
  isNot?: Prisma.MemoryWhereInput
}

export type MemoryListRelationFilter = {
  every?: Prisma.MemoryWhereInput
  some?: Prisma.MemoryWhereInput
  none?: Prisma.MemoryWhereInput
}

export type MemoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MemoryCreateNestedOneWithoutMemoryItemsInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutMemoryItemsInput, Prisma.MemoryUncheckedCreateWithoutMemoryItemsInput>
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutMemoryItemsInput
  connect?: Prisma.MemoryWhereUniqueInput
}

export type MemoryUpdateOneRequiredWithoutMemoryItemsNestedInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutMemoryItemsInput, Prisma.MemoryUncheckedCreateWithoutMemoryItemsInput>
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutMemoryItemsInput
  upsert?: Prisma.MemoryUpsertWithoutMemoryItemsInput
  connect?: Prisma.MemoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MemoryUpdateToOneWithWhereWithoutMemoryItemsInput, Prisma.MemoryUpdateWithoutMemoryItemsInput>, Prisma.MemoryUncheckedUpdateWithoutMemoryItemsInput>
}

export type MemoryCreateNestedManyWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutProjectsInput, Prisma.MemoryUncheckedCreateWithoutProjectsInput> | Prisma.MemoryCreateWithoutProjectsInput[] | Prisma.MemoryUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutProjectsInput | Prisma.MemoryCreateOrConnectWithoutProjectsInput[]
  connect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
}

export type MemoryUncheckedCreateNestedManyWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutProjectsInput, Prisma.MemoryUncheckedCreateWithoutProjectsInput> | Prisma.MemoryCreateWithoutProjectsInput[] | Prisma.MemoryUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutProjectsInput | Prisma.MemoryCreateOrConnectWithoutProjectsInput[]
  connect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
}

export type MemoryUpdateManyWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutProjectsInput, Prisma.MemoryUncheckedCreateWithoutProjectsInput> | Prisma.MemoryCreateWithoutProjectsInput[] | Prisma.MemoryUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutProjectsInput | Prisma.MemoryCreateOrConnectWithoutProjectsInput[]
  upsert?: Prisma.MemoryUpsertWithWhereUniqueWithoutProjectsInput | Prisma.MemoryUpsertWithWhereUniqueWithoutProjectsInput[]
  set?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  disconnect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  delete?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  connect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  update?: Prisma.MemoryUpdateWithWhereUniqueWithoutProjectsInput | Prisma.MemoryUpdateWithWhereUniqueWithoutProjectsInput[]
  updateMany?: Prisma.MemoryUpdateManyWithWhereWithoutProjectsInput | Prisma.MemoryUpdateManyWithWhereWithoutProjectsInput[]
  deleteMany?: Prisma.MemoryScalarWhereInput | Prisma.MemoryScalarWhereInput[]
}

export type MemoryUncheckedUpdateManyWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutProjectsInput, Prisma.MemoryUncheckedCreateWithoutProjectsInput> | Prisma.MemoryCreateWithoutProjectsInput[] | Prisma.MemoryUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutProjectsInput | Prisma.MemoryCreateOrConnectWithoutProjectsInput[]
  upsert?: Prisma.MemoryUpsertWithWhereUniqueWithoutProjectsInput | Prisma.MemoryUpsertWithWhereUniqueWithoutProjectsInput[]
  set?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  disconnect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  delete?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  connect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  update?: Prisma.MemoryUpdateWithWhereUniqueWithoutProjectsInput | Prisma.MemoryUpdateWithWhereUniqueWithoutProjectsInput[]
  updateMany?: Prisma.MemoryUpdateManyWithWhereWithoutProjectsInput | Prisma.MemoryUpdateManyWithWhereWithoutProjectsInput[]
  deleteMany?: Prisma.MemoryScalarWhereInput | Prisma.MemoryScalarWhereInput[]
}

export type MemoryCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutCreatorInput, Prisma.MemoryUncheckedCreateWithoutCreatorInput> | Prisma.MemoryCreateWithoutCreatorInput[] | Prisma.MemoryUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutCreatorInput | Prisma.MemoryCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.MemoryCreateManyCreatorInputEnvelope
  connect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
}

export type MemoryUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutCreatorInput, Prisma.MemoryUncheckedCreateWithoutCreatorInput> | Prisma.MemoryCreateWithoutCreatorInput[] | Prisma.MemoryUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutCreatorInput | Prisma.MemoryCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.MemoryCreateManyCreatorInputEnvelope
  connect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
}

export type MemoryUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutCreatorInput, Prisma.MemoryUncheckedCreateWithoutCreatorInput> | Prisma.MemoryCreateWithoutCreatorInput[] | Prisma.MemoryUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutCreatorInput | Prisma.MemoryCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.MemoryUpsertWithWhereUniqueWithoutCreatorInput | Prisma.MemoryUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.MemoryCreateManyCreatorInputEnvelope
  set?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  disconnect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  delete?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  connect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  update?: Prisma.MemoryUpdateWithWhereUniqueWithoutCreatorInput | Prisma.MemoryUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.MemoryUpdateManyWithWhereWithoutCreatorInput | Prisma.MemoryUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.MemoryScalarWhereInput | Prisma.MemoryScalarWhereInput[]
}

export type MemoryUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.MemoryCreateWithoutCreatorInput, Prisma.MemoryUncheckedCreateWithoutCreatorInput> | Prisma.MemoryCreateWithoutCreatorInput[] | Prisma.MemoryUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.MemoryCreateOrConnectWithoutCreatorInput | Prisma.MemoryCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.MemoryUpsertWithWhereUniqueWithoutCreatorInput | Prisma.MemoryUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.MemoryCreateManyCreatorInputEnvelope
  set?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  disconnect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  delete?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  connect?: Prisma.MemoryWhereUniqueInput | Prisma.MemoryWhereUniqueInput[]
  update?: Prisma.MemoryUpdateWithWhereUniqueWithoutCreatorInput | Prisma.MemoryUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.MemoryUpdateManyWithWhereWithoutCreatorInput | Prisma.MemoryUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.MemoryScalarWhereInput | Prisma.MemoryScalarWhereInput[]
}

export type MemoryCreateWithoutMemoryItemsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Creator: Prisma.UserCreateNestedOneWithoutMemoriesInput
  Projects?: Prisma.ProjectCreateNestedManyWithoutMemoriesInput
}

export type MemoryUncheckedCreateWithoutMemoryItemsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  Projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutMemoriesInput
}

export type MemoryCreateOrConnectWithoutMemoryItemsInput = {
  where: Prisma.MemoryWhereUniqueInput
  create: Prisma.XOR<Prisma.MemoryCreateWithoutMemoryItemsInput, Prisma.MemoryUncheckedCreateWithoutMemoryItemsInput>
}

export type MemoryUpsertWithoutMemoryItemsInput = {
  update: Prisma.XOR<Prisma.MemoryUpdateWithoutMemoryItemsInput, Prisma.MemoryUncheckedUpdateWithoutMemoryItemsInput>
  create: Prisma.XOR<Prisma.MemoryCreateWithoutMemoryItemsInput, Prisma.MemoryUncheckedCreateWithoutMemoryItemsInput>
  where?: Prisma.MemoryWhereInput
}

export type MemoryUpdateToOneWithWhereWithoutMemoryItemsInput = {
  where?: Prisma.MemoryWhereInput
  data: Prisma.XOR<Prisma.MemoryUpdateWithoutMemoryItemsInput, Prisma.MemoryUncheckedUpdateWithoutMemoryItemsInput>
}

export type MemoryUpdateWithoutMemoryItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Creator?: Prisma.UserUpdateOneRequiredWithoutMemoriesNestedInput
  Projects?: Prisma.ProjectUpdateManyWithoutMemoriesNestedInput
}

export type MemoryUncheckedUpdateWithoutMemoryItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  Projects?: Prisma.ProjectUncheckedUpdateManyWithoutMemoriesNestedInput
}

export type MemoryCreateWithoutProjectsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Creator: Prisma.UserCreateNestedOneWithoutMemoriesInput
  MemoryItems?: Prisma.MemoryItemCreateNestedManyWithoutMemoryInput
}

export type MemoryUncheckedCreateWithoutProjectsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  MemoryItems?: Prisma.MemoryItemUncheckedCreateNestedManyWithoutMemoryInput
}

export type MemoryCreateOrConnectWithoutProjectsInput = {
  where: Prisma.MemoryWhereUniqueInput
  create: Prisma.XOR<Prisma.MemoryCreateWithoutProjectsInput, Prisma.MemoryUncheckedCreateWithoutProjectsInput>
}

export type MemoryUpsertWithWhereUniqueWithoutProjectsInput = {
  where: Prisma.MemoryWhereUniqueInput
  update: Prisma.XOR<Prisma.MemoryUpdateWithoutProjectsInput, Prisma.MemoryUncheckedUpdateWithoutProjectsInput>
  create: Prisma.XOR<Prisma.MemoryCreateWithoutProjectsInput, Prisma.MemoryUncheckedCreateWithoutProjectsInput>
}

export type MemoryUpdateWithWhereUniqueWithoutProjectsInput = {
  where: Prisma.MemoryWhereUniqueInput
  data: Prisma.XOR<Prisma.MemoryUpdateWithoutProjectsInput, Prisma.MemoryUncheckedUpdateWithoutProjectsInput>
}

export type MemoryUpdateManyWithWhereWithoutProjectsInput = {
  where: Prisma.MemoryScalarWhereInput
  data: Prisma.XOR<Prisma.MemoryUpdateManyMutationInput, Prisma.MemoryUncheckedUpdateManyWithoutProjectsInput>
}

export type MemoryScalarWhereInput = {
  AND?: Prisma.MemoryScalarWhereInput | Prisma.MemoryScalarWhereInput[]
  OR?: Prisma.MemoryScalarWhereInput[]
  NOT?: Prisma.MemoryScalarWhereInput | Prisma.MemoryScalarWhereInput[]
  id?: Prisma.StringFilter<"Memory"> | string
  name?: Prisma.StringFilter<"Memory"> | string
  description?: Prisma.StringNullableFilter<"Memory"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Memory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Memory"> | Date | string
  creatorId?: Prisma.StringFilter<"Memory"> | string
}

export type MemoryCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  MemoryItems?: Prisma.MemoryItemCreateNestedManyWithoutMemoryInput
  Projects?: Prisma.ProjectCreateNestedManyWithoutMemoriesInput
}

export type MemoryUncheckedCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  MemoryItems?: Prisma.MemoryItemUncheckedCreateNestedManyWithoutMemoryInput
  Projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutMemoriesInput
}

export type MemoryCreateOrConnectWithoutCreatorInput = {
  where: Prisma.MemoryWhereUniqueInput
  create: Prisma.XOR<Prisma.MemoryCreateWithoutCreatorInput, Prisma.MemoryUncheckedCreateWithoutCreatorInput>
}

export type MemoryCreateManyCreatorInputEnvelope = {
  data: Prisma.MemoryCreateManyCreatorInput | Prisma.MemoryCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type MemoryUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.MemoryWhereUniqueInput
  update: Prisma.XOR<Prisma.MemoryUpdateWithoutCreatorInput, Prisma.MemoryUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.MemoryCreateWithoutCreatorInput, Prisma.MemoryUncheckedCreateWithoutCreatorInput>
}

export type MemoryUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.MemoryWhereUniqueInput
  data: Prisma.XOR<Prisma.MemoryUpdateWithoutCreatorInput, Prisma.MemoryUncheckedUpdateWithoutCreatorInput>
}

export type MemoryUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.MemoryScalarWhereInput
  data: Prisma.XOR<Prisma.MemoryUpdateManyMutationInput, Prisma.MemoryUncheckedUpdateManyWithoutCreatorInput>
}

export type MemoryUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Creator?: Prisma.UserUpdateOneRequiredWithoutMemoriesNestedInput
  MemoryItems?: Prisma.MemoryItemUpdateManyWithoutMemoryNestedInput
}

export type MemoryUncheckedUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  MemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutMemoryNestedInput
}

export type MemoryUncheckedUpdateManyWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MemoryCreateManyCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MemoryUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  MemoryItems?: Prisma.MemoryItemUpdateManyWithoutMemoryNestedInput
  Projects?: Prisma.ProjectUpdateManyWithoutMemoriesNestedInput
}

export type MemoryUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  MemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutMemoryNestedInput
  Projects?: Prisma.ProjectUncheckedUpdateManyWithoutMemoriesNestedInput
}

export type MemoryUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MemoryCountOutputType
 */

export type MemoryCountOutputType = {
  MemoryItems: number
  Projects: number
}

export type MemoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MemoryItems?: boolean | MemoryCountOutputTypeCountMemoryItemsArgs
  Projects?: boolean | MemoryCountOutputTypeCountProjectsArgs
}

/**
 * MemoryCountOutputType without action
 */
export type MemoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MemoryCountOutputType
   */
  select?: Prisma.MemoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MemoryCountOutputType without action
 */
export type MemoryCountOutputTypeCountMemoryItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MemoryItemWhereInput
}

/**
 * MemoryCountOutputType without action
 */
export type MemoryCountOutputTypeCountProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
}


export type MemorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  MemoryItems?: boolean | Prisma.Memory$MemoryItemsArgs<ExtArgs>
  Projects?: boolean | Prisma.Memory$ProjectsArgs<ExtArgs>
  _count?: boolean | Prisma.MemoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["memory"]>

export type MemorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["memory"]>

export type MemorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["memory"]>

export type MemorySelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
}

export type MemoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt" | "creatorId", ExtArgs["result"]["memory"]>
export type MemoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  MemoryItems?: boolean | Prisma.Memory$MemoryItemsArgs<ExtArgs>
  Projects?: boolean | Prisma.Memory$ProjectsArgs<ExtArgs>
  _count?: boolean | Prisma.MemoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type MemoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MemoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MemoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Memory"
  objects: {
    Creator: Prisma.$UserPayload<ExtArgs>
    MemoryItems: Prisma.$MemoryItemPayload<ExtArgs>[]
    Projects: Prisma.$ProjectPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    creatorId: string
  }, ExtArgs["result"]["memory"]>
  composites: {}
}

export type MemoryGetPayload<S extends boolean | null | undefined | MemoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MemoryPayload, S>

export type MemoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MemoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MemoryCountAggregateInputType | true
  }

export interface MemoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Memory'], meta: { name: 'Memory' } }
  /**
   * Find zero or one Memory that matches the filter.
   * @param {MemoryFindUniqueArgs} args - Arguments to find a Memory
   * @example
   * // Get one Memory
   * const memory = await prisma.memory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MemoryFindUniqueArgs>(args: Prisma.SelectSubset<T, MemoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MemoryClient<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Memory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MemoryFindUniqueOrThrowArgs} args - Arguments to find a Memory
   * @example
   * // Get one Memory
   * const memory = await prisma.memory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MemoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MemoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MemoryClient<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Memory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoryFindFirstArgs} args - Arguments to find a Memory
   * @example
   * // Get one Memory
   * const memory = await prisma.memory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MemoryFindFirstArgs>(args?: Prisma.SelectSubset<T, MemoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__MemoryClient<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Memory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoryFindFirstOrThrowArgs} args - Arguments to find a Memory
   * @example
   * // Get one Memory
   * const memory = await prisma.memory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MemoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MemoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MemoryClient<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Memories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Memories
   * const memories = await prisma.memory.findMany()
   * 
   * // Get first 10 Memories
   * const memories = await prisma.memory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const memoryWithIdOnly = await prisma.memory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MemoryFindManyArgs>(args?: Prisma.SelectSubset<T, MemoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Memory.
   * @param {MemoryCreateArgs} args - Arguments to create a Memory.
   * @example
   * // Create one Memory
   * const Memory = await prisma.memory.create({
   *   data: {
   *     // ... data to create a Memory
   *   }
   * })
   * 
   */
  create<T extends MemoryCreateArgs>(args: Prisma.SelectSubset<T, MemoryCreateArgs<ExtArgs>>): Prisma.Prisma__MemoryClient<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Memories.
   * @param {MemoryCreateManyArgs} args - Arguments to create many Memories.
   * @example
   * // Create many Memories
   * const memory = await prisma.memory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MemoryCreateManyArgs>(args?: Prisma.SelectSubset<T, MemoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Memories and returns the data saved in the database.
   * @param {MemoryCreateManyAndReturnArgs} args - Arguments to create many Memories.
   * @example
   * // Create many Memories
   * const memory = await prisma.memory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Memories and only return the `id`
   * const memoryWithIdOnly = await prisma.memory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MemoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MemoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Memory.
   * @param {MemoryDeleteArgs} args - Arguments to delete one Memory.
   * @example
   * // Delete one Memory
   * const Memory = await prisma.memory.delete({
   *   where: {
   *     // ... filter to delete one Memory
   *   }
   * })
   * 
   */
  delete<T extends MemoryDeleteArgs>(args: Prisma.SelectSubset<T, MemoryDeleteArgs<ExtArgs>>): Prisma.Prisma__MemoryClient<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Memory.
   * @param {MemoryUpdateArgs} args - Arguments to update one Memory.
   * @example
   * // Update one Memory
   * const memory = await prisma.memory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MemoryUpdateArgs>(args: Prisma.SelectSubset<T, MemoryUpdateArgs<ExtArgs>>): Prisma.Prisma__MemoryClient<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Memories.
   * @param {MemoryDeleteManyArgs} args - Arguments to filter Memories to delete.
   * @example
   * // Delete a few Memories
   * const { count } = await prisma.memory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MemoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, MemoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Memories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Memories
   * const memory = await prisma.memory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MemoryUpdateManyArgs>(args: Prisma.SelectSubset<T, MemoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Memories and returns the data updated in the database.
   * @param {MemoryUpdateManyAndReturnArgs} args - Arguments to update many Memories.
   * @example
   * // Update many Memories
   * const memory = await prisma.memory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Memories and only return the `id`
   * const memoryWithIdOnly = await prisma.memory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MemoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MemoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Memory.
   * @param {MemoryUpsertArgs} args - Arguments to update or create a Memory.
   * @example
   * // Update or create a Memory
   * const memory = await prisma.memory.upsert({
   *   create: {
   *     // ... data to create a Memory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Memory we want to update
   *   }
   * })
   */
  upsert<T extends MemoryUpsertArgs>(args: Prisma.SelectSubset<T, MemoryUpsertArgs<ExtArgs>>): Prisma.Prisma__MemoryClient<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Memories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoryCountArgs} args - Arguments to filter Memories to count.
   * @example
   * // Count the number of Memories
   * const count = await prisma.memory.count({
   *   where: {
   *     // ... the filter for the Memories we want to count
   *   }
   * })
  **/
  count<T extends MemoryCountArgs>(
    args?: Prisma.Subset<T, MemoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MemoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Memory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MemoryAggregateArgs>(args: Prisma.Subset<T, MemoryAggregateArgs>): Prisma.PrismaPromise<GetMemoryAggregateType<T>>

  /**
   * Group by Memory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MemoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MemoryGroupByArgs['orderBy'] }
      : { orderBy?: MemoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MemoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Memory model
 */
readonly fields: MemoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Memory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MemoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  MemoryItems<T extends Prisma.Memory$MemoryItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Memory$MemoryItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Projects<T extends Prisma.Memory$ProjectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Memory$ProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Memory model
 */
export interface MemoryFieldRefs {
  readonly id: Prisma.FieldRef<"Memory", 'String'>
  readonly name: Prisma.FieldRef<"Memory", 'String'>
  readonly description: Prisma.FieldRef<"Memory", 'String'>
  readonly createdAt: Prisma.FieldRef<"Memory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Memory", 'DateTime'>
  readonly creatorId: Prisma.FieldRef<"Memory", 'String'>
}
    

// Custom InputTypes
/**
 * Memory findUnique
 */
export type MemoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * Filter, which Memory to fetch.
   */
  where: Prisma.MemoryWhereUniqueInput
}

/**
 * Memory findUniqueOrThrow
 */
export type MemoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * Filter, which Memory to fetch.
   */
  where: Prisma.MemoryWhereUniqueInput
}

/**
 * Memory findFirst
 */
export type MemoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * Filter, which Memory to fetch.
   */
  where?: Prisma.MemoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Memories to fetch.
   */
  orderBy?: Prisma.MemoryOrderByWithRelationInput | Prisma.MemoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Memories.
   */
  cursor?: Prisma.MemoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Memories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Memories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Memories.
   */
  distinct?: Prisma.MemoryScalarFieldEnum | Prisma.MemoryScalarFieldEnum[]
}

/**
 * Memory findFirstOrThrow
 */
export type MemoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * Filter, which Memory to fetch.
   */
  where?: Prisma.MemoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Memories to fetch.
   */
  orderBy?: Prisma.MemoryOrderByWithRelationInput | Prisma.MemoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Memories.
   */
  cursor?: Prisma.MemoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Memories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Memories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Memories.
   */
  distinct?: Prisma.MemoryScalarFieldEnum | Prisma.MemoryScalarFieldEnum[]
}

/**
 * Memory findMany
 */
export type MemoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * Filter, which Memories to fetch.
   */
  where?: Prisma.MemoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Memories to fetch.
   */
  orderBy?: Prisma.MemoryOrderByWithRelationInput | Prisma.MemoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Memories.
   */
  cursor?: Prisma.MemoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Memories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Memories.
   */
  skip?: number
  distinct?: Prisma.MemoryScalarFieldEnum | Prisma.MemoryScalarFieldEnum[]
}

/**
 * Memory create
 */
export type MemoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * The data needed to create a Memory.
   */
  data: Prisma.XOR<Prisma.MemoryCreateInput, Prisma.MemoryUncheckedCreateInput>
}

/**
 * Memory createMany
 */
export type MemoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Memories.
   */
  data: Prisma.MemoryCreateManyInput | Prisma.MemoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Memory createManyAndReturn
 */
export type MemoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * The data used to create many Memories.
   */
  data: Prisma.MemoryCreateManyInput | Prisma.MemoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Memory update
 */
export type MemoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * The data needed to update a Memory.
   */
  data: Prisma.XOR<Prisma.MemoryUpdateInput, Prisma.MemoryUncheckedUpdateInput>
  /**
   * Choose, which Memory to update.
   */
  where: Prisma.MemoryWhereUniqueInput
}

/**
 * Memory updateMany
 */
export type MemoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Memories.
   */
  data: Prisma.XOR<Prisma.MemoryUpdateManyMutationInput, Prisma.MemoryUncheckedUpdateManyInput>
  /**
   * Filter which Memories to update
   */
  where?: Prisma.MemoryWhereInput
  /**
   * Limit how many Memories to update.
   */
  limit?: number
}

/**
 * Memory updateManyAndReturn
 */
export type MemoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * The data used to update Memories.
   */
  data: Prisma.XOR<Prisma.MemoryUpdateManyMutationInput, Prisma.MemoryUncheckedUpdateManyInput>
  /**
   * Filter which Memories to update
   */
  where?: Prisma.MemoryWhereInput
  /**
   * Limit how many Memories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Memory upsert
 */
export type MemoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * The filter to search for the Memory to update in case it exists.
   */
  where: Prisma.MemoryWhereUniqueInput
  /**
   * In case the Memory found by the `where` argument doesn't exist, create a new Memory with this data.
   */
  create: Prisma.XOR<Prisma.MemoryCreateInput, Prisma.MemoryUncheckedCreateInput>
  /**
   * In case the Memory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MemoryUpdateInput, Prisma.MemoryUncheckedUpdateInput>
}

/**
 * Memory delete
 */
export type MemoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  /**
   * Filter which Memory to delete.
   */
  where: Prisma.MemoryWhereUniqueInput
}

/**
 * Memory deleteMany
 */
export type MemoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Memories to delete
   */
  where?: Prisma.MemoryWhereInput
  /**
   * Limit how many Memories to delete.
   */
  limit?: number
}

/**
 * Memory.MemoryItems
 */
export type Memory$MemoryItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MemoryItem
   */
  select?: Prisma.MemoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MemoryItem
   */
  omit?: Prisma.MemoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryItemInclude<ExtArgs> | null
  where?: Prisma.MemoryItemWhereInput
  orderBy?: Prisma.MemoryItemOrderByWithRelationInput | Prisma.MemoryItemOrderByWithRelationInput[]
  cursor?: Prisma.MemoryItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MemoryItemScalarFieldEnum | Prisma.MemoryItemScalarFieldEnum[]
}

/**
 * Memory.Projects
 */
export type Memory$ProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  cursor?: Prisma.ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Memory without action
 */
export type MemoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
}
