
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PluginVersion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PluginVersion
 * 
 */
export type PluginVersionModel = runtime.Types.Result.DefaultSelection<Prisma.$PluginVersionPayload>

export type AggregatePluginVersion = {
  _count: PluginVersionCountAggregateOutputType | null
  _avg: PluginVersionAvgAggregateOutputType | null
  _sum: PluginVersionSumAggregateOutputType | null
  _min: PluginVersionMinAggregateOutputType | null
  _max: PluginVersionMaxAggregateOutputType | null
}

export type PluginVersionAvgAggregateOutputType = {
  id: number | null
}

export type PluginVersionSumAggregateOutputType = {
  id: number | null
}

export type PluginVersionMinAggregateOutputType = {
  id: number | null
  version: string | null
  createdAt: Date | null
  updatedAt: Date | null
  pluginId: string | null
}

export type PluginVersionMaxAggregateOutputType = {
  id: number | null
  version: string | null
  createdAt: Date | null
  updatedAt: Date | null
  pluginId: string | null
}

export type PluginVersionCountAggregateOutputType = {
  id: number
  version: number
  createdAt: number
  updatedAt: number
  pluginId: number
  _all: number
}


export type PluginVersionAvgAggregateInputType = {
  id?: true
}

export type PluginVersionSumAggregateInputType = {
  id?: true
}

export type PluginVersionMinAggregateInputType = {
  id?: true
  version?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
}

export type PluginVersionMaxAggregateInputType = {
  id?: true
  version?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
}

export type PluginVersionCountAggregateInputType = {
  id?: true
  version?: true
  createdAt?: true
  updatedAt?: true
  pluginId?: true
  _all?: true
}

export type PluginVersionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginVersion to aggregate.
   */
  where?: Prisma.PluginVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginVersions to fetch.
   */
  orderBy?: Prisma.PluginVersionOrderByWithRelationInput | Prisma.PluginVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PluginVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PluginVersions
  **/
  _count?: true | PluginVersionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PluginVersionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PluginVersionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PluginVersionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PluginVersionMaxAggregateInputType
}

export type GetPluginVersionAggregateType<T extends PluginVersionAggregateArgs> = {
      [P in keyof T & keyof AggregatePluginVersion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePluginVersion[P]>
    : Prisma.GetScalarType<T[P], AggregatePluginVersion[P]>
}




export type PluginVersionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PluginVersionWhereInput
  orderBy?: Prisma.PluginVersionOrderByWithAggregationInput | Prisma.PluginVersionOrderByWithAggregationInput[]
  by: Prisma.PluginVersionScalarFieldEnum[] | Prisma.PluginVersionScalarFieldEnum
  having?: Prisma.PluginVersionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PluginVersionCountAggregateInputType | true
  _avg?: PluginVersionAvgAggregateInputType
  _sum?: PluginVersionSumAggregateInputType
  _min?: PluginVersionMinAggregateInputType
  _max?: PluginVersionMaxAggregateInputType
}

export type PluginVersionGroupByOutputType = {
  id: number
  version: string
  createdAt: Date
  updatedAt: Date
  pluginId: string
  _count: PluginVersionCountAggregateOutputType | null
  _avg: PluginVersionAvgAggregateOutputType | null
  _sum: PluginVersionSumAggregateOutputType | null
  _min: PluginVersionMinAggregateOutputType | null
  _max: PluginVersionMaxAggregateOutputType | null
}

type GetPluginVersionGroupByPayload<T extends PluginVersionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PluginVersionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PluginVersionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PluginVersionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PluginVersionGroupByOutputType[P]>
      }
    >
  > 



export type PluginVersionWhereInput = {
  AND?: Prisma.PluginVersionWhereInput | Prisma.PluginVersionWhereInput[]
  OR?: Prisma.PluginVersionWhereInput[]
  NOT?: Prisma.PluginVersionWhereInput | Prisma.PluginVersionWhereInput[]
  id?: Prisma.IntFilter<"PluginVersion"> | number
  version?: Prisma.StringFilter<"PluginVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"PluginVersion"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginVersion"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginVersion"> | string
  Plugin?: Prisma.XOR<Prisma.PluginScalarRelationFilter, Prisma.PluginWhereInput>
}

export type PluginVersionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  version?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
  Plugin?: Prisma.PluginOrderByWithRelationInput
  _relevance?: Prisma.PluginVersionOrderByRelevanceInput
}

export type PluginVersionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  pluginId_version?: Prisma.PluginVersionPluginIdVersionCompoundUniqueInput
  AND?: Prisma.PluginVersionWhereInput | Prisma.PluginVersionWhereInput[]
  OR?: Prisma.PluginVersionWhereInput[]
  NOT?: Prisma.PluginVersionWhereInput | Prisma.PluginVersionWhereInput[]
  version?: Prisma.StringFilter<"PluginVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"PluginVersion"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginVersion"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginVersion"> | string
  Plugin?: Prisma.XOR<Prisma.PluginScalarRelationFilter, Prisma.PluginWhereInput>
}, "id" | "pluginId_version">

export type PluginVersionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  version?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
  _count?: Prisma.PluginVersionCountOrderByAggregateInput
  _avg?: Prisma.PluginVersionAvgOrderByAggregateInput
  _max?: Prisma.PluginVersionMaxOrderByAggregateInput
  _min?: Prisma.PluginVersionMinOrderByAggregateInput
  _sum?: Prisma.PluginVersionSumOrderByAggregateInput
}

export type PluginVersionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PluginVersionScalarWhereWithAggregatesInput | Prisma.PluginVersionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PluginVersionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PluginVersionScalarWhereWithAggregatesInput | Prisma.PluginVersionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PluginVersion"> | number
  version?: Prisma.StringWithAggregatesFilter<"PluginVersion"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PluginVersion"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PluginVersion"> | Date | string
  pluginId?: Prisma.StringWithAggregatesFilter<"PluginVersion"> | string
}

export type PluginVersionCreateInput = {
  version: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Plugin: Prisma.PluginCreateNestedOneWithoutVersionsInput
}

export type PluginVersionUncheckedCreateInput = {
  id?: number
  version: string
  createdAt?: Date | string
  updatedAt?: Date | string
  pluginId: string
}

export type PluginVersionUpdateInput = {
  version?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Plugin?: Prisma.PluginUpdateOneRequiredWithoutVersionsNestedInput
}

export type PluginVersionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  version?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pluginId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginVersionCreateManyInput = {
  id?: number
  version: string
  createdAt?: Date | string
  updatedAt?: Date | string
  pluginId: string
}

export type PluginVersionUpdateManyMutationInput = {
  version?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginVersionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  version?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pluginId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginVersionListRelationFilter = {
  every?: Prisma.PluginVersionWhereInput
  some?: Prisma.PluginVersionWhereInput
  none?: Prisma.PluginVersionWhereInput
}

export type PluginVersionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PluginVersionOrderByRelevanceInput = {
  fields: Prisma.PluginVersionOrderByRelevanceFieldEnum | Prisma.PluginVersionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PluginVersionPluginIdVersionCompoundUniqueInput = {
  pluginId: string
  version: string
}

export type PluginVersionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  version?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginVersionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PluginVersionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  version?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginVersionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  version?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginVersionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PluginVersionCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginVersionCreateWithoutPluginInput, Prisma.PluginVersionUncheckedCreateWithoutPluginInput> | Prisma.PluginVersionCreateWithoutPluginInput[] | Prisma.PluginVersionUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginVersionCreateOrConnectWithoutPluginInput | Prisma.PluginVersionCreateOrConnectWithoutPluginInput[]
  createMany?: Prisma.PluginVersionCreateManyPluginInputEnvelope
  connect?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
}

export type PluginVersionUncheckedCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginVersionCreateWithoutPluginInput, Prisma.PluginVersionUncheckedCreateWithoutPluginInput> | Prisma.PluginVersionCreateWithoutPluginInput[] | Prisma.PluginVersionUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginVersionCreateOrConnectWithoutPluginInput | Prisma.PluginVersionCreateOrConnectWithoutPluginInput[]
  createMany?: Prisma.PluginVersionCreateManyPluginInputEnvelope
  connect?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
}

export type PluginVersionUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginVersionCreateWithoutPluginInput, Prisma.PluginVersionUncheckedCreateWithoutPluginInput> | Prisma.PluginVersionCreateWithoutPluginInput[] | Prisma.PluginVersionUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginVersionCreateOrConnectWithoutPluginInput | Prisma.PluginVersionCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginVersionUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginVersionUpsertWithWhereUniqueWithoutPluginInput[]
  createMany?: Prisma.PluginVersionCreateManyPluginInputEnvelope
  set?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
  disconnect?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
  delete?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
  connect?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
  update?: Prisma.PluginVersionUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginVersionUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginVersionUpdateManyWithWhereWithoutPluginInput | Prisma.PluginVersionUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginVersionScalarWhereInput | Prisma.PluginVersionScalarWhereInput[]
}

export type PluginVersionUncheckedUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginVersionCreateWithoutPluginInput, Prisma.PluginVersionUncheckedCreateWithoutPluginInput> | Prisma.PluginVersionCreateWithoutPluginInput[] | Prisma.PluginVersionUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginVersionCreateOrConnectWithoutPluginInput | Prisma.PluginVersionCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginVersionUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginVersionUpsertWithWhereUniqueWithoutPluginInput[]
  createMany?: Prisma.PluginVersionCreateManyPluginInputEnvelope
  set?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
  disconnect?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
  delete?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
  connect?: Prisma.PluginVersionWhereUniqueInput | Prisma.PluginVersionWhereUniqueInput[]
  update?: Prisma.PluginVersionUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginVersionUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginVersionUpdateManyWithWhereWithoutPluginInput | Prisma.PluginVersionUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginVersionScalarWhereInput | Prisma.PluginVersionScalarWhereInput[]
}

export type PluginVersionCreateWithoutPluginInput = {
  version: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginVersionUncheckedCreateWithoutPluginInput = {
  id?: number
  version: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginVersionCreateOrConnectWithoutPluginInput = {
  where: Prisma.PluginVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.PluginVersionCreateWithoutPluginInput, Prisma.PluginVersionUncheckedCreateWithoutPluginInput>
}

export type PluginVersionCreateManyPluginInputEnvelope = {
  data: Prisma.PluginVersionCreateManyPluginInput | Prisma.PluginVersionCreateManyPluginInput[]
  skipDuplicates?: boolean
}

export type PluginVersionUpsertWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginVersionWhereUniqueInput
  update: Prisma.XOR<Prisma.PluginVersionUpdateWithoutPluginInput, Prisma.PluginVersionUncheckedUpdateWithoutPluginInput>
  create: Prisma.XOR<Prisma.PluginVersionCreateWithoutPluginInput, Prisma.PluginVersionUncheckedCreateWithoutPluginInput>
}

export type PluginVersionUpdateWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginVersionWhereUniqueInput
  data: Prisma.XOR<Prisma.PluginVersionUpdateWithoutPluginInput, Prisma.PluginVersionUncheckedUpdateWithoutPluginInput>
}

export type PluginVersionUpdateManyWithWhereWithoutPluginInput = {
  where: Prisma.PluginVersionScalarWhereInput
  data: Prisma.XOR<Prisma.PluginVersionUpdateManyMutationInput, Prisma.PluginVersionUncheckedUpdateManyWithoutPluginInput>
}

export type PluginVersionScalarWhereInput = {
  AND?: Prisma.PluginVersionScalarWhereInput | Prisma.PluginVersionScalarWhereInput[]
  OR?: Prisma.PluginVersionScalarWhereInput[]
  NOT?: Prisma.PluginVersionScalarWhereInput | Prisma.PluginVersionScalarWhereInput[]
  id?: Prisma.IntFilter<"PluginVersion"> | number
  version?: Prisma.StringFilter<"PluginVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"PluginVersion"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginVersion"> | Date | string
  pluginId?: Prisma.StringFilter<"PluginVersion"> | string
}

export type PluginVersionCreateManyPluginInput = {
  id?: number
  version: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginVersionUpdateWithoutPluginInput = {
  version?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginVersionUncheckedUpdateWithoutPluginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  version?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginVersionUncheckedUpdateManyWithoutPluginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  version?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PluginVersionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  version?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginVersion"]>

export type PluginVersionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  version?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginVersion"]>

export type PluginVersionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  version?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginVersion"]>

export type PluginVersionSelectScalar = {
  id?: boolean
  version?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  pluginId?: boolean
}

export type PluginVersionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "version" | "createdAt" | "updatedAt" | "pluginId", ExtArgs["result"]["pluginVersion"]>
export type PluginVersionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}
export type PluginVersionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}
export type PluginVersionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}

export type $PluginVersionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PluginVersion"
  objects: {
    Plugin: Prisma.$PluginPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    version: string
    createdAt: Date
    updatedAt: Date
    pluginId: string
  }, ExtArgs["result"]["pluginVersion"]>
  composites: {}
}

export type PluginVersionGetPayload<S extends boolean | null | undefined | PluginVersionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload, S>

export type PluginVersionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PluginVersionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PluginVersionCountAggregateInputType | true
  }

export interface PluginVersionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PluginVersion'], meta: { name: 'PluginVersion' } }
  /**
   * Find zero or one PluginVersion that matches the filter.
   * @param {PluginVersionFindUniqueArgs} args - Arguments to find a PluginVersion
   * @example
   * // Get one PluginVersion
   * const pluginVersion = await prisma.pluginVersion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PluginVersionFindUniqueArgs>(args: Prisma.SelectSubset<T, PluginVersionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PluginVersionClient<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PluginVersion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PluginVersionFindUniqueOrThrowArgs} args - Arguments to find a PluginVersion
   * @example
   * // Get one PluginVersion
   * const pluginVersion = await prisma.pluginVersion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PluginVersionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PluginVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginVersionClient<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginVersion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginVersionFindFirstArgs} args - Arguments to find a PluginVersion
   * @example
   * // Get one PluginVersion
   * const pluginVersion = await prisma.pluginVersion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PluginVersionFindFirstArgs>(args?: Prisma.SelectSubset<T, PluginVersionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PluginVersionClient<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginVersion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginVersionFindFirstOrThrowArgs} args - Arguments to find a PluginVersion
   * @example
   * // Get one PluginVersion
   * const pluginVersion = await prisma.pluginVersion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PluginVersionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PluginVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginVersionClient<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PluginVersions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginVersionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PluginVersions
   * const pluginVersions = await prisma.pluginVersion.findMany()
   * 
   * // Get first 10 PluginVersions
   * const pluginVersions = await prisma.pluginVersion.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pluginVersionWithIdOnly = await prisma.pluginVersion.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PluginVersionFindManyArgs>(args?: Prisma.SelectSubset<T, PluginVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PluginVersion.
   * @param {PluginVersionCreateArgs} args - Arguments to create a PluginVersion.
   * @example
   * // Create one PluginVersion
   * const PluginVersion = await prisma.pluginVersion.create({
   *   data: {
   *     // ... data to create a PluginVersion
   *   }
   * })
   * 
   */
  create<T extends PluginVersionCreateArgs>(args: Prisma.SelectSubset<T, PluginVersionCreateArgs<ExtArgs>>): Prisma.Prisma__PluginVersionClient<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PluginVersions.
   * @param {PluginVersionCreateManyArgs} args - Arguments to create many PluginVersions.
   * @example
   * // Create many PluginVersions
   * const pluginVersion = await prisma.pluginVersion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PluginVersionCreateManyArgs>(args?: Prisma.SelectSubset<T, PluginVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PluginVersions and returns the data saved in the database.
   * @param {PluginVersionCreateManyAndReturnArgs} args - Arguments to create many PluginVersions.
   * @example
   * // Create many PluginVersions
   * const pluginVersion = await prisma.pluginVersion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PluginVersions and only return the `id`
   * const pluginVersionWithIdOnly = await prisma.pluginVersion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PluginVersionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PluginVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PluginVersion.
   * @param {PluginVersionDeleteArgs} args - Arguments to delete one PluginVersion.
   * @example
   * // Delete one PluginVersion
   * const PluginVersion = await prisma.pluginVersion.delete({
   *   where: {
   *     // ... filter to delete one PluginVersion
   *   }
   * })
   * 
   */
  delete<T extends PluginVersionDeleteArgs>(args: Prisma.SelectSubset<T, PluginVersionDeleteArgs<ExtArgs>>): Prisma.Prisma__PluginVersionClient<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PluginVersion.
   * @param {PluginVersionUpdateArgs} args - Arguments to update one PluginVersion.
   * @example
   * // Update one PluginVersion
   * const pluginVersion = await prisma.pluginVersion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PluginVersionUpdateArgs>(args: Prisma.SelectSubset<T, PluginVersionUpdateArgs<ExtArgs>>): Prisma.Prisma__PluginVersionClient<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PluginVersions.
   * @param {PluginVersionDeleteManyArgs} args - Arguments to filter PluginVersions to delete.
   * @example
   * // Delete a few PluginVersions
   * const { count } = await prisma.pluginVersion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PluginVersionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PluginVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginVersionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PluginVersions
   * const pluginVersion = await prisma.pluginVersion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PluginVersionUpdateManyArgs>(args: Prisma.SelectSubset<T, PluginVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginVersions and returns the data updated in the database.
   * @param {PluginVersionUpdateManyAndReturnArgs} args - Arguments to update many PluginVersions.
   * @example
   * // Update many PluginVersions
   * const pluginVersion = await prisma.pluginVersion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PluginVersions and only return the `id`
   * const pluginVersionWithIdOnly = await prisma.pluginVersion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PluginVersionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PluginVersionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PluginVersion.
   * @param {PluginVersionUpsertArgs} args - Arguments to update or create a PluginVersion.
   * @example
   * // Update or create a PluginVersion
   * const pluginVersion = await prisma.pluginVersion.upsert({
   *   create: {
   *     // ... data to create a PluginVersion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PluginVersion we want to update
   *   }
   * })
   */
  upsert<T extends PluginVersionUpsertArgs>(args: Prisma.SelectSubset<T, PluginVersionUpsertArgs<ExtArgs>>): Prisma.Prisma__PluginVersionClient<runtime.Types.Result.GetResult<Prisma.$PluginVersionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PluginVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginVersionCountArgs} args - Arguments to filter PluginVersions to count.
   * @example
   * // Count the number of PluginVersions
   * const count = await prisma.pluginVersion.count({
   *   where: {
   *     // ... the filter for the PluginVersions we want to count
   *   }
   * })
  **/
  count<T extends PluginVersionCountArgs>(
    args?: Prisma.Subset<T, PluginVersionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PluginVersionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PluginVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PluginVersionAggregateArgs>(args: Prisma.Subset<T, PluginVersionAggregateArgs>): Prisma.PrismaPromise<GetPluginVersionAggregateType<T>>

  /**
   * Group by PluginVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginVersionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PluginVersionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PluginVersionGroupByArgs['orderBy'] }
      : { orderBy?: PluginVersionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PluginVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPluginVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PluginVersion model
 */
readonly fields: PluginVersionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PluginVersion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PluginVersionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Plugin<T extends Prisma.PluginDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PluginDefaultArgs<ExtArgs>>): Prisma.Prisma__PluginClient<runtime.Types.Result.GetResult<Prisma.$PluginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PluginVersion model
 */
export interface PluginVersionFieldRefs {
  readonly id: Prisma.FieldRef<"PluginVersion", 'Int'>
  readonly version: Prisma.FieldRef<"PluginVersion", 'String'>
  readonly createdAt: Prisma.FieldRef<"PluginVersion", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PluginVersion", 'DateTime'>
  readonly pluginId: Prisma.FieldRef<"PluginVersion", 'String'>
}
    

// Custom InputTypes
/**
 * PluginVersion findUnique
 */
export type PluginVersionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * Filter, which PluginVersion to fetch.
   */
  where: Prisma.PluginVersionWhereUniqueInput
}

/**
 * PluginVersion findUniqueOrThrow
 */
export type PluginVersionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * Filter, which PluginVersion to fetch.
   */
  where: Prisma.PluginVersionWhereUniqueInput
}

/**
 * PluginVersion findFirst
 */
export type PluginVersionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * Filter, which PluginVersion to fetch.
   */
  where?: Prisma.PluginVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginVersions to fetch.
   */
  orderBy?: Prisma.PluginVersionOrderByWithRelationInput | Prisma.PluginVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginVersions.
   */
  cursor?: Prisma.PluginVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginVersions.
   */
  distinct?: Prisma.PluginVersionScalarFieldEnum | Prisma.PluginVersionScalarFieldEnum[]
}

/**
 * PluginVersion findFirstOrThrow
 */
export type PluginVersionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * Filter, which PluginVersion to fetch.
   */
  where?: Prisma.PluginVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginVersions to fetch.
   */
  orderBy?: Prisma.PluginVersionOrderByWithRelationInput | Prisma.PluginVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginVersions.
   */
  cursor?: Prisma.PluginVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginVersions.
   */
  distinct?: Prisma.PluginVersionScalarFieldEnum | Prisma.PluginVersionScalarFieldEnum[]
}

/**
 * PluginVersion findMany
 */
export type PluginVersionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * Filter, which PluginVersions to fetch.
   */
  where?: Prisma.PluginVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginVersions to fetch.
   */
  orderBy?: Prisma.PluginVersionOrderByWithRelationInput | Prisma.PluginVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PluginVersions.
   */
  cursor?: Prisma.PluginVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginVersions.
   */
  skip?: number
  distinct?: Prisma.PluginVersionScalarFieldEnum | Prisma.PluginVersionScalarFieldEnum[]
}

/**
 * PluginVersion create
 */
export type PluginVersionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * The data needed to create a PluginVersion.
   */
  data: Prisma.XOR<Prisma.PluginVersionCreateInput, Prisma.PluginVersionUncheckedCreateInput>
}

/**
 * PluginVersion createMany
 */
export type PluginVersionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PluginVersions.
   */
  data: Prisma.PluginVersionCreateManyInput | Prisma.PluginVersionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PluginVersion createManyAndReturn
 */
export type PluginVersionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * The data used to create many PluginVersions.
   */
  data: Prisma.PluginVersionCreateManyInput | Prisma.PluginVersionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PluginVersion update
 */
export type PluginVersionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * The data needed to update a PluginVersion.
   */
  data: Prisma.XOR<Prisma.PluginVersionUpdateInput, Prisma.PluginVersionUncheckedUpdateInput>
  /**
   * Choose, which PluginVersion to update.
   */
  where: Prisma.PluginVersionWhereUniqueInput
}

/**
 * PluginVersion updateMany
 */
export type PluginVersionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PluginVersions.
   */
  data: Prisma.XOR<Prisma.PluginVersionUpdateManyMutationInput, Prisma.PluginVersionUncheckedUpdateManyInput>
  /**
   * Filter which PluginVersions to update
   */
  where?: Prisma.PluginVersionWhereInput
  /**
   * Limit how many PluginVersions to update.
   */
  limit?: number
}

/**
 * PluginVersion updateManyAndReturn
 */
export type PluginVersionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * The data used to update PluginVersions.
   */
  data: Prisma.XOR<Prisma.PluginVersionUpdateManyMutationInput, Prisma.PluginVersionUncheckedUpdateManyInput>
  /**
   * Filter which PluginVersions to update
   */
  where?: Prisma.PluginVersionWhereInput
  /**
   * Limit how many PluginVersions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PluginVersion upsert
 */
export type PluginVersionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * The filter to search for the PluginVersion to update in case it exists.
   */
  where: Prisma.PluginVersionWhereUniqueInput
  /**
   * In case the PluginVersion found by the `where` argument doesn't exist, create a new PluginVersion with this data.
   */
  create: Prisma.XOR<Prisma.PluginVersionCreateInput, Prisma.PluginVersionUncheckedCreateInput>
  /**
   * In case the PluginVersion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PluginVersionUpdateInput, Prisma.PluginVersionUncheckedUpdateInput>
}

/**
 * PluginVersion delete
 */
export type PluginVersionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
  /**
   * Filter which PluginVersion to delete.
   */
  where: Prisma.PluginVersionWhereUniqueInput
}

/**
 * PluginVersion deleteMany
 */
export type PluginVersionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginVersions to delete
   */
  where?: Prisma.PluginVersionWhereInput
  /**
   * Limit how many PluginVersions to delete.
   */
  limit?: number
}

/**
 * PluginVersion without action
 */
export type PluginVersionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginVersion
   */
  select?: Prisma.PluginVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginVersion
   */
  omit?: Prisma.PluginVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginVersionInclude<ExtArgs> | null
}
