
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Vector` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Vector
 * 
 */
export type VectorModel = runtime.Types.Result.DefaultSelection<Prisma.$VectorPayload>

export type AggregateVector = {
  _count: VectorCountAggregateOutputType | null
  _avg: VectorAvgAggregateOutputType | null
  _sum: VectorSumAggregateOutputType | null
  _min: VectorMinAggregateOutputType | null
  _max: VectorMaxAggregateOutputType | null
}

export type VectorAvgAggregateOutputType = {
  id: number | null
}

export type VectorSumAggregateOutputType = {
  id: number | null
}

export type VectorMinAggregateOutputType = {
  id: number | null
}

export type VectorMaxAggregateOutputType = {
  id: number | null
}

export type VectorCountAggregateOutputType = {
  id: number
  _all: number
}


export type VectorAvgAggregateInputType = {
  id?: true
}

export type VectorSumAggregateInputType = {
  id?: true
}

export type VectorMinAggregateInputType = {
  id?: true
}

export type VectorMaxAggregateInputType = {
  id?: true
}

export type VectorCountAggregateInputType = {
  id?: true
  _all?: true
}

export type VectorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Vector to aggregate.
   */
  where?: Prisma.VectorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vectors to fetch.
   */
  orderBy?: Prisma.VectorOrderByWithRelationInput | Prisma.VectorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VectorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vectors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vectors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Vectors
  **/
  _count?: true | VectorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: VectorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: VectorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VectorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VectorMaxAggregateInputType
}

export type GetVectorAggregateType<T extends VectorAggregateArgs> = {
      [P in keyof T & keyof AggregateVector]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVector[P]>
    : Prisma.GetScalarType<T[P], AggregateVector[P]>
}




export type VectorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VectorWhereInput
  orderBy?: Prisma.VectorOrderByWithAggregationInput | Prisma.VectorOrderByWithAggregationInput[]
  by: Prisma.VectorScalarFieldEnum[] | Prisma.VectorScalarFieldEnum
  having?: Prisma.VectorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VectorCountAggregateInputType | true
  _avg?: VectorAvgAggregateInputType
  _sum?: VectorSumAggregateInputType
  _min?: VectorMinAggregateInputType
  _max?: VectorMaxAggregateInputType
}

export type VectorGroupByOutputType = {
  id: number
  _count: VectorCountAggregateOutputType | null
  _avg: VectorAvgAggregateOutputType | null
  _sum: VectorSumAggregateOutputType | null
  _min: VectorMinAggregateOutputType | null
  _max: VectorMaxAggregateOutputType | null
}

type GetVectorGroupByPayload<T extends VectorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VectorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VectorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VectorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VectorGroupByOutputType[P]>
      }
    >
  > 



export type VectorWhereInput = {
  AND?: Prisma.VectorWhereInput | Prisma.VectorWhereInput[]
  OR?: Prisma.VectorWhereInput[]
  NOT?: Prisma.VectorWhereInput | Prisma.VectorWhereInput[]
  id?: Prisma.IntFilter<"Vector"> | number
  TranslatableElements?: Prisma.TranslatableElementListRelationFilter
  SourceMemoryItems?: Prisma.MemoryItemListRelationFilter
  TranslationMemoryItems?: Prisma.MemoryItemListRelationFilter
  Translations?: Prisma.TranslationListRelationFilter
}

export type VectorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  TranslatableElements?: Prisma.TranslatableElementOrderByRelationAggregateInput
  SourceMemoryItems?: Prisma.MemoryItemOrderByRelationAggregateInput
  TranslationMemoryItems?: Prisma.MemoryItemOrderByRelationAggregateInput
  Translations?: Prisma.TranslationOrderByRelationAggregateInput
}

export type VectorWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.VectorWhereInput | Prisma.VectorWhereInput[]
  OR?: Prisma.VectorWhereInput[]
  NOT?: Prisma.VectorWhereInput | Prisma.VectorWhereInput[]
  TranslatableElements?: Prisma.TranslatableElementListRelationFilter
  SourceMemoryItems?: Prisma.MemoryItemListRelationFilter
  TranslationMemoryItems?: Prisma.MemoryItemListRelationFilter
  Translations?: Prisma.TranslationListRelationFilter
}, "id">

export type VectorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  _count?: Prisma.VectorCountOrderByAggregateInput
  _avg?: Prisma.VectorAvgOrderByAggregateInput
  _max?: Prisma.VectorMaxOrderByAggregateInput
  _min?: Prisma.VectorMinOrderByAggregateInput
  _sum?: Prisma.VectorSumOrderByAggregateInput
}

export type VectorScalarWhereWithAggregatesInput = {
  AND?: Prisma.VectorScalarWhereWithAggregatesInput | Prisma.VectorScalarWhereWithAggregatesInput[]
  OR?: Prisma.VectorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VectorScalarWhereWithAggregatesInput | Prisma.VectorScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Vector"> | number
}

export type VectorUpdateInput = {
  TranslatableElements?: Prisma.TranslatableElementUpdateManyWithoutEmbeddingNestedInput
  SourceMemoryItems?: Prisma.MemoryItemUpdateManyWithoutSourceEmbeddingNestedInput
  TranslationMemoryItems?: Prisma.MemoryItemUpdateManyWithoutTranslationEmbeddingNestedInput
  Translations?: Prisma.TranslationUpdateManyWithoutEmbeddingNestedInput
}

export type VectorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  TranslatableElements?: Prisma.TranslatableElementUncheckedUpdateManyWithoutEmbeddingNestedInput
  SourceMemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutSourceEmbeddingNestedInput
  TranslationMemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutTranslationEmbeddingNestedInput
  Translations?: Prisma.TranslationUncheckedUpdateManyWithoutEmbeddingNestedInput
}

export type VectorUpdateManyMutationInput = {

}

export type VectorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type VectorScalarRelationFilter = {
  is?: Prisma.VectorWhereInput
  isNot?: Prisma.VectorWhereInput
}

export type VectorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type VectorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type VectorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type VectorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type VectorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type VectorCreateNestedOneWithoutTranslatableElementsInput = {
  connect?: Prisma.VectorWhereUniqueInput
}

export type VectorUpdateOneRequiredWithoutTranslatableElementsNestedInput = {
  connect?: Prisma.VectorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VectorUpdateToOneWithWhereWithoutTranslatableElementsInput, Prisma.VectorUpdateWithoutTranslatableElementsInput>, Prisma.VectorUncheckedUpdateWithoutTranslatableElementsInput>
}

export type VectorCreateNestedOneWithoutSourceMemoryItemsInput = {
  connect?: Prisma.VectorWhereUniqueInput
}

export type VectorCreateNestedOneWithoutTranslationMemoryItemsInput = {
  connect?: Prisma.VectorWhereUniqueInput
}

export type VectorUpdateOneRequiredWithoutSourceMemoryItemsNestedInput = {
  connect?: Prisma.VectorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VectorUpdateToOneWithWhereWithoutSourceMemoryItemsInput, Prisma.VectorUpdateWithoutSourceMemoryItemsInput>, Prisma.VectorUncheckedUpdateWithoutSourceMemoryItemsInput>
}

export type VectorUpdateOneRequiredWithoutTranslationMemoryItemsNestedInput = {
  connect?: Prisma.VectorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VectorUpdateToOneWithWhereWithoutTranslationMemoryItemsInput, Prisma.VectorUpdateWithoutTranslationMemoryItemsInput>, Prisma.VectorUncheckedUpdateWithoutTranslationMemoryItemsInput>
}

export type VectorCreateNestedOneWithoutTranslationsInput = {
  connect?: Prisma.VectorWhereUniqueInput
}

export type VectorUpdateOneRequiredWithoutTranslationsNestedInput = {
  connect?: Prisma.VectorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VectorUpdateToOneWithWhereWithoutTranslationsInput, Prisma.VectorUpdateWithoutTranslationsInput>, Prisma.VectorUncheckedUpdateWithoutTranslationsInput>
}

export type VectorUpdateToOneWithWhereWithoutTranslatableElementsInput = {
  where?: Prisma.VectorWhereInput
  data: Prisma.XOR<Prisma.VectorUpdateWithoutTranslatableElementsInput, Prisma.VectorUncheckedUpdateWithoutTranslatableElementsInput>
}

export type VectorUpdateWithoutTranslatableElementsInput = {
  SourceMemoryItems?: Prisma.MemoryItemUpdateManyWithoutSourceEmbeddingNestedInput
  TranslationMemoryItems?: Prisma.MemoryItemUpdateManyWithoutTranslationEmbeddingNestedInput
  Translations?: Prisma.TranslationUpdateManyWithoutEmbeddingNestedInput
}

export type VectorUncheckedUpdateWithoutTranslatableElementsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  SourceMemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutSourceEmbeddingNestedInput
  TranslationMemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutTranslationEmbeddingNestedInput
  Translations?: Prisma.TranslationUncheckedUpdateManyWithoutEmbeddingNestedInput
}

export type VectorUpdateToOneWithWhereWithoutSourceMemoryItemsInput = {
  where?: Prisma.VectorWhereInput
  data: Prisma.XOR<Prisma.VectorUpdateWithoutSourceMemoryItemsInput, Prisma.VectorUncheckedUpdateWithoutSourceMemoryItemsInput>
}

export type VectorUpdateWithoutSourceMemoryItemsInput = {
  TranslatableElements?: Prisma.TranslatableElementUpdateManyWithoutEmbeddingNestedInput
  TranslationMemoryItems?: Prisma.MemoryItemUpdateManyWithoutTranslationEmbeddingNestedInput
  Translations?: Prisma.TranslationUpdateManyWithoutEmbeddingNestedInput
}

export type VectorUncheckedUpdateWithoutSourceMemoryItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  TranslatableElements?: Prisma.TranslatableElementUncheckedUpdateManyWithoutEmbeddingNestedInput
  TranslationMemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutTranslationEmbeddingNestedInput
  Translations?: Prisma.TranslationUncheckedUpdateManyWithoutEmbeddingNestedInput
}

export type VectorUpdateToOneWithWhereWithoutTranslationMemoryItemsInput = {
  where?: Prisma.VectorWhereInput
  data: Prisma.XOR<Prisma.VectorUpdateWithoutTranslationMemoryItemsInput, Prisma.VectorUncheckedUpdateWithoutTranslationMemoryItemsInput>
}

export type VectorUpdateWithoutTranslationMemoryItemsInput = {
  TranslatableElements?: Prisma.TranslatableElementUpdateManyWithoutEmbeddingNestedInput
  SourceMemoryItems?: Prisma.MemoryItemUpdateManyWithoutSourceEmbeddingNestedInput
  Translations?: Prisma.TranslationUpdateManyWithoutEmbeddingNestedInput
}

export type VectorUncheckedUpdateWithoutTranslationMemoryItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  TranslatableElements?: Prisma.TranslatableElementUncheckedUpdateManyWithoutEmbeddingNestedInput
  SourceMemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutSourceEmbeddingNestedInput
  Translations?: Prisma.TranslationUncheckedUpdateManyWithoutEmbeddingNestedInput
}

export type VectorUpdateToOneWithWhereWithoutTranslationsInput = {
  where?: Prisma.VectorWhereInput
  data: Prisma.XOR<Prisma.VectorUpdateWithoutTranslationsInput, Prisma.VectorUncheckedUpdateWithoutTranslationsInput>
}

export type VectorUpdateWithoutTranslationsInput = {
  TranslatableElements?: Prisma.TranslatableElementUpdateManyWithoutEmbeddingNestedInput
  SourceMemoryItems?: Prisma.MemoryItemUpdateManyWithoutSourceEmbeddingNestedInput
  TranslationMemoryItems?: Prisma.MemoryItemUpdateManyWithoutTranslationEmbeddingNestedInput
}

export type VectorUncheckedUpdateWithoutTranslationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  TranslatableElements?: Prisma.TranslatableElementUncheckedUpdateManyWithoutEmbeddingNestedInput
  SourceMemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutSourceEmbeddingNestedInput
  TranslationMemoryItems?: Prisma.MemoryItemUncheckedUpdateManyWithoutTranslationEmbeddingNestedInput
}


/**
 * Count Type VectorCountOutputType
 */

export type VectorCountOutputType = {
  TranslatableElements: number
  SourceMemoryItems: number
  TranslationMemoryItems: number
  Translations: number
}

export type VectorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TranslatableElements?: boolean | VectorCountOutputTypeCountTranslatableElementsArgs
  SourceMemoryItems?: boolean | VectorCountOutputTypeCountSourceMemoryItemsArgs
  TranslationMemoryItems?: boolean | VectorCountOutputTypeCountTranslationMemoryItemsArgs
  Translations?: boolean | VectorCountOutputTypeCountTranslationsArgs
}

/**
 * VectorCountOutputType without action
 */
export type VectorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VectorCountOutputType
   */
  select?: Prisma.VectorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * VectorCountOutputType without action
 */
export type VectorCountOutputTypeCountTranslatableElementsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TranslatableElementWhereInput
}

/**
 * VectorCountOutputType without action
 */
export type VectorCountOutputTypeCountSourceMemoryItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MemoryItemWhereInput
}

/**
 * VectorCountOutputType without action
 */
export type VectorCountOutputTypeCountTranslationMemoryItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MemoryItemWhereInput
}

/**
 * VectorCountOutputType without action
 */
export type VectorCountOutputTypeCountTranslationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TranslationWhereInput
}


export type VectorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  TranslatableElements?: boolean | Prisma.Vector$TranslatableElementsArgs<ExtArgs>
  SourceMemoryItems?: boolean | Prisma.Vector$SourceMemoryItemsArgs<ExtArgs>
  TranslationMemoryItems?: boolean | Prisma.Vector$TranslationMemoryItemsArgs<ExtArgs>
  Translations?: boolean | Prisma.Vector$TranslationsArgs<ExtArgs>
  _count?: boolean | Prisma.VectorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["vector"]>


export type VectorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
}, ExtArgs["result"]["vector"]>

export type VectorSelectScalar = {
  id?: boolean
}

export type VectorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id", ExtArgs["result"]["vector"]>
export type VectorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TranslatableElements?: boolean | Prisma.Vector$TranslatableElementsArgs<ExtArgs>
  SourceMemoryItems?: boolean | Prisma.Vector$SourceMemoryItemsArgs<ExtArgs>
  TranslationMemoryItems?: boolean | Prisma.Vector$TranslationMemoryItemsArgs<ExtArgs>
  Translations?: boolean | Prisma.Vector$TranslationsArgs<ExtArgs>
  _count?: boolean | Prisma.VectorCountOutputTypeDefaultArgs<ExtArgs>
}
export type VectorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $VectorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Vector"
  objects: {
    TranslatableElements: Prisma.$TranslatableElementPayload<ExtArgs>[]
    SourceMemoryItems: Prisma.$MemoryItemPayload<ExtArgs>[]
    TranslationMemoryItems: Prisma.$MemoryItemPayload<ExtArgs>[]
    Translations: Prisma.$TranslationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
  }, ExtArgs["result"]["vector"]>
  composites: {}
}

export type VectorGetPayload<S extends boolean | null | undefined | VectorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VectorPayload, S>

export type VectorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VectorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VectorCountAggregateInputType | true
  }

export interface VectorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vector'], meta: { name: 'Vector' } }
  /**
   * Find zero or one Vector that matches the filter.
   * @param {VectorFindUniqueArgs} args - Arguments to find a Vector
   * @example
   * // Get one Vector
   * const vector = await prisma.vector.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VectorFindUniqueArgs>(args: Prisma.SelectSubset<T, VectorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VectorClient<runtime.Types.Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Vector that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VectorFindUniqueOrThrowArgs} args - Arguments to find a Vector
   * @example
   * // Get one Vector
   * const vector = await prisma.vector.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VectorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VectorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VectorClient<runtime.Types.Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Vector that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VectorFindFirstArgs} args - Arguments to find a Vector
   * @example
   * // Get one Vector
   * const vector = await prisma.vector.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VectorFindFirstArgs>(args?: Prisma.SelectSubset<T, VectorFindFirstArgs<ExtArgs>>): Prisma.Prisma__VectorClient<runtime.Types.Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Vector that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VectorFindFirstOrThrowArgs} args - Arguments to find a Vector
   * @example
   * // Get one Vector
   * const vector = await prisma.vector.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VectorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VectorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VectorClient<runtime.Types.Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Vectors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VectorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Vectors
   * const vectors = await prisma.vector.findMany()
   * 
   * // Get first 10 Vectors
   * const vectors = await prisma.vector.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const vectorWithIdOnly = await prisma.vector.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VectorFindManyArgs>(args?: Prisma.SelectSubset<T, VectorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Delete a Vector.
   * @param {VectorDeleteArgs} args - Arguments to delete one Vector.
   * @example
   * // Delete one Vector
   * const Vector = await prisma.vector.delete({
   *   where: {
   *     // ... filter to delete one Vector
   *   }
   * })
   * 
   */
  delete<T extends VectorDeleteArgs>(args: Prisma.SelectSubset<T, VectorDeleteArgs<ExtArgs>>): Prisma.Prisma__VectorClient<runtime.Types.Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Vector.
   * @param {VectorUpdateArgs} args - Arguments to update one Vector.
   * @example
   * // Update one Vector
   * const vector = await prisma.vector.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VectorUpdateArgs>(args: Prisma.SelectSubset<T, VectorUpdateArgs<ExtArgs>>): Prisma.Prisma__VectorClient<runtime.Types.Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Vectors.
   * @param {VectorDeleteManyArgs} args - Arguments to filter Vectors to delete.
   * @example
   * // Delete a few Vectors
   * const { count } = await prisma.vector.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VectorDeleteManyArgs>(args?: Prisma.SelectSubset<T, VectorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Vectors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VectorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Vectors
   * const vector = await prisma.vector.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VectorUpdateManyArgs>(args: Prisma.SelectSubset<T, VectorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Vectors and returns the data updated in the database.
   * @param {VectorUpdateManyAndReturnArgs} args - Arguments to update many Vectors.
   * @example
   * // Update many Vectors
   * const vector = await prisma.vector.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Vectors and only return the `id`
   * const vectorWithIdOnly = await prisma.vector.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VectorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VectorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>


  /**
   * Count the number of Vectors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VectorCountArgs} args - Arguments to filter Vectors to count.
   * @example
   * // Count the number of Vectors
   * const count = await prisma.vector.count({
   *   where: {
   *     // ... the filter for the Vectors we want to count
   *   }
   * })
  **/
  count<T extends VectorCountArgs>(
    args?: Prisma.Subset<T, VectorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VectorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Vector.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VectorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VectorAggregateArgs>(args: Prisma.Subset<T, VectorAggregateArgs>): Prisma.PrismaPromise<GetVectorAggregateType<T>>

  /**
   * Group by Vector.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VectorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VectorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VectorGroupByArgs['orderBy'] }
      : { orderBy?: VectorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VectorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVectorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Vector model
 */
readonly fields: VectorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Vector.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VectorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  TranslatableElements<T extends Prisma.Vector$TranslatableElementsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Vector$TranslatableElementsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranslatableElementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  SourceMemoryItems<T extends Prisma.Vector$SourceMemoryItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Vector$SourceMemoryItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  TranslationMemoryItems<T extends Prisma.Vector$TranslationMemoryItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Vector$TranslationMemoryItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Translations<T extends Prisma.Vector$TranslationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Vector$TranslationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Vector model
 */
export interface VectorFieldRefs {
  readonly id: Prisma.FieldRef<"Vector", 'Int'>
}
    

// Custom InputTypes
/**
 * Vector findUnique
 */
export type VectorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VectorInclude<ExtArgs> | null
  /**
   * Filter, which Vector to fetch.
   */
  where: Prisma.VectorWhereUniqueInput
}

/**
 * Vector findUniqueOrThrow
 */
export type VectorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VectorInclude<ExtArgs> | null
  /**
   * Filter, which Vector to fetch.
   */
  where: Prisma.VectorWhereUniqueInput
}

/**
 * Vector findFirst
 */
export type VectorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VectorInclude<ExtArgs> | null
  /**
   * Filter, which Vector to fetch.
   */
  where?: Prisma.VectorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vectors to fetch.
   */
  orderBy?: Prisma.VectorOrderByWithRelationInput | Prisma.VectorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Vectors.
   */
  cursor?: Prisma.VectorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vectors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vectors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Vectors.
   */
  distinct?: Prisma.VectorScalarFieldEnum | Prisma.VectorScalarFieldEnum[]
}

/**
 * Vector findFirstOrThrow
 */
export type VectorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VectorInclude<ExtArgs> | null
  /**
   * Filter, which Vector to fetch.
   */
  where?: Prisma.VectorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vectors to fetch.
   */
  orderBy?: Prisma.VectorOrderByWithRelationInput | Prisma.VectorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Vectors.
   */
  cursor?: Prisma.VectorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vectors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vectors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Vectors.
   */
  distinct?: Prisma.VectorScalarFieldEnum | Prisma.VectorScalarFieldEnum[]
}

/**
 * Vector findMany
 */
export type VectorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VectorInclude<ExtArgs> | null
  /**
   * Filter, which Vectors to fetch.
   */
  where?: Prisma.VectorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vectors to fetch.
   */
  orderBy?: Prisma.VectorOrderByWithRelationInput | Prisma.VectorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Vectors.
   */
  cursor?: Prisma.VectorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vectors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vectors.
   */
  skip?: number
  distinct?: Prisma.VectorScalarFieldEnum | Prisma.VectorScalarFieldEnum[]
}

/**
 * Vector update
 */
export type VectorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VectorInclude<ExtArgs> | null
  /**
   * The data needed to update a Vector.
   */
  data: Prisma.XOR<Prisma.VectorUpdateInput, Prisma.VectorUncheckedUpdateInput>
  /**
   * Choose, which Vector to update.
   */
  where: Prisma.VectorWhereUniqueInput
}

/**
 * Vector updateMany
 */
export type VectorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Vectors.
   */
  data: Prisma.XOR<Prisma.VectorUpdateManyMutationInput, Prisma.VectorUncheckedUpdateManyInput>
  /**
   * Filter which Vectors to update
   */
  where?: Prisma.VectorWhereInput
  /**
   * Limit how many Vectors to update.
   */
  limit?: number
}

/**
 * Vector updateManyAndReturn
 */
export type VectorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * The data used to update Vectors.
   */
  data: Prisma.XOR<Prisma.VectorUpdateManyMutationInput, Prisma.VectorUncheckedUpdateManyInput>
  /**
   * Filter which Vectors to update
   */
  where?: Prisma.VectorWhereInput
  /**
   * Limit how many Vectors to update.
   */
  limit?: number
}

/**
 * Vector delete
 */
export type VectorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VectorInclude<ExtArgs> | null
  /**
   * Filter which Vector to delete.
   */
  where: Prisma.VectorWhereUniqueInput
}

/**
 * Vector deleteMany
 */
export type VectorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Vectors to delete
   */
  where?: Prisma.VectorWhereInput
  /**
   * Limit how many Vectors to delete.
   */
  limit?: number
}

/**
 * Vector.TranslatableElements
 */
export type Vector$TranslatableElementsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranslatableElement
   */
  select?: Prisma.TranslatableElementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranslatableElement
   */
  omit?: Prisma.TranslatableElementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TranslatableElementInclude<ExtArgs> | null
  where?: Prisma.TranslatableElementWhereInput
  orderBy?: Prisma.TranslatableElementOrderByWithRelationInput | Prisma.TranslatableElementOrderByWithRelationInput[]
  cursor?: Prisma.TranslatableElementWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TranslatableElementScalarFieldEnum | Prisma.TranslatableElementScalarFieldEnum[]
}

/**
 * Vector.SourceMemoryItems
 */
export type Vector$SourceMemoryItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MemoryItem
   */
  select?: Prisma.MemoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MemoryItem
   */
  omit?: Prisma.MemoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryItemInclude<ExtArgs> | null
  where?: Prisma.MemoryItemWhereInput
  orderBy?: Prisma.MemoryItemOrderByWithRelationInput | Prisma.MemoryItemOrderByWithRelationInput[]
  cursor?: Prisma.MemoryItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MemoryItemScalarFieldEnum | Prisma.MemoryItemScalarFieldEnum[]
}

/**
 * Vector.TranslationMemoryItems
 */
export type Vector$TranslationMemoryItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MemoryItem
   */
  select?: Prisma.MemoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MemoryItem
   */
  omit?: Prisma.MemoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryItemInclude<ExtArgs> | null
  where?: Prisma.MemoryItemWhereInput
  orderBy?: Prisma.MemoryItemOrderByWithRelationInput | Prisma.MemoryItemOrderByWithRelationInput[]
  cursor?: Prisma.MemoryItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MemoryItemScalarFieldEnum | Prisma.MemoryItemScalarFieldEnum[]
}

/**
 * Vector.Translations
 */
export type Vector$TranslationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Translation
   */
  select?: Prisma.TranslationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Translation
   */
  omit?: Prisma.TranslationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TranslationInclude<ExtArgs> | null
  where?: Prisma.TranslationWhereInput
  orderBy?: Prisma.TranslationOrderByWithRelationInput | Prisma.TranslationOrderByWithRelationInput[]
  cursor?: Prisma.TranslationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TranslationScalarFieldEnum | Prisma.TranslationScalarFieldEnum[]
}

/**
 * Vector without action
 */
export type VectorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vector
   */
  select?: Prisma.VectorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vector
   */
  omit?: Prisma.VectorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VectorInclude<ExtArgs> | null
}
