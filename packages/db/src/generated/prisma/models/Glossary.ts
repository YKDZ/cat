
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Glossary` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Glossary
 * 
 */
export type GlossaryModel = runtime.Types.Result.DefaultSelection<Prisma.$GlossaryPayload>

export type AggregateGlossary = {
  _count: GlossaryCountAggregateOutputType | null
  _min: GlossaryMinAggregateOutputType | null
  _max: GlossaryMaxAggregateOutputType | null
}

export type GlossaryMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  creatorId: string | null
}

export type GlossaryMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  creatorId: string | null
}

export type GlossaryCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  creatorId: number
  _all: number
}


export type GlossaryMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
}

export type GlossaryMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
}

export type GlossaryCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
  _all?: true
}

export type GlossaryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Glossary to aggregate.
   */
  where?: Prisma.GlossaryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Glossaries to fetch.
   */
  orderBy?: Prisma.GlossaryOrderByWithRelationInput | Prisma.GlossaryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GlossaryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Glossaries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Glossaries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Glossaries
  **/
  _count?: true | GlossaryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GlossaryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GlossaryMaxAggregateInputType
}

export type GetGlossaryAggregateType<T extends GlossaryAggregateArgs> = {
      [P in keyof T & keyof AggregateGlossary]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGlossary[P]>
    : Prisma.GetScalarType<T[P], AggregateGlossary[P]>
}




export type GlossaryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GlossaryWhereInput
  orderBy?: Prisma.GlossaryOrderByWithAggregationInput | Prisma.GlossaryOrderByWithAggregationInput[]
  by: Prisma.GlossaryScalarFieldEnum[] | Prisma.GlossaryScalarFieldEnum
  having?: Prisma.GlossaryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GlossaryCountAggregateInputType | true
  _min?: GlossaryMinAggregateInputType
  _max?: GlossaryMaxAggregateInputType
}

export type GlossaryGroupByOutputType = {
  id: string
  name: string
  description: string | null
  createdAt: Date
  updatedAt: Date
  creatorId: string
  _count: GlossaryCountAggregateOutputType | null
  _min: GlossaryMinAggregateOutputType | null
  _max: GlossaryMaxAggregateOutputType | null
}

type GetGlossaryGroupByPayload<T extends GlossaryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GlossaryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GlossaryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GlossaryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GlossaryGroupByOutputType[P]>
      }
    >
  > 



export type GlossaryWhereInput = {
  AND?: Prisma.GlossaryWhereInput | Prisma.GlossaryWhereInput[]
  OR?: Prisma.GlossaryWhereInput[]
  NOT?: Prisma.GlossaryWhereInput | Prisma.GlossaryWhereInput[]
  id?: Prisma.StringFilter<"Glossary"> | string
  name?: Prisma.StringFilter<"Glossary"> | string
  description?: Prisma.StringNullableFilter<"Glossary"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Glossary"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Glossary"> | Date | string
  creatorId?: Prisma.StringFilter<"Glossary"> | string
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Projects?: Prisma.ProjectListRelationFilter
  Terms?: Prisma.TermListRelationFilter
}

export type GlossaryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  Creator?: Prisma.UserOrderByWithRelationInput
  Projects?: Prisma.ProjectOrderByRelationAggregateInput
  Terms?: Prisma.TermOrderByRelationAggregateInput
  _relevance?: Prisma.GlossaryOrderByRelevanceInput
}

export type GlossaryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.GlossaryWhereInput | Prisma.GlossaryWhereInput[]
  OR?: Prisma.GlossaryWhereInput[]
  NOT?: Prisma.GlossaryWhereInput | Prisma.GlossaryWhereInput[]
  name?: Prisma.StringFilter<"Glossary"> | string
  description?: Prisma.StringNullableFilter<"Glossary"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Glossary"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Glossary"> | Date | string
  creatorId?: Prisma.StringFilter<"Glossary"> | string
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Projects?: Prisma.ProjectListRelationFilter
  Terms?: Prisma.TermListRelationFilter
}, "id">

export type GlossaryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  _count?: Prisma.GlossaryCountOrderByAggregateInput
  _max?: Prisma.GlossaryMaxOrderByAggregateInput
  _min?: Prisma.GlossaryMinOrderByAggregateInput
}

export type GlossaryScalarWhereWithAggregatesInput = {
  AND?: Prisma.GlossaryScalarWhereWithAggregatesInput | Prisma.GlossaryScalarWhereWithAggregatesInput[]
  OR?: Prisma.GlossaryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GlossaryScalarWhereWithAggregatesInput | Prisma.GlossaryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Glossary"> | string
  name?: Prisma.StringWithAggregatesFilter<"Glossary"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Glossary"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Glossary"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Glossary"> | Date | string
  creatorId?: Prisma.StringWithAggregatesFilter<"Glossary"> | string
}

export type GlossaryCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Creator: Prisma.UserCreateNestedOneWithoutGlossariesInput
  Projects?: Prisma.ProjectCreateNestedManyWithoutGlossariesInput
  Terms?: Prisma.TermCreateNestedManyWithoutGlossaryInput
}

export type GlossaryUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  Projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutGlossariesInput
  Terms?: Prisma.TermUncheckedCreateNestedManyWithoutGlossaryInput
}

export type GlossaryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Creator?: Prisma.UserUpdateOneRequiredWithoutGlossariesNestedInput
  Projects?: Prisma.ProjectUpdateManyWithoutGlossariesNestedInput
  Terms?: Prisma.TermUpdateManyWithoutGlossaryNestedInput
}

export type GlossaryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  Projects?: Prisma.ProjectUncheckedUpdateManyWithoutGlossariesNestedInput
  Terms?: Prisma.TermUncheckedUpdateManyWithoutGlossaryNestedInput
}

export type GlossaryCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
}

export type GlossaryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GlossaryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GlossaryOrderByRelevanceInput = {
  fields: Prisma.GlossaryOrderByRelevanceFieldEnum | Prisma.GlossaryOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type GlossaryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type GlossaryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type GlossaryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type GlossaryScalarRelationFilter = {
  is?: Prisma.GlossaryWhereInput
  isNot?: Prisma.GlossaryWhereInput
}

export type GlossaryListRelationFilter = {
  every?: Prisma.GlossaryWhereInput
  some?: Prisma.GlossaryWhereInput
  none?: Prisma.GlossaryWhereInput
}

export type GlossaryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type GlossaryCreateNestedOneWithoutTermsInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutTermsInput, Prisma.GlossaryUncheckedCreateWithoutTermsInput>
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutTermsInput
  connect?: Prisma.GlossaryWhereUniqueInput
}

export type GlossaryUpdateOneRequiredWithoutTermsNestedInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutTermsInput, Prisma.GlossaryUncheckedCreateWithoutTermsInput>
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutTermsInput
  upsert?: Prisma.GlossaryUpsertWithoutTermsInput
  connect?: Prisma.GlossaryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GlossaryUpdateToOneWithWhereWithoutTermsInput, Prisma.GlossaryUpdateWithoutTermsInput>, Prisma.GlossaryUncheckedUpdateWithoutTermsInput>
}

export type GlossaryCreateNestedManyWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutProjectsInput, Prisma.GlossaryUncheckedCreateWithoutProjectsInput> | Prisma.GlossaryCreateWithoutProjectsInput[] | Prisma.GlossaryUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutProjectsInput | Prisma.GlossaryCreateOrConnectWithoutProjectsInput[]
  connect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
}

export type GlossaryUncheckedCreateNestedManyWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutProjectsInput, Prisma.GlossaryUncheckedCreateWithoutProjectsInput> | Prisma.GlossaryCreateWithoutProjectsInput[] | Prisma.GlossaryUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutProjectsInput | Prisma.GlossaryCreateOrConnectWithoutProjectsInput[]
  connect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
}

export type GlossaryUpdateManyWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutProjectsInput, Prisma.GlossaryUncheckedCreateWithoutProjectsInput> | Prisma.GlossaryCreateWithoutProjectsInput[] | Prisma.GlossaryUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutProjectsInput | Prisma.GlossaryCreateOrConnectWithoutProjectsInput[]
  upsert?: Prisma.GlossaryUpsertWithWhereUniqueWithoutProjectsInput | Prisma.GlossaryUpsertWithWhereUniqueWithoutProjectsInput[]
  set?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  disconnect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  delete?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  connect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  update?: Prisma.GlossaryUpdateWithWhereUniqueWithoutProjectsInput | Prisma.GlossaryUpdateWithWhereUniqueWithoutProjectsInput[]
  updateMany?: Prisma.GlossaryUpdateManyWithWhereWithoutProjectsInput | Prisma.GlossaryUpdateManyWithWhereWithoutProjectsInput[]
  deleteMany?: Prisma.GlossaryScalarWhereInput | Prisma.GlossaryScalarWhereInput[]
}

export type GlossaryUncheckedUpdateManyWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutProjectsInput, Prisma.GlossaryUncheckedCreateWithoutProjectsInput> | Prisma.GlossaryCreateWithoutProjectsInput[] | Prisma.GlossaryUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutProjectsInput | Prisma.GlossaryCreateOrConnectWithoutProjectsInput[]
  upsert?: Prisma.GlossaryUpsertWithWhereUniqueWithoutProjectsInput | Prisma.GlossaryUpsertWithWhereUniqueWithoutProjectsInput[]
  set?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  disconnect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  delete?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  connect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  update?: Prisma.GlossaryUpdateWithWhereUniqueWithoutProjectsInput | Prisma.GlossaryUpdateWithWhereUniqueWithoutProjectsInput[]
  updateMany?: Prisma.GlossaryUpdateManyWithWhereWithoutProjectsInput | Prisma.GlossaryUpdateManyWithWhereWithoutProjectsInput[]
  deleteMany?: Prisma.GlossaryScalarWhereInput | Prisma.GlossaryScalarWhereInput[]
}

export type GlossaryCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutCreatorInput, Prisma.GlossaryUncheckedCreateWithoutCreatorInput> | Prisma.GlossaryCreateWithoutCreatorInput[] | Prisma.GlossaryUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutCreatorInput | Prisma.GlossaryCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.GlossaryCreateManyCreatorInputEnvelope
  connect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
}

export type GlossaryUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutCreatorInput, Prisma.GlossaryUncheckedCreateWithoutCreatorInput> | Prisma.GlossaryCreateWithoutCreatorInput[] | Prisma.GlossaryUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutCreatorInput | Prisma.GlossaryCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.GlossaryCreateManyCreatorInputEnvelope
  connect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
}

export type GlossaryUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutCreatorInput, Prisma.GlossaryUncheckedCreateWithoutCreatorInput> | Prisma.GlossaryCreateWithoutCreatorInput[] | Prisma.GlossaryUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutCreatorInput | Prisma.GlossaryCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.GlossaryUpsertWithWhereUniqueWithoutCreatorInput | Prisma.GlossaryUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.GlossaryCreateManyCreatorInputEnvelope
  set?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  disconnect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  delete?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  connect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  update?: Prisma.GlossaryUpdateWithWhereUniqueWithoutCreatorInput | Prisma.GlossaryUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.GlossaryUpdateManyWithWhereWithoutCreatorInput | Prisma.GlossaryUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.GlossaryScalarWhereInput | Prisma.GlossaryScalarWhereInput[]
}

export type GlossaryUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.GlossaryCreateWithoutCreatorInput, Prisma.GlossaryUncheckedCreateWithoutCreatorInput> | Prisma.GlossaryCreateWithoutCreatorInput[] | Prisma.GlossaryUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.GlossaryCreateOrConnectWithoutCreatorInput | Prisma.GlossaryCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.GlossaryUpsertWithWhereUniqueWithoutCreatorInput | Prisma.GlossaryUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.GlossaryCreateManyCreatorInputEnvelope
  set?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  disconnect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  delete?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  connect?: Prisma.GlossaryWhereUniqueInput | Prisma.GlossaryWhereUniqueInput[]
  update?: Prisma.GlossaryUpdateWithWhereUniqueWithoutCreatorInput | Prisma.GlossaryUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.GlossaryUpdateManyWithWhereWithoutCreatorInput | Prisma.GlossaryUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.GlossaryScalarWhereInput | Prisma.GlossaryScalarWhereInput[]
}

export type GlossaryCreateWithoutTermsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Creator: Prisma.UserCreateNestedOneWithoutGlossariesInput
  Projects?: Prisma.ProjectCreateNestedManyWithoutGlossariesInput
}

export type GlossaryUncheckedCreateWithoutTermsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  Projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutGlossariesInput
}

export type GlossaryCreateOrConnectWithoutTermsInput = {
  where: Prisma.GlossaryWhereUniqueInput
  create: Prisma.XOR<Prisma.GlossaryCreateWithoutTermsInput, Prisma.GlossaryUncheckedCreateWithoutTermsInput>
}

export type GlossaryUpsertWithoutTermsInput = {
  update: Prisma.XOR<Prisma.GlossaryUpdateWithoutTermsInput, Prisma.GlossaryUncheckedUpdateWithoutTermsInput>
  create: Prisma.XOR<Prisma.GlossaryCreateWithoutTermsInput, Prisma.GlossaryUncheckedCreateWithoutTermsInput>
  where?: Prisma.GlossaryWhereInput
}

export type GlossaryUpdateToOneWithWhereWithoutTermsInput = {
  where?: Prisma.GlossaryWhereInput
  data: Prisma.XOR<Prisma.GlossaryUpdateWithoutTermsInput, Prisma.GlossaryUncheckedUpdateWithoutTermsInput>
}

export type GlossaryUpdateWithoutTermsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Creator?: Prisma.UserUpdateOneRequiredWithoutGlossariesNestedInput
  Projects?: Prisma.ProjectUpdateManyWithoutGlossariesNestedInput
}

export type GlossaryUncheckedUpdateWithoutTermsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  Projects?: Prisma.ProjectUncheckedUpdateManyWithoutGlossariesNestedInput
}

export type GlossaryCreateWithoutProjectsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Creator: Prisma.UserCreateNestedOneWithoutGlossariesInput
  Terms?: Prisma.TermCreateNestedManyWithoutGlossaryInput
}

export type GlossaryUncheckedCreateWithoutProjectsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  Terms?: Prisma.TermUncheckedCreateNestedManyWithoutGlossaryInput
}

export type GlossaryCreateOrConnectWithoutProjectsInput = {
  where: Prisma.GlossaryWhereUniqueInput
  create: Prisma.XOR<Prisma.GlossaryCreateWithoutProjectsInput, Prisma.GlossaryUncheckedCreateWithoutProjectsInput>
}

export type GlossaryUpsertWithWhereUniqueWithoutProjectsInput = {
  where: Prisma.GlossaryWhereUniqueInput
  update: Prisma.XOR<Prisma.GlossaryUpdateWithoutProjectsInput, Prisma.GlossaryUncheckedUpdateWithoutProjectsInput>
  create: Prisma.XOR<Prisma.GlossaryCreateWithoutProjectsInput, Prisma.GlossaryUncheckedCreateWithoutProjectsInput>
}

export type GlossaryUpdateWithWhereUniqueWithoutProjectsInput = {
  where: Prisma.GlossaryWhereUniqueInput
  data: Prisma.XOR<Prisma.GlossaryUpdateWithoutProjectsInput, Prisma.GlossaryUncheckedUpdateWithoutProjectsInput>
}

export type GlossaryUpdateManyWithWhereWithoutProjectsInput = {
  where: Prisma.GlossaryScalarWhereInput
  data: Prisma.XOR<Prisma.GlossaryUpdateManyMutationInput, Prisma.GlossaryUncheckedUpdateManyWithoutProjectsInput>
}

export type GlossaryScalarWhereInput = {
  AND?: Prisma.GlossaryScalarWhereInput | Prisma.GlossaryScalarWhereInput[]
  OR?: Prisma.GlossaryScalarWhereInput[]
  NOT?: Prisma.GlossaryScalarWhereInput | Prisma.GlossaryScalarWhereInput[]
  id?: Prisma.StringFilter<"Glossary"> | string
  name?: Prisma.StringFilter<"Glossary"> | string
  description?: Prisma.StringNullableFilter<"Glossary"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Glossary"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Glossary"> | Date | string
  creatorId?: Prisma.StringFilter<"Glossary"> | string
}

export type GlossaryCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Projects?: Prisma.ProjectCreateNestedManyWithoutGlossariesInput
  Terms?: Prisma.TermCreateNestedManyWithoutGlossaryInput
}

export type GlossaryUncheckedCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutGlossariesInput
  Terms?: Prisma.TermUncheckedCreateNestedManyWithoutGlossaryInput
}

export type GlossaryCreateOrConnectWithoutCreatorInput = {
  where: Prisma.GlossaryWhereUniqueInput
  create: Prisma.XOR<Prisma.GlossaryCreateWithoutCreatorInput, Prisma.GlossaryUncheckedCreateWithoutCreatorInput>
}

export type GlossaryCreateManyCreatorInputEnvelope = {
  data: Prisma.GlossaryCreateManyCreatorInput | Prisma.GlossaryCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type GlossaryUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.GlossaryWhereUniqueInput
  update: Prisma.XOR<Prisma.GlossaryUpdateWithoutCreatorInput, Prisma.GlossaryUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.GlossaryCreateWithoutCreatorInput, Prisma.GlossaryUncheckedCreateWithoutCreatorInput>
}

export type GlossaryUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.GlossaryWhereUniqueInput
  data: Prisma.XOR<Prisma.GlossaryUpdateWithoutCreatorInput, Prisma.GlossaryUncheckedUpdateWithoutCreatorInput>
}

export type GlossaryUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.GlossaryScalarWhereInput
  data: Prisma.XOR<Prisma.GlossaryUpdateManyMutationInput, Prisma.GlossaryUncheckedUpdateManyWithoutCreatorInput>
}

export type GlossaryUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Creator?: Prisma.UserUpdateOneRequiredWithoutGlossariesNestedInput
  Terms?: Prisma.TermUpdateManyWithoutGlossaryNestedInput
}

export type GlossaryUncheckedUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  Terms?: Prisma.TermUncheckedUpdateManyWithoutGlossaryNestedInput
}

export type GlossaryUncheckedUpdateManyWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GlossaryCreateManyCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GlossaryUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Projects?: Prisma.ProjectUpdateManyWithoutGlossariesNestedInput
  Terms?: Prisma.TermUpdateManyWithoutGlossaryNestedInput
}

export type GlossaryUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Projects?: Prisma.ProjectUncheckedUpdateManyWithoutGlossariesNestedInput
  Terms?: Prisma.TermUncheckedUpdateManyWithoutGlossaryNestedInput
}

export type GlossaryUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type GlossaryCountOutputType
 */

export type GlossaryCountOutputType = {
  Projects: number
  Terms: number
}

export type GlossaryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Projects?: boolean | GlossaryCountOutputTypeCountProjectsArgs
  Terms?: boolean | GlossaryCountOutputTypeCountTermsArgs
}

/**
 * GlossaryCountOutputType without action
 */
export type GlossaryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GlossaryCountOutputType
   */
  select?: Prisma.GlossaryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GlossaryCountOutputType without action
 */
export type GlossaryCountOutputTypeCountProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
}

/**
 * GlossaryCountOutputType without action
 */
export type GlossaryCountOutputTypeCountTermsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TermWhereInput
}


export type GlossarySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Projects?: boolean | Prisma.Glossary$ProjectsArgs<ExtArgs>
  Terms?: boolean | Prisma.Glossary$TermsArgs<ExtArgs>
  _count?: boolean | Prisma.GlossaryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["glossary"]>

export type GlossarySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["glossary"]>

export type GlossarySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["glossary"]>

export type GlossarySelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
}

export type GlossaryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt" | "creatorId", ExtArgs["result"]["glossary"]>
export type GlossaryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Projects?: boolean | Prisma.Glossary$ProjectsArgs<ExtArgs>
  Terms?: boolean | Prisma.Glossary$TermsArgs<ExtArgs>
  _count?: boolean | Prisma.GlossaryCountOutputTypeDefaultArgs<ExtArgs>
}
export type GlossaryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type GlossaryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $GlossaryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Glossary"
  objects: {
    Creator: Prisma.$UserPayload<ExtArgs>
    Projects: Prisma.$ProjectPayload<ExtArgs>[]
    Terms: Prisma.$TermPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    creatorId: string
  }, ExtArgs["result"]["glossary"]>
  composites: {}
}

export type GlossaryGetPayload<S extends boolean | null | undefined | GlossaryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GlossaryPayload, S>

export type GlossaryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GlossaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GlossaryCountAggregateInputType | true
  }

export interface GlossaryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Glossary'], meta: { name: 'Glossary' } }
  /**
   * Find zero or one Glossary that matches the filter.
   * @param {GlossaryFindUniqueArgs} args - Arguments to find a Glossary
   * @example
   * // Get one Glossary
   * const glossary = await prisma.glossary.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GlossaryFindUniqueArgs>(args: Prisma.SelectSubset<T, GlossaryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Glossary that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GlossaryFindUniqueOrThrowArgs} args - Arguments to find a Glossary
   * @example
   * // Get one Glossary
   * const glossary = await prisma.glossary.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GlossaryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GlossaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Glossary that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GlossaryFindFirstArgs} args - Arguments to find a Glossary
   * @example
   * // Get one Glossary
   * const glossary = await prisma.glossary.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GlossaryFindFirstArgs>(args?: Prisma.SelectSubset<T, GlossaryFindFirstArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Glossary that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GlossaryFindFirstOrThrowArgs} args - Arguments to find a Glossary
   * @example
   * // Get one Glossary
   * const glossary = await prisma.glossary.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GlossaryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GlossaryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Glossaries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GlossaryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Glossaries
   * const glossaries = await prisma.glossary.findMany()
   * 
   * // Get first 10 Glossaries
   * const glossaries = await prisma.glossary.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const glossaryWithIdOnly = await prisma.glossary.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GlossaryFindManyArgs>(args?: Prisma.SelectSubset<T, GlossaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Glossary.
   * @param {GlossaryCreateArgs} args - Arguments to create a Glossary.
   * @example
   * // Create one Glossary
   * const Glossary = await prisma.glossary.create({
   *   data: {
   *     // ... data to create a Glossary
   *   }
   * })
   * 
   */
  create<T extends GlossaryCreateArgs>(args: Prisma.SelectSubset<T, GlossaryCreateArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Glossaries.
   * @param {GlossaryCreateManyArgs} args - Arguments to create many Glossaries.
   * @example
   * // Create many Glossaries
   * const glossary = await prisma.glossary.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GlossaryCreateManyArgs>(args?: Prisma.SelectSubset<T, GlossaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Glossaries and returns the data saved in the database.
   * @param {GlossaryCreateManyAndReturnArgs} args - Arguments to create many Glossaries.
   * @example
   * // Create many Glossaries
   * const glossary = await prisma.glossary.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Glossaries and only return the `id`
   * const glossaryWithIdOnly = await prisma.glossary.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GlossaryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GlossaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Glossary.
   * @param {GlossaryDeleteArgs} args - Arguments to delete one Glossary.
   * @example
   * // Delete one Glossary
   * const Glossary = await prisma.glossary.delete({
   *   where: {
   *     // ... filter to delete one Glossary
   *   }
   * })
   * 
   */
  delete<T extends GlossaryDeleteArgs>(args: Prisma.SelectSubset<T, GlossaryDeleteArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Glossary.
   * @param {GlossaryUpdateArgs} args - Arguments to update one Glossary.
   * @example
   * // Update one Glossary
   * const glossary = await prisma.glossary.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GlossaryUpdateArgs>(args: Prisma.SelectSubset<T, GlossaryUpdateArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Glossaries.
   * @param {GlossaryDeleteManyArgs} args - Arguments to filter Glossaries to delete.
   * @example
   * // Delete a few Glossaries
   * const { count } = await prisma.glossary.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GlossaryDeleteManyArgs>(args?: Prisma.SelectSubset<T, GlossaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Glossaries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GlossaryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Glossaries
   * const glossary = await prisma.glossary.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GlossaryUpdateManyArgs>(args: Prisma.SelectSubset<T, GlossaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Glossaries and returns the data updated in the database.
   * @param {GlossaryUpdateManyAndReturnArgs} args - Arguments to update many Glossaries.
   * @example
   * // Update many Glossaries
   * const glossary = await prisma.glossary.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Glossaries and only return the `id`
   * const glossaryWithIdOnly = await prisma.glossary.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GlossaryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GlossaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Glossary.
   * @param {GlossaryUpsertArgs} args - Arguments to update or create a Glossary.
   * @example
   * // Update or create a Glossary
   * const glossary = await prisma.glossary.upsert({
   *   create: {
   *     // ... data to create a Glossary
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Glossary we want to update
   *   }
   * })
   */
  upsert<T extends GlossaryUpsertArgs>(args: Prisma.SelectSubset<T, GlossaryUpsertArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Glossaries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GlossaryCountArgs} args - Arguments to filter Glossaries to count.
   * @example
   * // Count the number of Glossaries
   * const count = await prisma.glossary.count({
   *   where: {
   *     // ... the filter for the Glossaries we want to count
   *   }
   * })
  **/
  count<T extends GlossaryCountArgs>(
    args?: Prisma.Subset<T, GlossaryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GlossaryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Glossary.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GlossaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GlossaryAggregateArgs>(args: Prisma.Subset<T, GlossaryAggregateArgs>): Prisma.PrismaPromise<GetGlossaryAggregateType<T>>

  /**
   * Group by Glossary.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GlossaryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GlossaryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GlossaryGroupByArgs['orderBy'] }
      : { orderBy?: GlossaryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GlossaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlossaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Glossary model
 */
readonly fields: GlossaryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Glossary.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GlossaryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Projects<T extends Prisma.Glossary$ProjectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Glossary$ProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Terms<T extends Prisma.Glossary$TermsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Glossary$TermsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Glossary model
 */
export interface GlossaryFieldRefs {
  readonly id: Prisma.FieldRef<"Glossary", 'String'>
  readonly name: Prisma.FieldRef<"Glossary", 'String'>
  readonly description: Prisma.FieldRef<"Glossary", 'String'>
  readonly createdAt: Prisma.FieldRef<"Glossary", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Glossary", 'DateTime'>
  readonly creatorId: Prisma.FieldRef<"Glossary", 'String'>
}
    

// Custom InputTypes
/**
 * Glossary findUnique
 */
export type GlossaryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * Filter, which Glossary to fetch.
   */
  where: Prisma.GlossaryWhereUniqueInput
}

/**
 * Glossary findUniqueOrThrow
 */
export type GlossaryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * Filter, which Glossary to fetch.
   */
  where: Prisma.GlossaryWhereUniqueInput
}

/**
 * Glossary findFirst
 */
export type GlossaryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * Filter, which Glossary to fetch.
   */
  where?: Prisma.GlossaryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Glossaries to fetch.
   */
  orderBy?: Prisma.GlossaryOrderByWithRelationInput | Prisma.GlossaryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Glossaries.
   */
  cursor?: Prisma.GlossaryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Glossaries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Glossaries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Glossaries.
   */
  distinct?: Prisma.GlossaryScalarFieldEnum | Prisma.GlossaryScalarFieldEnum[]
}

/**
 * Glossary findFirstOrThrow
 */
export type GlossaryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * Filter, which Glossary to fetch.
   */
  where?: Prisma.GlossaryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Glossaries to fetch.
   */
  orderBy?: Prisma.GlossaryOrderByWithRelationInput | Prisma.GlossaryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Glossaries.
   */
  cursor?: Prisma.GlossaryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Glossaries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Glossaries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Glossaries.
   */
  distinct?: Prisma.GlossaryScalarFieldEnum | Prisma.GlossaryScalarFieldEnum[]
}

/**
 * Glossary findMany
 */
export type GlossaryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * Filter, which Glossaries to fetch.
   */
  where?: Prisma.GlossaryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Glossaries to fetch.
   */
  orderBy?: Prisma.GlossaryOrderByWithRelationInput | Prisma.GlossaryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Glossaries.
   */
  cursor?: Prisma.GlossaryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Glossaries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Glossaries.
   */
  skip?: number
  distinct?: Prisma.GlossaryScalarFieldEnum | Prisma.GlossaryScalarFieldEnum[]
}

/**
 * Glossary create
 */
export type GlossaryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * The data needed to create a Glossary.
   */
  data: Prisma.XOR<Prisma.GlossaryCreateInput, Prisma.GlossaryUncheckedCreateInput>
}

/**
 * Glossary createMany
 */
export type GlossaryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Glossaries.
   */
  data: Prisma.GlossaryCreateManyInput | Prisma.GlossaryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Glossary createManyAndReturn
 */
export type GlossaryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * The data used to create many Glossaries.
   */
  data: Prisma.GlossaryCreateManyInput | Prisma.GlossaryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Glossary update
 */
export type GlossaryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * The data needed to update a Glossary.
   */
  data: Prisma.XOR<Prisma.GlossaryUpdateInput, Prisma.GlossaryUncheckedUpdateInput>
  /**
   * Choose, which Glossary to update.
   */
  where: Prisma.GlossaryWhereUniqueInput
}

/**
 * Glossary updateMany
 */
export type GlossaryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Glossaries.
   */
  data: Prisma.XOR<Prisma.GlossaryUpdateManyMutationInput, Prisma.GlossaryUncheckedUpdateManyInput>
  /**
   * Filter which Glossaries to update
   */
  where?: Prisma.GlossaryWhereInput
  /**
   * Limit how many Glossaries to update.
   */
  limit?: number
}

/**
 * Glossary updateManyAndReturn
 */
export type GlossaryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * The data used to update Glossaries.
   */
  data: Prisma.XOR<Prisma.GlossaryUpdateManyMutationInput, Prisma.GlossaryUncheckedUpdateManyInput>
  /**
   * Filter which Glossaries to update
   */
  where?: Prisma.GlossaryWhereInput
  /**
   * Limit how many Glossaries to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Glossary upsert
 */
export type GlossaryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * The filter to search for the Glossary to update in case it exists.
   */
  where: Prisma.GlossaryWhereUniqueInput
  /**
   * In case the Glossary found by the `where` argument doesn't exist, create a new Glossary with this data.
   */
  create: Prisma.XOR<Prisma.GlossaryCreateInput, Prisma.GlossaryUncheckedCreateInput>
  /**
   * In case the Glossary was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GlossaryUpdateInput, Prisma.GlossaryUncheckedUpdateInput>
}

/**
 * Glossary delete
 */
export type GlossaryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  /**
   * Filter which Glossary to delete.
   */
  where: Prisma.GlossaryWhereUniqueInput
}

/**
 * Glossary deleteMany
 */
export type GlossaryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Glossaries to delete
   */
  where?: Prisma.GlossaryWhereInput
  /**
   * Limit how many Glossaries to delete.
   */
  limit?: number
}

/**
 * Glossary.Projects
 */
export type Glossary$ProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  cursor?: Prisma.ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Glossary.Terms
 */
export type Glossary$TermsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  where?: Prisma.TermWhereInput
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  cursor?: Prisma.TermWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TermScalarFieldEnum | Prisma.TermScalarFieldEnum[]
}

/**
 * Glossary without action
 */
export type GlossaryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
}
