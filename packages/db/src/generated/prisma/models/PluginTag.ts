
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PluginTag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PluginTag
 * 
 */
export type PluginTagModel = runtime.Types.Result.DefaultSelection<Prisma.$PluginTagPayload>

export type AggregatePluginTag = {
  _count: PluginTagCountAggregateOutputType | null
  _avg: PluginTagAvgAggregateOutputType | null
  _sum: PluginTagSumAggregateOutputType | null
  _min: PluginTagMinAggregateOutputType | null
  _max: PluginTagMaxAggregateOutputType | null
}

export type PluginTagAvgAggregateOutputType = {
  id: number | null
}

export type PluginTagSumAggregateOutputType = {
  id: number | null
}

export type PluginTagMinAggregateOutputType = {
  id: number | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PluginTagMaxAggregateOutputType = {
  id: number | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PluginTagCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PluginTagAvgAggregateInputType = {
  id?: true
}

export type PluginTagSumAggregateInputType = {
  id?: true
}

export type PluginTagMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type PluginTagMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type PluginTagCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PluginTagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginTag to aggregate.
   */
  where?: Prisma.PluginTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginTags to fetch.
   */
  orderBy?: Prisma.PluginTagOrderByWithRelationInput | Prisma.PluginTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PluginTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PluginTags
  **/
  _count?: true | PluginTagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PluginTagAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PluginTagSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PluginTagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PluginTagMaxAggregateInputType
}

export type GetPluginTagAggregateType<T extends PluginTagAggregateArgs> = {
      [P in keyof T & keyof AggregatePluginTag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePluginTag[P]>
    : Prisma.GetScalarType<T[P], AggregatePluginTag[P]>
}




export type PluginTagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PluginTagWhereInput
  orderBy?: Prisma.PluginTagOrderByWithAggregationInput | Prisma.PluginTagOrderByWithAggregationInput[]
  by: Prisma.PluginTagScalarFieldEnum[] | Prisma.PluginTagScalarFieldEnum
  having?: Prisma.PluginTagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PluginTagCountAggregateInputType | true
  _avg?: PluginTagAvgAggregateInputType
  _sum?: PluginTagSumAggregateInputType
  _min?: PluginTagMinAggregateInputType
  _max?: PluginTagMaxAggregateInputType
}

export type PluginTagGroupByOutputType = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
  _count: PluginTagCountAggregateOutputType | null
  _avg: PluginTagAvgAggregateOutputType | null
  _sum: PluginTagSumAggregateOutputType | null
  _min: PluginTagMinAggregateOutputType | null
  _max: PluginTagMaxAggregateOutputType | null
}

type GetPluginTagGroupByPayload<T extends PluginTagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PluginTagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PluginTagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PluginTagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PluginTagGroupByOutputType[P]>
      }
    >
  > 



export type PluginTagWhereInput = {
  AND?: Prisma.PluginTagWhereInput | Prisma.PluginTagWhereInput[]
  OR?: Prisma.PluginTagWhereInput[]
  NOT?: Prisma.PluginTagWhereInput | Prisma.PluginTagWhereInput[]
  id?: Prisma.IntFilter<"PluginTag"> | number
  name?: Prisma.StringFilter<"PluginTag"> | string
  createdAt?: Prisma.DateTimeFilter<"PluginTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginTag"> | Date | string
  Plugin?: Prisma.PluginListRelationFilter
}

export type PluginTagOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Plugin?: Prisma.PluginOrderByRelationAggregateInput
  _relevance?: Prisma.PluginTagOrderByRelevanceInput
}

export type PluginTagWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.PluginTagWhereInput | Prisma.PluginTagWhereInput[]
  OR?: Prisma.PluginTagWhereInput[]
  NOT?: Prisma.PluginTagWhereInput | Prisma.PluginTagWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"PluginTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginTag"> | Date | string
  Plugin?: Prisma.PluginListRelationFilter
}, "id" | "name">

export type PluginTagOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PluginTagCountOrderByAggregateInput
  _avg?: Prisma.PluginTagAvgOrderByAggregateInput
  _max?: Prisma.PluginTagMaxOrderByAggregateInput
  _min?: Prisma.PluginTagMinOrderByAggregateInput
  _sum?: Prisma.PluginTagSumOrderByAggregateInput
}

export type PluginTagScalarWhereWithAggregatesInput = {
  AND?: Prisma.PluginTagScalarWhereWithAggregatesInput | Prisma.PluginTagScalarWhereWithAggregatesInput[]
  OR?: Prisma.PluginTagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PluginTagScalarWhereWithAggregatesInput | Prisma.PluginTagScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PluginTag"> | number
  name?: Prisma.StringWithAggregatesFilter<"PluginTag"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PluginTag"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PluginTag"> | Date | string
}

export type PluginTagCreateInput = {
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Plugin?: Prisma.PluginCreateNestedManyWithoutTagsInput
}

export type PluginTagUncheckedCreateInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Plugin?: Prisma.PluginUncheckedCreateNestedManyWithoutTagsInput
}

export type PluginTagUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Plugin?: Prisma.PluginUpdateManyWithoutTagsNestedInput
}

export type PluginTagUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Plugin?: Prisma.PluginUncheckedUpdateManyWithoutTagsNestedInput
}

export type PluginTagCreateManyInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginTagUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginTagUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginTagListRelationFilter = {
  every?: Prisma.PluginTagWhereInput
  some?: Prisma.PluginTagWhereInput
  none?: Prisma.PluginTagWhereInput
}

export type PluginTagOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PluginTagOrderByRelevanceInput = {
  fields: Prisma.PluginTagOrderByRelevanceFieldEnum | Prisma.PluginTagOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PluginTagCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PluginTagAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PluginTagMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PluginTagMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PluginTagSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PluginTagCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginTagCreateWithoutPluginInput, Prisma.PluginTagUncheckedCreateWithoutPluginInput> | Prisma.PluginTagCreateWithoutPluginInput[] | Prisma.PluginTagUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginTagCreateOrConnectWithoutPluginInput | Prisma.PluginTagCreateOrConnectWithoutPluginInput[]
  connect?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
}

export type PluginTagUncheckedCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginTagCreateWithoutPluginInput, Prisma.PluginTagUncheckedCreateWithoutPluginInput> | Prisma.PluginTagCreateWithoutPluginInput[] | Prisma.PluginTagUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginTagCreateOrConnectWithoutPluginInput | Prisma.PluginTagCreateOrConnectWithoutPluginInput[]
  connect?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
}

export type PluginTagUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginTagCreateWithoutPluginInput, Prisma.PluginTagUncheckedCreateWithoutPluginInput> | Prisma.PluginTagCreateWithoutPluginInput[] | Prisma.PluginTagUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginTagCreateOrConnectWithoutPluginInput | Prisma.PluginTagCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginTagUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginTagUpsertWithWhereUniqueWithoutPluginInput[]
  set?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
  disconnect?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
  delete?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
  connect?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
  update?: Prisma.PluginTagUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginTagUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginTagUpdateManyWithWhereWithoutPluginInput | Prisma.PluginTagUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginTagScalarWhereInput | Prisma.PluginTagScalarWhereInput[]
}

export type PluginTagUncheckedUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginTagCreateWithoutPluginInput, Prisma.PluginTagUncheckedCreateWithoutPluginInput> | Prisma.PluginTagCreateWithoutPluginInput[] | Prisma.PluginTagUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginTagCreateOrConnectWithoutPluginInput | Prisma.PluginTagCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginTagUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginTagUpsertWithWhereUniqueWithoutPluginInput[]
  set?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
  disconnect?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
  delete?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
  connect?: Prisma.PluginTagWhereUniqueInput | Prisma.PluginTagWhereUniqueInput[]
  update?: Prisma.PluginTagUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginTagUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginTagUpdateManyWithWhereWithoutPluginInput | Prisma.PluginTagUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginTagScalarWhereInput | Prisma.PluginTagScalarWhereInput[]
}

export type PluginTagCreateWithoutPluginInput = {
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginTagUncheckedCreateWithoutPluginInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PluginTagCreateOrConnectWithoutPluginInput = {
  where: Prisma.PluginTagWhereUniqueInput
  create: Prisma.XOR<Prisma.PluginTagCreateWithoutPluginInput, Prisma.PluginTagUncheckedCreateWithoutPluginInput>
}

export type PluginTagUpsertWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginTagWhereUniqueInput
  update: Prisma.XOR<Prisma.PluginTagUpdateWithoutPluginInput, Prisma.PluginTagUncheckedUpdateWithoutPluginInput>
  create: Prisma.XOR<Prisma.PluginTagCreateWithoutPluginInput, Prisma.PluginTagUncheckedCreateWithoutPluginInput>
}

export type PluginTagUpdateWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginTagWhereUniqueInput
  data: Prisma.XOR<Prisma.PluginTagUpdateWithoutPluginInput, Prisma.PluginTagUncheckedUpdateWithoutPluginInput>
}

export type PluginTagUpdateManyWithWhereWithoutPluginInput = {
  where: Prisma.PluginTagScalarWhereInput
  data: Prisma.XOR<Prisma.PluginTagUpdateManyMutationInput, Prisma.PluginTagUncheckedUpdateManyWithoutPluginInput>
}

export type PluginTagScalarWhereInput = {
  AND?: Prisma.PluginTagScalarWhereInput | Prisma.PluginTagScalarWhereInput[]
  OR?: Prisma.PluginTagScalarWhereInput[]
  NOT?: Prisma.PluginTagScalarWhereInput | Prisma.PluginTagScalarWhereInput[]
  id?: Prisma.IntFilter<"PluginTag"> | number
  name?: Prisma.StringFilter<"PluginTag"> | string
  createdAt?: Prisma.DateTimeFilter<"PluginTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PluginTag"> | Date | string
}

export type PluginTagUpdateWithoutPluginInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginTagUncheckedUpdateWithoutPluginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PluginTagUncheckedUpdateManyWithoutPluginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PluginTagCountOutputType
 */

export type PluginTagCountOutputType = {
  Plugin: number
}

export type PluginTagCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | PluginTagCountOutputTypeCountPluginArgs
}

/**
 * PluginTagCountOutputType without action
 */
export type PluginTagCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTagCountOutputType
   */
  select?: Prisma.PluginTagCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PluginTagCountOutputType without action
 */
export type PluginTagCountOutputTypeCountPluginArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PluginWhereInput
}


export type PluginTagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Plugin?: boolean | Prisma.PluginTag$PluginArgs<ExtArgs>
  _count?: boolean | Prisma.PluginTagCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginTag"]>

export type PluginTagSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pluginTag"]>

export type PluginTagSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pluginTag"]>

export type PluginTagSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PluginTagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["pluginTag"]>
export type PluginTagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginTag$PluginArgs<ExtArgs>
  _count?: boolean | Prisma.PluginTagCountOutputTypeDefaultArgs<ExtArgs>
}
export type PluginTagIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PluginTagIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PluginTagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PluginTag"
  objects: {
    Plugin: Prisma.$PluginPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["pluginTag"]>
  composites: {}
}

export type PluginTagGetPayload<S extends boolean | null | undefined | PluginTagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PluginTagPayload, S>

export type PluginTagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PluginTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PluginTagCountAggregateInputType | true
  }

export interface PluginTagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PluginTag'], meta: { name: 'PluginTag' } }
  /**
   * Find zero or one PluginTag that matches the filter.
   * @param {PluginTagFindUniqueArgs} args - Arguments to find a PluginTag
   * @example
   * // Get one PluginTag
   * const pluginTag = await prisma.pluginTag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PluginTagFindUniqueArgs>(args: Prisma.SelectSubset<T, PluginTagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PluginTagClient<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PluginTag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PluginTagFindUniqueOrThrowArgs} args - Arguments to find a PluginTag
   * @example
   * // Get one PluginTag
   * const pluginTag = await prisma.pluginTag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PluginTagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PluginTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginTagClient<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginTag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginTagFindFirstArgs} args - Arguments to find a PluginTag
   * @example
   * // Get one PluginTag
   * const pluginTag = await prisma.pluginTag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PluginTagFindFirstArgs>(args?: Prisma.SelectSubset<T, PluginTagFindFirstArgs<ExtArgs>>): Prisma.Prisma__PluginTagClient<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginTag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginTagFindFirstOrThrowArgs} args - Arguments to find a PluginTag
   * @example
   * // Get one PluginTag
   * const pluginTag = await prisma.pluginTag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PluginTagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PluginTagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginTagClient<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PluginTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginTagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PluginTags
   * const pluginTags = await prisma.pluginTag.findMany()
   * 
   * // Get first 10 PluginTags
   * const pluginTags = await prisma.pluginTag.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pluginTagWithIdOnly = await prisma.pluginTag.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PluginTagFindManyArgs>(args?: Prisma.SelectSubset<T, PluginTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PluginTag.
   * @param {PluginTagCreateArgs} args - Arguments to create a PluginTag.
   * @example
   * // Create one PluginTag
   * const PluginTag = await prisma.pluginTag.create({
   *   data: {
   *     // ... data to create a PluginTag
   *   }
   * })
   * 
   */
  create<T extends PluginTagCreateArgs>(args: Prisma.SelectSubset<T, PluginTagCreateArgs<ExtArgs>>): Prisma.Prisma__PluginTagClient<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PluginTags.
   * @param {PluginTagCreateManyArgs} args - Arguments to create many PluginTags.
   * @example
   * // Create many PluginTags
   * const pluginTag = await prisma.pluginTag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PluginTagCreateManyArgs>(args?: Prisma.SelectSubset<T, PluginTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PluginTags and returns the data saved in the database.
   * @param {PluginTagCreateManyAndReturnArgs} args - Arguments to create many PluginTags.
   * @example
   * // Create many PluginTags
   * const pluginTag = await prisma.pluginTag.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PluginTags and only return the `id`
   * const pluginTagWithIdOnly = await prisma.pluginTag.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PluginTagCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PluginTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PluginTag.
   * @param {PluginTagDeleteArgs} args - Arguments to delete one PluginTag.
   * @example
   * // Delete one PluginTag
   * const PluginTag = await prisma.pluginTag.delete({
   *   where: {
   *     // ... filter to delete one PluginTag
   *   }
   * })
   * 
   */
  delete<T extends PluginTagDeleteArgs>(args: Prisma.SelectSubset<T, PluginTagDeleteArgs<ExtArgs>>): Prisma.Prisma__PluginTagClient<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PluginTag.
   * @param {PluginTagUpdateArgs} args - Arguments to update one PluginTag.
   * @example
   * // Update one PluginTag
   * const pluginTag = await prisma.pluginTag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PluginTagUpdateArgs>(args: Prisma.SelectSubset<T, PluginTagUpdateArgs<ExtArgs>>): Prisma.Prisma__PluginTagClient<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PluginTags.
   * @param {PluginTagDeleteManyArgs} args - Arguments to filter PluginTags to delete.
   * @example
   * // Delete a few PluginTags
   * const { count } = await prisma.pluginTag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PluginTagDeleteManyArgs>(args?: Prisma.SelectSubset<T, PluginTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginTagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PluginTags
   * const pluginTag = await prisma.pluginTag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PluginTagUpdateManyArgs>(args: Prisma.SelectSubset<T, PluginTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginTags and returns the data updated in the database.
   * @param {PluginTagUpdateManyAndReturnArgs} args - Arguments to update many PluginTags.
   * @example
   * // Update many PluginTags
   * const pluginTag = await prisma.pluginTag.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PluginTags and only return the `id`
   * const pluginTagWithIdOnly = await prisma.pluginTag.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PluginTagUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PluginTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PluginTag.
   * @param {PluginTagUpsertArgs} args - Arguments to update or create a PluginTag.
   * @example
   * // Update or create a PluginTag
   * const pluginTag = await prisma.pluginTag.upsert({
   *   create: {
   *     // ... data to create a PluginTag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PluginTag we want to update
   *   }
   * })
   */
  upsert<T extends PluginTagUpsertArgs>(args: Prisma.SelectSubset<T, PluginTagUpsertArgs<ExtArgs>>): Prisma.Prisma__PluginTagClient<runtime.Types.Result.GetResult<Prisma.$PluginTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PluginTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginTagCountArgs} args - Arguments to filter PluginTags to count.
   * @example
   * // Count the number of PluginTags
   * const count = await prisma.pluginTag.count({
   *   where: {
   *     // ... the filter for the PluginTags we want to count
   *   }
   * })
  **/
  count<T extends PluginTagCountArgs>(
    args?: Prisma.Subset<T, PluginTagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PluginTagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PluginTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PluginTagAggregateArgs>(args: Prisma.Subset<T, PluginTagAggregateArgs>): Prisma.PrismaPromise<GetPluginTagAggregateType<T>>

  /**
   * Group by PluginTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginTagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PluginTagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PluginTagGroupByArgs['orderBy'] }
      : { orderBy?: PluginTagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PluginTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPluginTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PluginTag model
 */
readonly fields: PluginTagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PluginTag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PluginTagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Plugin<T extends Prisma.PluginTag$PluginArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PluginTag$PluginArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PluginTag model
 */
export interface PluginTagFieldRefs {
  readonly id: Prisma.FieldRef<"PluginTag", 'Int'>
  readonly name: Prisma.FieldRef<"PluginTag", 'String'>
  readonly createdAt: Prisma.FieldRef<"PluginTag", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PluginTag", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PluginTag findUnique
 */
export type PluginTagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * Filter, which PluginTag to fetch.
   */
  where: Prisma.PluginTagWhereUniqueInput
}

/**
 * PluginTag findUniqueOrThrow
 */
export type PluginTagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * Filter, which PluginTag to fetch.
   */
  where: Prisma.PluginTagWhereUniqueInput
}

/**
 * PluginTag findFirst
 */
export type PluginTagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * Filter, which PluginTag to fetch.
   */
  where?: Prisma.PluginTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginTags to fetch.
   */
  orderBy?: Prisma.PluginTagOrderByWithRelationInput | Prisma.PluginTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginTags.
   */
  cursor?: Prisma.PluginTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginTags.
   */
  distinct?: Prisma.PluginTagScalarFieldEnum | Prisma.PluginTagScalarFieldEnum[]
}

/**
 * PluginTag findFirstOrThrow
 */
export type PluginTagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * Filter, which PluginTag to fetch.
   */
  where?: Prisma.PluginTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginTags to fetch.
   */
  orderBy?: Prisma.PluginTagOrderByWithRelationInput | Prisma.PluginTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginTags.
   */
  cursor?: Prisma.PluginTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginTags.
   */
  distinct?: Prisma.PluginTagScalarFieldEnum | Prisma.PluginTagScalarFieldEnum[]
}

/**
 * PluginTag findMany
 */
export type PluginTagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * Filter, which PluginTags to fetch.
   */
  where?: Prisma.PluginTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginTags to fetch.
   */
  orderBy?: Prisma.PluginTagOrderByWithRelationInput | Prisma.PluginTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PluginTags.
   */
  cursor?: Prisma.PluginTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginTags.
   */
  skip?: number
  distinct?: Prisma.PluginTagScalarFieldEnum | Prisma.PluginTagScalarFieldEnum[]
}

/**
 * PluginTag create
 */
export type PluginTagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * The data needed to create a PluginTag.
   */
  data: Prisma.XOR<Prisma.PluginTagCreateInput, Prisma.PluginTagUncheckedCreateInput>
}

/**
 * PluginTag createMany
 */
export type PluginTagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PluginTags.
   */
  data: Prisma.PluginTagCreateManyInput | Prisma.PluginTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PluginTag createManyAndReturn
 */
export type PluginTagCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * The data used to create many PluginTags.
   */
  data: Prisma.PluginTagCreateManyInput | Prisma.PluginTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PluginTag update
 */
export type PluginTagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * The data needed to update a PluginTag.
   */
  data: Prisma.XOR<Prisma.PluginTagUpdateInput, Prisma.PluginTagUncheckedUpdateInput>
  /**
   * Choose, which PluginTag to update.
   */
  where: Prisma.PluginTagWhereUniqueInput
}

/**
 * PluginTag updateMany
 */
export type PluginTagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PluginTags.
   */
  data: Prisma.XOR<Prisma.PluginTagUpdateManyMutationInput, Prisma.PluginTagUncheckedUpdateManyInput>
  /**
   * Filter which PluginTags to update
   */
  where?: Prisma.PluginTagWhereInput
  /**
   * Limit how many PluginTags to update.
   */
  limit?: number
}

/**
 * PluginTag updateManyAndReturn
 */
export type PluginTagUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * The data used to update PluginTags.
   */
  data: Prisma.XOR<Prisma.PluginTagUpdateManyMutationInput, Prisma.PluginTagUncheckedUpdateManyInput>
  /**
   * Filter which PluginTags to update
   */
  where?: Prisma.PluginTagWhereInput
  /**
   * Limit how many PluginTags to update.
   */
  limit?: number
}

/**
 * PluginTag upsert
 */
export type PluginTagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * The filter to search for the PluginTag to update in case it exists.
   */
  where: Prisma.PluginTagWhereUniqueInput
  /**
   * In case the PluginTag found by the `where` argument doesn't exist, create a new PluginTag with this data.
   */
  create: Prisma.XOR<Prisma.PluginTagCreateInput, Prisma.PluginTagUncheckedCreateInput>
  /**
   * In case the PluginTag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PluginTagUpdateInput, Prisma.PluginTagUncheckedUpdateInput>
}

/**
 * PluginTag delete
 */
export type PluginTagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
  /**
   * Filter which PluginTag to delete.
   */
  where: Prisma.PluginTagWhereUniqueInput
}

/**
 * PluginTag deleteMany
 */
export type PluginTagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginTags to delete
   */
  where?: Prisma.PluginTagWhereInput
  /**
   * Limit how many PluginTags to delete.
   */
  limit?: number
}

/**
 * PluginTag.Plugin
 */
export type PluginTag$PluginArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Plugin
   */
  select?: Prisma.PluginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Plugin
   */
  omit?: Prisma.PluginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginInclude<ExtArgs> | null
  where?: Prisma.PluginWhereInput
  orderBy?: Prisma.PluginOrderByWithRelationInput | Prisma.PluginOrderByWithRelationInput[]
  cursor?: Prisma.PluginWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PluginScalarFieldEnum | Prisma.PluginScalarFieldEnum[]
}

/**
 * PluginTag without action
 */
export type PluginTagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginTag
   */
  select?: Prisma.PluginTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginTag
   */
  omit?: Prisma.PluginTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginTagInclude<ExtArgs> | null
}
