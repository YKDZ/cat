
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PluginComponent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PluginComponent
 * 
 */
export type PluginComponentModel = runtime.Types.Result.DefaultSelection<Prisma.$PluginComponentPayload>

export type AggregatePluginComponent = {
  _count: PluginComponentCountAggregateOutputType | null
  _min: PluginComponentMinAggregateOutputType | null
  _max: PluginComponentMaxAggregateOutputType | null
}

export type PluginComponentMinAggregateOutputType = {
  id: string | null
  entry: string | null
  mountOn: string | null
  pluginId: string | null
}

export type PluginComponentMaxAggregateOutputType = {
  id: string | null
  entry: string | null
  mountOn: string | null
  pluginId: string | null
}

export type PluginComponentCountAggregateOutputType = {
  id: number
  entry: number
  mountOn: number
  pluginId: number
  _all: number
}


export type PluginComponentMinAggregateInputType = {
  id?: true
  entry?: true
  mountOn?: true
  pluginId?: true
}

export type PluginComponentMaxAggregateInputType = {
  id?: true
  entry?: true
  mountOn?: true
  pluginId?: true
}

export type PluginComponentCountAggregateInputType = {
  id?: true
  entry?: true
  mountOn?: true
  pluginId?: true
  _all?: true
}

export type PluginComponentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginComponent to aggregate.
   */
  where?: Prisma.PluginComponentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginComponents to fetch.
   */
  orderBy?: Prisma.PluginComponentOrderByWithRelationInput | Prisma.PluginComponentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PluginComponentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginComponents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginComponents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PluginComponents
  **/
  _count?: true | PluginComponentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PluginComponentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PluginComponentMaxAggregateInputType
}

export type GetPluginComponentAggregateType<T extends PluginComponentAggregateArgs> = {
      [P in keyof T & keyof AggregatePluginComponent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePluginComponent[P]>
    : Prisma.GetScalarType<T[P], AggregatePluginComponent[P]>
}




export type PluginComponentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PluginComponentWhereInput
  orderBy?: Prisma.PluginComponentOrderByWithAggregationInput | Prisma.PluginComponentOrderByWithAggregationInput[]
  by: Prisma.PluginComponentScalarFieldEnum[] | Prisma.PluginComponentScalarFieldEnum
  having?: Prisma.PluginComponentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PluginComponentCountAggregateInputType | true
  _min?: PluginComponentMinAggregateInputType
  _max?: PluginComponentMaxAggregateInputType
}

export type PluginComponentGroupByOutputType = {
  id: string
  entry: string
  mountOn: string
  pluginId: string
  _count: PluginComponentCountAggregateOutputType | null
  _min: PluginComponentMinAggregateOutputType | null
  _max: PluginComponentMaxAggregateOutputType | null
}

type GetPluginComponentGroupByPayload<T extends PluginComponentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PluginComponentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PluginComponentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PluginComponentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PluginComponentGroupByOutputType[P]>
      }
    >
  > 



export type PluginComponentWhereInput = {
  AND?: Prisma.PluginComponentWhereInput | Prisma.PluginComponentWhereInput[]
  OR?: Prisma.PluginComponentWhereInput[]
  NOT?: Prisma.PluginComponentWhereInput | Prisma.PluginComponentWhereInput[]
  id?: Prisma.StringFilter<"PluginComponent"> | string
  entry?: Prisma.StringFilter<"PluginComponent"> | string
  mountOn?: Prisma.StringFilter<"PluginComponent"> | string
  pluginId?: Prisma.StringFilter<"PluginComponent"> | string
  Plugin?: Prisma.XOR<Prisma.PluginScalarRelationFilter, Prisma.PluginWhereInput>
}

export type PluginComponentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  entry?: Prisma.SortOrder
  mountOn?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
  Plugin?: Prisma.PluginOrderByWithRelationInput
  _relevance?: Prisma.PluginComponentOrderByRelevanceInput
}

export type PluginComponentWhereUniqueInput = Prisma.AtLeast<{
  id_pluginId?: Prisma.PluginComponentIdPluginIdCompoundUniqueInput
  AND?: Prisma.PluginComponentWhereInput | Prisma.PluginComponentWhereInput[]
  OR?: Prisma.PluginComponentWhereInput[]
  NOT?: Prisma.PluginComponentWhereInput | Prisma.PluginComponentWhereInput[]
  id?: Prisma.StringFilter<"PluginComponent"> | string
  entry?: Prisma.StringFilter<"PluginComponent"> | string
  mountOn?: Prisma.StringFilter<"PluginComponent"> | string
  pluginId?: Prisma.StringFilter<"PluginComponent"> | string
  Plugin?: Prisma.XOR<Prisma.PluginScalarRelationFilter, Prisma.PluginWhereInput>
}, "id_pluginId">

export type PluginComponentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  entry?: Prisma.SortOrder
  mountOn?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
  _count?: Prisma.PluginComponentCountOrderByAggregateInput
  _max?: Prisma.PluginComponentMaxOrderByAggregateInput
  _min?: Prisma.PluginComponentMinOrderByAggregateInput
}

export type PluginComponentScalarWhereWithAggregatesInput = {
  AND?: Prisma.PluginComponentScalarWhereWithAggregatesInput | Prisma.PluginComponentScalarWhereWithAggregatesInput[]
  OR?: Prisma.PluginComponentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PluginComponentScalarWhereWithAggregatesInput | Prisma.PluginComponentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PluginComponent"> | string
  entry?: Prisma.StringWithAggregatesFilter<"PluginComponent"> | string
  mountOn?: Prisma.StringWithAggregatesFilter<"PluginComponent"> | string
  pluginId?: Prisma.StringWithAggregatesFilter<"PluginComponent"> | string
}

export type PluginComponentCreateInput = {
  id: string
  entry: string
  mountOn: string
  Plugin: Prisma.PluginCreateNestedOneWithoutComponentsInput
}

export type PluginComponentUncheckedCreateInput = {
  id: string
  entry: string
  mountOn: string
  pluginId: string
}

export type PluginComponentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entry?: Prisma.StringFieldUpdateOperationsInput | string
  mountOn?: Prisma.StringFieldUpdateOperationsInput | string
  Plugin?: Prisma.PluginUpdateOneRequiredWithoutComponentsNestedInput
}

export type PluginComponentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entry?: Prisma.StringFieldUpdateOperationsInput | string
  mountOn?: Prisma.StringFieldUpdateOperationsInput | string
  pluginId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginComponentCreateManyInput = {
  id: string
  entry: string
  mountOn: string
  pluginId: string
}

export type PluginComponentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entry?: Prisma.StringFieldUpdateOperationsInput | string
  mountOn?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginComponentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entry?: Prisma.StringFieldUpdateOperationsInput | string
  mountOn?: Prisma.StringFieldUpdateOperationsInput | string
  pluginId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginComponentListRelationFilter = {
  every?: Prisma.PluginComponentWhereInput
  some?: Prisma.PluginComponentWhereInput
  none?: Prisma.PluginComponentWhereInput
}

export type PluginComponentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PluginComponentOrderByRelevanceInput = {
  fields: Prisma.PluginComponentOrderByRelevanceFieldEnum | Prisma.PluginComponentOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PluginComponentIdPluginIdCompoundUniqueInput = {
  id: string
  pluginId: string
}

export type PluginComponentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entry?: Prisma.SortOrder
  mountOn?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginComponentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entry?: Prisma.SortOrder
  mountOn?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginComponentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entry?: Prisma.SortOrder
  mountOn?: Prisma.SortOrder
  pluginId?: Prisma.SortOrder
}

export type PluginComponentCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginComponentCreateWithoutPluginInput, Prisma.PluginComponentUncheckedCreateWithoutPluginInput> | Prisma.PluginComponentCreateWithoutPluginInput[] | Prisma.PluginComponentUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginComponentCreateOrConnectWithoutPluginInput | Prisma.PluginComponentCreateOrConnectWithoutPluginInput[]
  createMany?: Prisma.PluginComponentCreateManyPluginInputEnvelope
  connect?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
}

export type PluginComponentUncheckedCreateNestedManyWithoutPluginInput = {
  create?: Prisma.XOR<Prisma.PluginComponentCreateWithoutPluginInput, Prisma.PluginComponentUncheckedCreateWithoutPluginInput> | Prisma.PluginComponentCreateWithoutPluginInput[] | Prisma.PluginComponentUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginComponentCreateOrConnectWithoutPluginInput | Prisma.PluginComponentCreateOrConnectWithoutPluginInput[]
  createMany?: Prisma.PluginComponentCreateManyPluginInputEnvelope
  connect?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
}

export type PluginComponentUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginComponentCreateWithoutPluginInput, Prisma.PluginComponentUncheckedCreateWithoutPluginInput> | Prisma.PluginComponentCreateWithoutPluginInput[] | Prisma.PluginComponentUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginComponentCreateOrConnectWithoutPluginInput | Prisma.PluginComponentCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginComponentUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginComponentUpsertWithWhereUniqueWithoutPluginInput[]
  createMany?: Prisma.PluginComponentCreateManyPluginInputEnvelope
  set?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
  disconnect?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
  delete?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
  connect?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
  update?: Prisma.PluginComponentUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginComponentUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginComponentUpdateManyWithWhereWithoutPluginInput | Prisma.PluginComponentUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginComponentScalarWhereInput | Prisma.PluginComponentScalarWhereInput[]
}

export type PluginComponentUncheckedUpdateManyWithoutPluginNestedInput = {
  create?: Prisma.XOR<Prisma.PluginComponentCreateWithoutPluginInput, Prisma.PluginComponentUncheckedCreateWithoutPluginInput> | Prisma.PluginComponentCreateWithoutPluginInput[] | Prisma.PluginComponentUncheckedCreateWithoutPluginInput[]
  connectOrCreate?: Prisma.PluginComponentCreateOrConnectWithoutPluginInput | Prisma.PluginComponentCreateOrConnectWithoutPluginInput[]
  upsert?: Prisma.PluginComponentUpsertWithWhereUniqueWithoutPluginInput | Prisma.PluginComponentUpsertWithWhereUniqueWithoutPluginInput[]
  createMany?: Prisma.PluginComponentCreateManyPluginInputEnvelope
  set?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
  disconnect?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
  delete?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
  connect?: Prisma.PluginComponentWhereUniqueInput | Prisma.PluginComponentWhereUniqueInput[]
  update?: Prisma.PluginComponentUpdateWithWhereUniqueWithoutPluginInput | Prisma.PluginComponentUpdateWithWhereUniqueWithoutPluginInput[]
  updateMany?: Prisma.PluginComponentUpdateManyWithWhereWithoutPluginInput | Prisma.PluginComponentUpdateManyWithWhereWithoutPluginInput[]
  deleteMany?: Prisma.PluginComponentScalarWhereInput | Prisma.PluginComponentScalarWhereInput[]
}

export type PluginComponentCreateWithoutPluginInput = {
  id: string
  entry: string
  mountOn: string
}

export type PluginComponentUncheckedCreateWithoutPluginInput = {
  id: string
  entry: string
  mountOn: string
}

export type PluginComponentCreateOrConnectWithoutPluginInput = {
  where: Prisma.PluginComponentWhereUniqueInput
  create: Prisma.XOR<Prisma.PluginComponentCreateWithoutPluginInput, Prisma.PluginComponentUncheckedCreateWithoutPluginInput>
}

export type PluginComponentCreateManyPluginInputEnvelope = {
  data: Prisma.PluginComponentCreateManyPluginInput | Prisma.PluginComponentCreateManyPluginInput[]
  skipDuplicates?: boolean
}

export type PluginComponentUpsertWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginComponentWhereUniqueInput
  update: Prisma.XOR<Prisma.PluginComponentUpdateWithoutPluginInput, Prisma.PluginComponentUncheckedUpdateWithoutPluginInput>
  create: Prisma.XOR<Prisma.PluginComponentCreateWithoutPluginInput, Prisma.PluginComponentUncheckedCreateWithoutPluginInput>
}

export type PluginComponentUpdateWithWhereUniqueWithoutPluginInput = {
  where: Prisma.PluginComponentWhereUniqueInput
  data: Prisma.XOR<Prisma.PluginComponentUpdateWithoutPluginInput, Prisma.PluginComponentUncheckedUpdateWithoutPluginInput>
}

export type PluginComponentUpdateManyWithWhereWithoutPluginInput = {
  where: Prisma.PluginComponentScalarWhereInput
  data: Prisma.XOR<Prisma.PluginComponentUpdateManyMutationInput, Prisma.PluginComponentUncheckedUpdateManyWithoutPluginInput>
}

export type PluginComponentScalarWhereInput = {
  AND?: Prisma.PluginComponentScalarWhereInput | Prisma.PluginComponentScalarWhereInput[]
  OR?: Prisma.PluginComponentScalarWhereInput[]
  NOT?: Prisma.PluginComponentScalarWhereInput | Prisma.PluginComponentScalarWhereInput[]
  id?: Prisma.StringFilter<"PluginComponent"> | string
  entry?: Prisma.StringFilter<"PluginComponent"> | string
  mountOn?: Prisma.StringFilter<"PluginComponent"> | string
  pluginId?: Prisma.StringFilter<"PluginComponent"> | string
}

export type PluginComponentCreateManyPluginInput = {
  id: string
  entry: string
  mountOn: string
}

export type PluginComponentUpdateWithoutPluginInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entry?: Prisma.StringFieldUpdateOperationsInput | string
  mountOn?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginComponentUncheckedUpdateWithoutPluginInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entry?: Prisma.StringFieldUpdateOperationsInput | string
  mountOn?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PluginComponentUncheckedUpdateManyWithoutPluginInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entry?: Prisma.StringFieldUpdateOperationsInput | string
  mountOn?: Prisma.StringFieldUpdateOperationsInput | string
}



export type PluginComponentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  entry?: boolean
  mountOn?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginComponent"]>

export type PluginComponentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  entry?: boolean
  mountOn?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginComponent"]>

export type PluginComponentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  entry?: boolean
  mountOn?: boolean
  pluginId?: boolean
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pluginComponent"]>

export type PluginComponentSelectScalar = {
  id?: boolean
  entry?: boolean
  mountOn?: boolean
  pluginId?: boolean
}

export type PluginComponentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "entry" | "mountOn" | "pluginId", ExtArgs["result"]["pluginComponent"]>
export type PluginComponentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}
export type PluginComponentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}
export type PluginComponentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Plugin?: boolean | Prisma.PluginDefaultArgs<ExtArgs>
}

export type $PluginComponentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PluginComponent"
  objects: {
    Plugin: Prisma.$PluginPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    entry: string
    mountOn: string
    pluginId: string
  }, ExtArgs["result"]["pluginComponent"]>
  composites: {}
}

export type PluginComponentGetPayload<S extends boolean | null | undefined | PluginComponentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload, S>

export type PluginComponentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PluginComponentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PluginComponentCountAggregateInputType | true
  }

export interface PluginComponentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PluginComponent'], meta: { name: 'PluginComponent' } }
  /**
   * Find zero or one PluginComponent that matches the filter.
   * @param {PluginComponentFindUniqueArgs} args - Arguments to find a PluginComponent
   * @example
   * // Get one PluginComponent
   * const pluginComponent = await prisma.pluginComponent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PluginComponentFindUniqueArgs>(args: Prisma.SelectSubset<T, PluginComponentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PluginComponentClient<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PluginComponent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PluginComponentFindUniqueOrThrowArgs} args - Arguments to find a PluginComponent
   * @example
   * // Get one PluginComponent
   * const pluginComponent = await prisma.pluginComponent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PluginComponentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PluginComponentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginComponentClient<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginComponent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginComponentFindFirstArgs} args - Arguments to find a PluginComponent
   * @example
   * // Get one PluginComponent
   * const pluginComponent = await prisma.pluginComponent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PluginComponentFindFirstArgs>(args?: Prisma.SelectSubset<T, PluginComponentFindFirstArgs<ExtArgs>>): Prisma.Prisma__PluginComponentClient<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PluginComponent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginComponentFindFirstOrThrowArgs} args - Arguments to find a PluginComponent
   * @example
   * // Get one PluginComponent
   * const pluginComponent = await prisma.pluginComponent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PluginComponentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PluginComponentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PluginComponentClient<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PluginComponents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginComponentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PluginComponents
   * const pluginComponents = await prisma.pluginComponent.findMany()
   * 
   * // Get first 10 PluginComponents
   * const pluginComponents = await prisma.pluginComponent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pluginComponentWithIdOnly = await prisma.pluginComponent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PluginComponentFindManyArgs>(args?: Prisma.SelectSubset<T, PluginComponentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PluginComponent.
   * @param {PluginComponentCreateArgs} args - Arguments to create a PluginComponent.
   * @example
   * // Create one PluginComponent
   * const PluginComponent = await prisma.pluginComponent.create({
   *   data: {
   *     // ... data to create a PluginComponent
   *   }
   * })
   * 
   */
  create<T extends PluginComponentCreateArgs>(args: Prisma.SelectSubset<T, PluginComponentCreateArgs<ExtArgs>>): Prisma.Prisma__PluginComponentClient<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PluginComponents.
   * @param {PluginComponentCreateManyArgs} args - Arguments to create many PluginComponents.
   * @example
   * // Create many PluginComponents
   * const pluginComponent = await prisma.pluginComponent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PluginComponentCreateManyArgs>(args?: Prisma.SelectSubset<T, PluginComponentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PluginComponents and returns the data saved in the database.
   * @param {PluginComponentCreateManyAndReturnArgs} args - Arguments to create many PluginComponents.
   * @example
   * // Create many PluginComponents
   * const pluginComponent = await prisma.pluginComponent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PluginComponents and only return the `id`
   * const pluginComponentWithIdOnly = await prisma.pluginComponent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PluginComponentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PluginComponentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PluginComponent.
   * @param {PluginComponentDeleteArgs} args - Arguments to delete one PluginComponent.
   * @example
   * // Delete one PluginComponent
   * const PluginComponent = await prisma.pluginComponent.delete({
   *   where: {
   *     // ... filter to delete one PluginComponent
   *   }
   * })
   * 
   */
  delete<T extends PluginComponentDeleteArgs>(args: Prisma.SelectSubset<T, PluginComponentDeleteArgs<ExtArgs>>): Prisma.Prisma__PluginComponentClient<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PluginComponent.
   * @param {PluginComponentUpdateArgs} args - Arguments to update one PluginComponent.
   * @example
   * // Update one PluginComponent
   * const pluginComponent = await prisma.pluginComponent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PluginComponentUpdateArgs>(args: Prisma.SelectSubset<T, PluginComponentUpdateArgs<ExtArgs>>): Prisma.Prisma__PluginComponentClient<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PluginComponents.
   * @param {PluginComponentDeleteManyArgs} args - Arguments to filter PluginComponents to delete.
   * @example
   * // Delete a few PluginComponents
   * const { count } = await prisma.pluginComponent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PluginComponentDeleteManyArgs>(args?: Prisma.SelectSubset<T, PluginComponentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginComponents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginComponentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PluginComponents
   * const pluginComponent = await prisma.pluginComponent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PluginComponentUpdateManyArgs>(args: Prisma.SelectSubset<T, PluginComponentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PluginComponents and returns the data updated in the database.
   * @param {PluginComponentUpdateManyAndReturnArgs} args - Arguments to update many PluginComponents.
   * @example
   * // Update many PluginComponents
   * const pluginComponent = await prisma.pluginComponent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PluginComponents and only return the `id`
   * const pluginComponentWithIdOnly = await prisma.pluginComponent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PluginComponentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PluginComponentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PluginComponent.
   * @param {PluginComponentUpsertArgs} args - Arguments to update or create a PluginComponent.
   * @example
   * // Update or create a PluginComponent
   * const pluginComponent = await prisma.pluginComponent.upsert({
   *   create: {
   *     // ... data to create a PluginComponent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PluginComponent we want to update
   *   }
   * })
   */
  upsert<T extends PluginComponentUpsertArgs>(args: Prisma.SelectSubset<T, PluginComponentUpsertArgs<ExtArgs>>): Prisma.Prisma__PluginComponentClient<runtime.Types.Result.GetResult<Prisma.$PluginComponentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PluginComponents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginComponentCountArgs} args - Arguments to filter PluginComponents to count.
   * @example
   * // Count the number of PluginComponents
   * const count = await prisma.pluginComponent.count({
   *   where: {
   *     // ... the filter for the PluginComponents we want to count
   *   }
   * })
  **/
  count<T extends PluginComponentCountArgs>(
    args?: Prisma.Subset<T, PluginComponentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PluginComponentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PluginComponent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginComponentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PluginComponentAggregateArgs>(args: Prisma.Subset<T, PluginComponentAggregateArgs>): Prisma.PrismaPromise<GetPluginComponentAggregateType<T>>

  /**
   * Group by PluginComponent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PluginComponentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PluginComponentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PluginComponentGroupByArgs['orderBy'] }
      : { orderBy?: PluginComponentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PluginComponentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPluginComponentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PluginComponent model
 */
readonly fields: PluginComponentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PluginComponent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PluginComponentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Plugin<T extends Prisma.PluginDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PluginDefaultArgs<ExtArgs>>): Prisma.Prisma__PluginClient<runtime.Types.Result.GetResult<Prisma.$PluginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PluginComponent model
 */
export interface PluginComponentFieldRefs {
  readonly id: Prisma.FieldRef<"PluginComponent", 'String'>
  readonly entry: Prisma.FieldRef<"PluginComponent", 'String'>
  readonly mountOn: Prisma.FieldRef<"PluginComponent", 'String'>
  readonly pluginId: Prisma.FieldRef<"PluginComponent", 'String'>
}
    

// Custom InputTypes
/**
 * PluginComponent findUnique
 */
export type PluginComponentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * Filter, which PluginComponent to fetch.
   */
  where: Prisma.PluginComponentWhereUniqueInput
}

/**
 * PluginComponent findUniqueOrThrow
 */
export type PluginComponentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * Filter, which PluginComponent to fetch.
   */
  where: Prisma.PluginComponentWhereUniqueInput
}

/**
 * PluginComponent findFirst
 */
export type PluginComponentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * Filter, which PluginComponent to fetch.
   */
  where?: Prisma.PluginComponentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginComponents to fetch.
   */
  orderBy?: Prisma.PluginComponentOrderByWithRelationInput | Prisma.PluginComponentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginComponents.
   */
  cursor?: Prisma.PluginComponentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginComponents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginComponents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginComponents.
   */
  distinct?: Prisma.PluginComponentScalarFieldEnum | Prisma.PluginComponentScalarFieldEnum[]
}

/**
 * PluginComponent findFirstOrThrow
 */
export type PluginComponentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * Filter, which PluginComponent to fetch.
   */
  where?: Prisma.PluginComponentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginComponents to fetch.
   */
  orderBy?: Prisma.PluginComponentOrderByWithRelationInput | Prisma.PluginComponentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PluginComponents.
   */
  cursor?: Prisma.PluginComponentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginComponents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginComponents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PluginComponents.
   */
  distinct?: Prisma.PluginComponentScalarFieldEnum | Prisma.PluginComponentScalarFieldEnum[]
}

/**
 * PluginComponent findMany
 */
export type PluginComponentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * Filter, which PluginComponents to fetch.
   */
  where?: Prisma.PluginComponentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PluginComponents to fetch.
   */
  orderBy?: Prisma.PluginComponentOrderByWithRelationInput | Prisma.PluginComponentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PluginComponents.
   */
  cursor?: Prisma.PluginComponentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PluginComponents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PluginComponents.
   */
  skip?: number
  distinct?: Prisma.PluginComponentScalarFieldEnum | Prisma.PluginComponentScalarFieldEnum[]
}

/**
 * PluginComponent create
 */
export type PluginComponentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * The data needed to create a PluginComponent.
   */
  data: Prisma.XOR<Prisma.PluginComponentCreateInput, Prisma.PluginComponentUncheckedCreateInput>
}

/**
 * PluginComponent createMany
 */
export type PluginComponentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PluginComponents.
   */
  data: Prisma.PluginComponentCreateManyInput | Prisma.PluginComponentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PluginComponent createManyAndReturn
 */
export type PluginComponentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * The data used to create many PluginComponents.
   */
  data: Prisma.PluginComponentCreateManyInput | Prisma.PluginComponentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PluginComponent update
 */
export type PluginComponentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * The data needed to update a PluginComponent.
   */
  data: Prisma.XOR<Prisma.PluginComponentUpdateInput, Prisma.PluginComponentUncheckedUpdateInput>
  /**
   * Choose, which PluginComponent to update.
   */
  where: Prisma.PluginComponentWhereUniqueInput
}

/**
 * PluginComponent updateMany
 */
export type PluginComponentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PluginComponents.
   */
  data: Prisma.XOR<Prisma.PluginComponentUpdateManyMutationInput, Prisma.PluginComponentUncheckedUpdateManyInput>
  /**
   * Filter which PluginComponents to update
   */
  where?: Prisma.PluginComponentWhereInput
  /**
   * Limit how many PluginComponents to update.
   */
  limit?: number
}

/**
 * PluginComponent updateManyAndReturn
 */
export type PluginComponentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * The data used to update PluginComponents.
   */
  data: Prisma.XOR<Prisma.PluginComponentUpdateManyMutationInput, Prisma.PluginComponentUncheckedUpdateManyInput>
  /**
   * Filter which PluginComponents to update
   */
  where?: Prisma.PluginComponentWhereInput
  /**
   * Limit how many PluginComponents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PluginComponent upsert
 */
export type PluginComponentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * The filter to search for the PluginComponent to update in case it exists.
   */
  where: Prisma.PluginComponentWhereUniqueInput
  /**
   * In case the PluginComponent found by the `where` argument doesn't exist, create a new PluginComponent with this data.
   */
  create: Prisma.XOR<Prisma.PluginComponentCreateInput, Prisma.PluginComponentUncheckedCreateInput>
  /**
   * In case the PluginComponent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PluginComponentUpdateInput, Prisma.PluginComponentUncheckedUpdateInput>
}

/**
 * PluginComponent delete
 */
export type PluginComponentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
  /**
   * Filter which PluginComponent to delete.
   */
  where: Prisma.PluginComponentWhereUniqueInput
}

/**
 * PluginComponent deleteMany
 */
export type PluginComponentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PluginComponents to delete
   */
  where?: Prisma.PluginComponentWhereInput
  /**
   * Limit how many PluginComponents to delete.
   */
  limit?: number
}

/**
 * PluginComponent without action
 */
export type PluginComponentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PluginComponent
   */
  select?: Prisma.PluginComponentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PluginComponent
   */
  omit?: Prisma.PluginComponentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PluginComponentInclude<ExtArgs> | null
}
