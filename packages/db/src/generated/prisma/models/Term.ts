
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Term` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Term
 * 
 */
export type TermModel = runtime.Types.Result.DefaultSelection<Prisma.$TermPayload>

export type AggregateTerm = {
  _count: TermCountAggregateOutputType | null
  _avg: TermAvgAggregateOutputType | null
  _sum: TermSumAggregateOutputType | null
  _min: TermMinAggregateOutputType | null
  _max: TermMaxAggregateOutputType | null
}

export type TermAvgAggregateOutputType = {
  id: number | null
}

export type TermSumAggregateOutputType = {
  id: number | null
}

export type TermMinAggregateOutputType = {
  id: number | null
  value: string | null
  context: string | null
  createdAt: Date | null
  updatedAt: Date | null
  languageId: string | null
  creatorId: string | null
  glossaryId: string | null
}

export type TermMaxAggregateOutputType = {
  id: number | null
  value: string | null
  context: string | null
  createdAt: Date | null
  updatedAt: Date | null
  languageId: string | null
  creatorId: string | null
  glossaryId: string | null
}

export type TermCountAggregateOutputType = {
  id: number
  value: number
  context: number
  createdAt: number
  updatedAt: number
  languageId: number
  creatorId: number
  glossaryId: number
  _all: number
}


export type TermAvgAggregateInputType = {
  id?: true
}

export type TermSumAggregateInputType = {
  id?: true
}

export type TermMinAggregateInputType = {
  id?: true
  value?: true
  context?: true
  createdAt?: true
  updatedAt?: true
  languageId?: true
  creatorId?: true
  glossaryId?: true
}

export type TermMaxAggregateInputType = {
  id?: true
  value?: true
  context?: true
  createdAt?: true
  updatedAt?: true
  languageId?: true
  creatorId?: true
  glossaryId?: true
}

export type TermCountAggregateInputType = {
  id?: true
  value?: true
  context?: true
  createdAt?: true
  updatedAt?: true
  languageId?: true
  creatorId?: true
  glossaryId?: true
  _all?: true
}

export type TermAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Term to aggregate.
   */
  where?: Prisma.TermWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terms to fetch.
   */
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TermWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Terms
  **/
  _count?: true | TermCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TermAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TermSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TermMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TermMaxAggregateInputType
}

export type GetTermAggregateType<T extends TermAggregateArgs> = {
      [P in keyof T & keyof AggregateTerm]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTerm[P]>
    : Prisma.GetScalarType<T[P], AggregateTerm[P]>
}




export type TermGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TermWhereInput
  orderBy?: Prisma.TermOrderByWithAggregationInput | Prisma.TermOrderByWithAggregationInput[]
  by: Prisma.TermScalarFieldEnum[] | Prisma.TermScalarFieldEnum
  having?: Prisma.TermScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TermCountAggregateInputType | true
  _avg?: TermAvgAggregateInputType
  _sum?: TermSumAggregateInputType
  _min?: TermMinAggregateInputType
  _max?: TermMaxAggregateInputType
}

export type TermGroupByOutputType = {
  id: number
  value: string
  context: string | null
  createdAt: Date
  updatedAt: Date
  languageId: string
  creatorId: string
  glossaryId: string
  _count: TermCountAggregateOutputType | null
  _avg: TermAvgAggregateOutputType | null
  _sum: TermSumAggregateOutputType | null
  _min: TermMinAggregateOutputType | null
  _max: TermMaxAggregateOutputType | null
}

type GetTermGroupByPayload<T extends TermGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TermGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TermGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TermGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TermGroupByOutputType[P]>
      }
    >
  > 



export type TermWhereInput = {
  AND?: Prisma.TermWhereInput | Prisma.TermWhereInput[]
  OR?: Prisma.TermWhereInput[]
  NOT?: Prisma.TermWhereInput | Prisma.TermWhereInput[]
  id?: Prisma.IntFilter<"Term"> | number
  value?: Prisma.StringFilter<"Term"> | string
  context?: Prisma.StringNullableFilter<"Term"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Term"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Term"> | Date | string
  languageId?: Prisma.StringFilter<"Term"> | string
  creatorId?: Prisma.StringFilter<"Term"> | string
  glossaryId?: Prisma.StringFilter<"Term"> | string
  Language?: Prisma.XOR<Prisma.LanguageScalarRelationFilter, Prisma.LanguageWhereInput>
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Glossary?: Prisma.XOR<Prisma.GlossaryScalarRelationFilter, Prisma.GlossaryWhereInput>
  TermRelation?: Prisma.TermRelationListRelationFilter
  TermTranslaitonRelation?: Prisma.TermRelationListRelationFilter
}

export type TermOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  context?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  glossaryId?: Prisma.SortOrder
  Language?: Prisma.LanguageOrderByWithRelationInput
  Creator?: Prisma.UserOrderByWithRelationInput
  Glossary?: Prisma.GlossaryOrderByWithRelationInput
  TermRelation?: Prisma.TermRelationOrderByRelationAggregateInput
  TermTranslaitonRelation?: Prisma.TermRelationOrderByRelationAggregateInput
  _relevance?: Prisma.TermOrderByRelevanceInput
}

export type TermWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TermWhereInput | Prisma.TermWhereInput[]
  OR?: Prisma.TermWhereInput[]
  NOT?: Prisma.TermWhereInput | Prisma.TermWhereInput[]
  value?: Prisma.StringFilter<"Term"> | string
  context?: Prisma.StringNullableFilter<"Term"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Term"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Term"> | Date | string
  languageId?: Prisma.StringFilter<"Term"> | string
  creatorId?: Prisma.StringFilter<"Term"> | string
  glossaryId?: Prisma.StringFilter<"Term"> | string
  Language?: Prisma.XOR<Prisma.LanguageScalarRelationFilter, Prisma.LanguageWhereInput>
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Glossary?: Prisma.XOR<Prisma.GlossaryScalarRelationFilter, Prisma.GlossaryWhereInput>
  TermRelation?: Prisma.TermRelationListRelationFilter
  TermTranslaitonRelation?: Prisma.TermRelationListRelationFilter
}, "id">

export type TermOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  context?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  glossaryId?: Prisma.SortOrder
  _count?: Prisma.TermCountOrderByAggregateInput
  _avg?: Prisma.TermAvgOrderByAggregateInput
  _max?: Prisma.TermMaxOrderByAggregateInput
  _min?: Prisma.TermMinOrderByAggregateInput
  _sum?: Prisma.TermSumOrderByAggregateInput
}

export type TermScalarWhereWithAggregatesInput = {
  AND?: Prisma.TermScalarWhereWithAggregatesInput | Prisma.TermScalarWhereWithAggregatesInput[]
  OR?: Prisma.TermScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TermScalarWhereWithAggregatesInput | Prisma.TermScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Term"> | number
  value?: Prisma.StringWithAggregatesFilter<"Term"> | string
  context?: Prisma.StringNullableWithAggregatesFilter<"Term"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Term"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Term"> | Date | string
  languageId?: Prisma.StringWithAggregatesFilter<"Term"> | string
  creatorId?: Prisma.StringWithAggregatesFilter<"Term"> | string
  glossaryId?: Prisma.StringWithAggregatesFilter<"Term"> | string
}

export type TermCreateInput = {
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Language: Prisma.LanguageCreateNestedOneWithoutTermsInput
  Creator: Prisma.UserCreateNestedOneWithoutTermsInput
  Glossary: Prisma.GlossaryCreateNestedOneWithoutTermsInput
  TermRelation?: Prisma.TermRelationCreateNestedManyWithoutTermInput
  TermTranslaitonRelation?: Prisma.TermRelationCreateNestedManyWithoutTranslationInput
}

export type TermUncheckedCreateInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  languageId: string
  creatorId: string
  glossaryId: string
  TermRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTermInput
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTranslationInput
}

export type TermUpdateInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Language?: Prisma.LanguageUpdateOneRequiredWithoutTermsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutTermsNestedInput
  Glossary?: Prisma.GlossaryUpdateOneRequiredWithoutTermsNestedInput
  TermRelation?: Prisma.TermRelationUpdateManyWithoutTermNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUpdateManyWithoutTranslationNestedInput
}

export type TermUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  languageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  glossaryId?: Prisma.StringFieldUpdateOperationsInput | string
  TermRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTermNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTranslationNestedInput
}

export type TermCreateManyInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  languageId: string
  creatorId: string
  glossaryId: string
}

export type TermUpdateManyMutationInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TermUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  languageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  glossaryId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TermListRelationFilter = {
  every?: Prisma.TermWhereInput
  some?: Prisma.TermWhereInput
  none?: Prisma.TermWhereInput
}

export type TermOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TermOrderByRelevanceInput = {
  fields: Prisma.TermOrderByRelevanceFieldEnum | Prisma.TermOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TermCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  context?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  glossaryId?: Prisma.SortOrder
}

export type TermAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TermMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  context?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  glossaryId?: Prisma.SortOrder
}

export type TermMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  context?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  glossaryId?: Prisma.SortOrder
}

export type TermSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TermScalarRelationFilter = {
  is?: Prisma.TermWhereInput
  isNot?: Prisma.TermWhereInput
}

export type TermCreateNestedManyWithoutGlossaryInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutGlossaryInput, Prisma.TermUncheckedCreateWithoutGlossaryInput> | Prisma.TermCreateWithoutGlossaryInput[] | Prisma.TermUncheckedCreateWithoutGlossaryInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutGlossaryInput | Prisma.TermCreateOrConnectWithoutGlossaryInput[]
  createMany?: Prisma.TermCreateManyGlossaryInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUncheckedCreateNestedManyWithoutGlossaryInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutGlossaryInput, Prisma.TermUncheckedCreateWithoutGlossaryInput> | Prisma.TermCreateWithoutGlossaryInput[] | Prisma.TermUncheckedCreateWithoutGlossaryInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutGlossaryInput | Prisma.TermCreateOrConnectWithoutGlossaryInput[]
  createMany?: Prisma.TermCreateManyGlossaryInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUpdateManyWithoutGlossaryNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutGlossaryInput, Prisma.TermUncheckedCreateWithoutGlossaryInput> | Prisma.TermCreateWithoutGlossaryInput[] | Prisma.TermUncheckedCreateWithoutGlossaryInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutGlossaryInput | Prisma.TermCreateOrConnectWithoutGlossaryInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutGlossaryInput | Prisma.TermUpsertWithWhereUniqueWithoutGlossaryInput[]
  createMany?: Prisma.TermCreateManyGlossaryInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutGlossaryInput | Prisma.TermUpdateWithWhereUniqueWithoutGlossaryInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutGlossaryInput | Prisma.TermUpdateManyWithWhereWithoutGlossaryInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermUncheckedUpdateManyWithoutGlossaryNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutGlossaryInput, Prisma.TermUncheckedCreateWithoutGlossaryInput> | Prisma.TermCreateWithoutGlossaryInput[] | Prisma.TermUncheckedCreateWithoutGlossaryInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutGlossaryInput | Prisma.TermCreateOrConnectWithoutGlossaryInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutGlossaryInput | Prisma.TermUpsertWithWhereUniqueWithoutGlossaryInput[]
  createMany?: Prisma.TermCreateManyGlossaryInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutGlossaryInput | Prisma.TermUpdateWithWhereUniqueWithoutGlossaryInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutGlossaryInput | Prisma.TermUpdateManyWithWhereWithoutGlossaryInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermCreateNestedOneWithoutTermRelationInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutTermRelationInput, Prisma.TermUncheckedCreateWithoutTermRelationInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutTermRelationInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermCreateNestedOneWithoutTermTranslaitonRelationInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutTermTranslaitonRelationInput, Prisma.TermUncheckedCreateWithoutTermTranslaitonRelationInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutTermTranslaitonRelationInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutTermRelationNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutTermRelationInput, Prisma.TermUncheckedCreateWithoutTermRelationInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutTermRelationInput
  upsert?: Prisma.TermUpsertWithoutTermRelationInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutTermRelationInput, Prisma.TermUpdateWithoutTermRelationInput>, Prisma.TermUncheckedUpdateWithoutTermRelationInput>
}

export type TermUpdateOneRequiredWithoutTermTranslaitonRelationNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutTermTranslaitonRelationInput, Prisma.TermUncheckedCreateWithoutTermTranslaitonRelationInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutTermTranslaitonRelationInput
  upsert?: Prisma.TermUpsertWithoutTermTranslaitonRelationInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutTermTranslaitonRelationInput, Prisma.TermUpdateWithoutTermTranslaitonRelationInput>, Prisma.TermUncheckedUpdateWithoutTermTranslaitonRelationInput>
}

export type TermCreateNestedManyWithoutLanguageInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutLanguageInput, Prisma.TermUncheckedCreateWithoutLanguageInput> | Prisma.TermCreateWithoutLanguageInput[] | Prisma.TermUncheckedCreateWithoutLanguageInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutLanguageInput | Prisma.TermCreateOrConnectWithoutLanguageInput[]
  createMany?: Prisma.TermCreateManyLanguageInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUncheckedCreateNestedManyWithoutLanguageInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutLanguageInput, Prisma.TermUncheckedCreateWithoutLanguageInput> | Prisma.TermCreateWithoutLanguageInput[] | Prisma.TermUncheckedCreateWithoutLanguageInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutLanguageInput | Prisma.TermCreateOrConnectWithoutLanguageInput[]
  createMany?: Prisma.TermCreateManyLanguageInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUpdateManyWithoutLanguageNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutLanguageInput, Prisma.TermUncheckedCreateWithoutLanguageInput> | Prisma.TermCreateWithoutLanguageInput[] | Prisma.TermUncheckedCreateWithoutLanguageInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutLanguageInput | Prisma.TermCreateOrConnectWithoutLanguageInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutLanguageInput | Prisma.TermUpsertWithWhereUniqueWithoutLanguageInput[]
  createMany?: Prisma.TermCreateManyLanguageInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutLanguageInput | Prisma.TermUpdateWithWhereUniqueWithoutLanguageInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutLanguageInput | Prisma.TermUpdateManyWithWhereWithoutLanguageInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermUncheckedUpdateManyWithoutLanguageNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutLanguageInput, Prisma.TermUncheckedCreateWithoutLanguageInput> | Prisma.TermCreateWithoutLanguageInput[] | Prisma.TermUncheckedCreateWithoutLanguageInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutLanguageInput | Prisma.TermCreateOrConnectWithoutLanguageInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutLanguageInput | Prisma.TermUpsertWithWhereUniqueWithoutLanguageInput[]
  createMany?: Prisma.TermCreateManyLanguageInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutLanguageInput | Prisma.TermUpdateWithWhereUniqueWithoutLanguageInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutLanguageInput | Prisma.TermUpdateManyWithWhereWithoutLanguageInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutCreatorInput, Prisma.TermUncheckedCreateWithoutCreatorInput> | Prisma.TermCreateWithoutCreatorInput[] | Prisma.TermUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutCreatorInput | Prisma.TermCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.TermCreateManyCreatorInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutCreatorInput, Prisma.TermUncheckedCreateWithoutCreatorInput> | Prisma.TermCreateWithoutCreatorInput[] | Prisma.TermUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutCreatorInput | Prisma.TermCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.TermCreateManyCreatorInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutCreatorInput, Prisma.TermUncheckedCreateWithoutCreatorInput> | Prisma.TermCreateWithoutCreatorInput[] | Prisma.TermUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutCreatorInput | Prisma.TermCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutCreatorInput | Prisma.TermUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.TermCreateManyCreatorInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutCreatorInput | Prisma.TermUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutCreatorInput | Prisma.TermUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutCreatorInput, Prisma.TermUncheckedCreateWithoutCreatorInput> | Prisma.TermCreateWithoutCreatorInput[] | Prisma.TermUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutCreatorInput | Prisma.TermCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutCreatorInput | Prisma.TermUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.TermCreateManyCreatorInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutCreatorInput | Prisma.TermUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutCreatorInput | Prisma.TermUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermCreateWithoutGlossaryInput = {
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Language: Prisma.LanguageCreateNestedOneWithoutTermsInput
  Creator: Prisma.UserCreateNestedOneWithoutTermsInput
  TermRelation?: Prisma.TermRelationCreateNestedManyWithoutTermInput
  TermTranslaitonRelation?: Prisma.TermRelationCreateNestedManyWithoutTranslationInput
}

export type TermUncheckedCreateWithoutGlossaryInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  languageId: string
  creatorId: string
  TermRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTermInput
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTranslationInput
}

export type TermCreateOrConnectWithoutGlossaryInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutGlossaryInput, Prisma.TermUncheckedCreateWithoutGlossaryInput>
}

export type TermCreateManyGlossaryInputEnvelope = {
  data: Prisma.TermCreateManyGlossaryInput | Prisma.TermCreateManyGlossaryInput[]
  skipDuplicates?: boolean
}

export type TermUpsertWithWhereUniqueWithoutGlossaryInput = {
  where: Prisma.TermWhereUniqueInput
  update: Prisma.XOR<Prisma.TermUpdateWithoutGlossaryInput, Prisma.TermUncheckedUpdateWithoutGlossaryInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutGlossaryInput, Prisma.TermUncheckedCreateWithoutGlossaryInput>
}

export type TermUpdateWithWhereUniqueWithoutGlossaryInput = {
  where: Prisma.TermWhereUniqueInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutGlossaryInput, Prisma.TermUncheckedUpdateWithoutGlossaryInput>
}

export type TermUpdateManyWithWhereWithoutGlossaryInput = {
  where: Prisma.TermScalarWhereInput
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyWithoutGlossaryInput>
}

export type TermScalarWhereInput = {
  AND?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
  OR?: Prisma.TermScalarWhereInput[]
  NOT?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
  id?: Prisma.IntFilter<"Term"> | number
  value?: Prisma.StringFilter<"Term"> | string
  context?: Prisma.StringNullableFilter<"Term"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Term"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Term"> | Date | string
  languageId?: Prisma.StringFilter<"Term"> | string
  creatorId?: Prisma.StringFilter<"Term"> | string
  glossaryId?: Prisma.StringFilter<"Term"> | string
}

export type TermCreateWithoutTermRelationInput = {
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Language: Prisma.LanguageCreateNestedOneWithoutTermsInput
  Creator: Prisma.UserCreateNestedOneWithoutTermsInput
  Glossary: Prisma.GlossaryCreateNestedOneWithoutTermsInput
  TermTranslaitonRelation?: Prisma.TermRelationCreateNestedManyWithoutTranslationInput
}

export type TermUncheckedCreateWithoutTermRelationInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  languageId: string
  creatorId: string
  glossaryId: string
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTranslationInput
}

export type TermCreateOrConnectWithoutTermRelationInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutTermRelationInput, Prisma.TermUncheckedCreateWithoutTermRelationInput>
}

export type TermCreateWithoutTermTranslaitonRelationInput = {
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Language: Prisma.LanguageCreateNestedOneWithoutTermsInput
  Creator: Prisma.UserCreateNestedOneWithoutTermsInput
  Glossary: Prisma.GlossaryCreateNestedOneWithoutTermsInput
  TermRelation?: Prisma.TermRelationCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutTermTranslaitonRelationInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  languageId: string
  creatorId: string
  glossaryId: string
  TermRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutTermTranslaitonRelationInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutTermTranslaitonRelationInput, Prisma.TermUncheckedCreateWithoutTermTranslaitonRelationInput>
}

export type TermUpsertWithoutTermRelationInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutTermRelationInput, Prisma.TermUncheckedUpdateWithoutTermRelationInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutTermRelationInput, Prisma.TermUncheckedCreateWithoutTermRelationInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutTermRelationInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutTermRelationInput, Prisma.TermUncheckedUpdateWithoutTermRelationInput>
}

export type TermUpdateWithoutTermRelationInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Language?: Prisma.LanguageUpdateOneRequiredWithoutTermsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutTermsNestedInput
  Glossary?: Prisma.GlossaryUpdateOneRequiredWithoutTermsNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUpdateManyWithoutTranslationNestedInput
}

export type TermUncheckedUpdateWithoutTermRelationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  languageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  glossaryId?: Prisma.StringFieldUpdateOperationsInput | string
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTranslationNestedInput
}

export type TermUpsertWithoutTermTranslaitonRelationInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutTermTranslaitonRelationInput, Prisma.TermUncheckedUpdateWithoutTermTranslaitonRelationInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutTermTranslaitonRelationInput, Prisma.TermUncheckedCreateWithoutTermTranslaitonRelationInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutTermTranslaitonRelationInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutTermTranslaitonRelationInput, Prisma.TermUncheckedUpdateWithoutTermTranslaitonRelationInput>
}

export type TermUpdateWithoutTermTranslaitonRelationInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Language?: Prisma.LanguageUpdateOneRequiredWithoutTermsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutTermsNestedInput
  Glossary?: Prisma.GlossaryUpdateOneRequiredWithoutTermsNestedInput
  TermRelation?: Prisma.TermRelationUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutTermTranslaitonRelationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  languageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  glossaryId?: Prisma.StringFieldUpdateOperationsInput | string
  TermRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateWithoutLanguageInput = {
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Creator: Prisma.UserCreateNestedOneWithoutTermsInput
  Glossary: Prisma.GlossaryCreateNestedOneWithoutTermsInput
  TermRelation?: Prisma.TermRelationCreateNestedManyWithoutTermInput
  TermTranslaitonRelation?: Prisma.TermRelationCreateNestedManyWithoutTranslationInput
}

export type TermUncheckedCreateWithoutLanguageInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  glossaryId: string
  TermRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTermInput
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTranslationInput
}

export type TermCreateOrConnectWithoutLanguageInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutLanguageInput, Prisma.TermUncheckedCreateWithoutLanguageInput>
}

export type TermCreateManyLanguageInputEnvelope = {
  data: Prisma.TermCreateManyLanguageInput | Prisma.TermCreateManyLanguageInput[]
  skipDuplicates?: boolean
}

export type TermUpsertWithWhereUniqueWithoutLanguageInput = {
  where: Prisma.TermWhereUniqueInput
  update: Prisma.XOR<Prisma.TermUpdateWithoutLanguageInput, Prisma.TermUncheckedUpdateWithoutLanguageInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutLanguageInput, Prisma.TermUncheckedCreateWithoutLanguageInput>
}

export type TermUpdateWithWhereUniqueWithoutLanguageInput = {
  where: Prisma.TermWhereUniqueInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutLanguageInput, Prisma.TermUncheckedUpdateWithoutLanguageInput>
}

export type TermUpdateManyWithWhereWithoutLanguageInput = {
  where: Prisma.TermScalarWhereInput
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyWithoutLanguageInput>
}

export type TermCreateWithoutCreatorInput = {
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Language: Prisma.LanguageCreateNestedOneWithoutTermsInput
  Glossary: Prisma.GlossaryCreateNestedOneWithoutTermsInput
  TermRelation?: Prisma.TermRelationCreateNestedManyWithoutTermInput
  TermTranslaitonRelation?: Prisma.TermRelationCreateNestedManyWithoutTranslationInput
}

export type TermUncheckedCreateWithoutCreatorInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  languageId: string
  glossaryId: string
  TermRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTermInput
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedCreateNestedManyWithoutTranslationInput
}

export type TermCreateOrConnectWithoutCreatorInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutCreatorInput, Prisma.TermUncheckedCreateWithoutCreatorInput>
}

export type TermCreateManyCreatorInputEnvelope = {
  data: Prisma.TermCreateManyCreatorInput | Prisma.TermCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type TermUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.TermWhereUniqueInput
  update: Prisma.XOR<Prisma.TermUpdateWithoutCreatorInput, Prisma.TermUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutCreatorInput, Prisma.TermUncheckedCreateWithoutCreatorInput>
}

export type TermUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.TermWhereUniqueInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutCreatorInput, Prisma.TermUncheckedUpdateWithoutCreatorInput>
}

export type TermUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.TermScalarWhereInput
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyWithoutCreatorInput>
}

export type TermCreateManyGlossaryInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  languageId: string
  creatorId: string
}

export type TermUpdateWithoutGlossaryInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Language?: Prisma.LanguageUpdateOneRequiredWithoutTermsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutTermsNestedInput
  TermRelation?: Prisma.TermRelationUpdateManyWithoutTermNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUpdateManyWithoutTranslationNestedInput
}

export type TermUncheckedUpdateWithoutGlossaryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  languageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  TermRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTermNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTranslationNestedInput
}

export type TermUncheckedUpdateManyWithoutGlossaryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  languageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TermCreateManyLanguageInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  glossaryId: string
}

export type TermUpdateWithoutLanguageInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Creator?: Prisma.UserUpdateOneRequiredWithoutTermsNestedInput
  Glossary?: Prisma.GlossaryUpdateOneRequiredWithoutTermsNestedInput
  TermRelation?: Prisma.TermRelationUpdateManyWithoutTermNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUpdateManyWithoutTranslationNestedInput
}

export type TermUncheckedUpdateWithoutLanguageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  glossaryId?: Prisma.StringFieldUpdateOperationsInput | string
  TermRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTermNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTranslationNestedInput
}

export type TermUncheckedUpdateManyWithoutLanguageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  glossaryId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TermCreateManyCreatorInput = {
  id?: number
  value: string
  context?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  languageId: string
  glossaryId: string
}

export type TermUpdateWithoutCreatorInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Language?: Prisma.LanguageUpdateOneRequiredWithoutTermsNestedInput
  Glossary?: Prisma.GlossaryUpdateOneRequiredWithoutTermsNestedInput
  TermRelation?: Prisma.TermRelationUpdateManyWithoutTermNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUpdateManyWithoutTranslationNestedInput
}

export type TermUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  languageId?: Prisma.StringFieldUpdateOperationsInput | string
  glossaryId?: Prisma.StringFieldUpdateOperationsInput | string
  TermRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTermNestedInput
  TermTranslaitonRelation?: Prisma.TermRelationUncheckedUpdateManyWithoutTranslationNestedInput
}

export type TermUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  context?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  languageId?: Prisma.StringFieldUpdateOperationsInput | string
  glossaryId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type TermCountOutputType
 */

export type TermCountOutputType = {
  TermRelation: number
  TermTranslaitonRelation: number
}

export type TermCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TermRelation?: boolean | TermCountOutputTypeCountTermRelationArgs
  TermTranslaitonRelation?: boolean | TermCountOutputTypeCountTermTranslaitonRelationArgs
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TermCountOutputType
   */
  select?: Prisma.TermCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountTermRelationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TermRelationWhereInput
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountTermTranslaitonRelationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TermRelationWhereInput
}


export type TermSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
  context?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  languageId?: boolean
  creatorId?: boolean
  glossaryId?: boolean
  Language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Glossary?: boolean | Prisma.GlossaryDefaultArgs<ExtArgs>
  TermRelation?: boolean | Prisma.Term$TermRelationArgs<ExtArgs>
  TermTranslaitonRelation?: boolean | Prisma.Term$TermTranslaitonRelationArgs<ExtArgs>
  _count?: boolean | Prisma.TermCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["term"]>

export type TermSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
  context?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  languageId?: boolean
  creatorId?: boolean
  glossaryId?: boolean
  Language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Glossary?: boolean | Prisma.GlossaryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["term"]>

export type TermSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
  context?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  languageId?: boolean
  creatorId?: boolean
  glossaryId?: boolean
  Language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Glossary?: boolean | Prisma.GlossaryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["term"]>

export type TermSelectScalar = {
  id?: boolean
  value?: boolean
  context?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  languageId?: boolean
  creatorId?: boolean
  glossaryId?: boolean
}

export type TermOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "value" | "context" | "createdAt" | "updatedAt" | "languageId" | "creatorId" | "glossaryId", ExtArgs["result"]["term"]>
export type TermInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Glossary?: boolean | Prisma.GlossaryDefaultArgs<ExtArgs>
  TermRelation?: boolean | Prisma.Term$TermRelationArgs<ExtArgs>
  TermTranslaitonRelation?: boolean | Prisma.Term$TermTranslaitonRelationArgs<ExtArgs>
  _count?: boolean | Prisma.TermCountOutputTypeDefaultArgs<ExtArgs>
}
export type TermIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Glossary?: boolean | Prisma.GlossaryDefaultArgs<ExtArgs>
}
export type TermIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Glossary?: boolean | Prisma.GlossaryDefaultArgs<ExtArgs>
}

export type $TermPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Term"
  objects: {
    Language: Prisma.$LanguagePayload<ExtArgs>
    Creator: Prisma.$UserPayload<ExtArgs>
    Glossary: Prisma.$GlossaryPayload<ExtArgs>
    TermRelation: Prisma.$TermRelationPayload<ExtArgs>[]
    TermTranslaitonRelation: Prisma.$TermRelationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    value: string
    context: string | null
    createdAt: Date
    updatedAt: Date
    languageId: string
    creatorId: string
    glossaryId: string
  }, ExtArgs["result"]["term"]>
  composites: {}
}

export type TermGetPayload<S extends boolean | null | undefined | TermDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TermPayload, S>

export type TermCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TermFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TermCountAggregateInputType | true
  }

export interface TermDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Term'], meta: { name: 'Term' } }
  /**
   * Find zero or one Term that matches the filter.
   * @param {TermFindUniqueArgs} args - Arguments to find a Term
   * @example
   * // Get one Term
   * const term = await prisma.term.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TermFindUniqueArgs>(args: Prisma.SelectSubset<T, TermFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Term that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TermFindUniqueOrThrowArgs} args - Arguments to find a Term
   * @example
   * // Get one Term
   * const term = await prisma.term.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TermFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TermFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Term that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermFindFirstArgs} args - Arguments to find a Term
   * @example
   * // Get one Term
   * const term = await prisma.term.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TermFindFirstArgs>(args?: Prisma.SelectSubset<T, TermFindFirstArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Term that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermFindFirstOrThrowArgs} args - Arguments to find a Term
   * @example
   * // Get one Term
   * const term = await prisma.term.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TermFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TermFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Terms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Terms
   * const terms = await prisma.term.findMany()
   * 
   * // Get first 10 Terms
   * const terms = await prisma.term.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const termWithIdOnly = await prisma.term.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TermFindManyArgs>(args?: Prisma.SelectSubset<T, TermFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Term.
   * @param {TermCreateArgs} args - Arguments to create a Term.
   * @example
   * // Create one Term
   * const Term = await prisma.term.create({
   *   data: {
   *     // ... data to create a Term
   *   }
   * })
   * 
   */
  create<T extends TermCreateArgs>(args: Prisma.SelectSubset<T, TermCreateArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Terms.
   * @param {TermCreateManyArgs} args - Arguments to create many Terms.
   * @example
   * // Create many Terms
   * const term = await prisma.term.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TermCreateManyArgs>(args?: Prisma.SelectSubset<T, TermCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Terms and returns the data saved in the database.
   * @param {TermCreateManyAndReturnArgs} args - Arguments to create many Terms.
   * @example
   * // Create many Terms
   * const term = await prisma.term.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Terms and only return the `id`
   * const termWithIdOnly = await prisma.term.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TermCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TermCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Term.
   * @param {TermDeleteArgs} args - Arguments to delete one Term.
   * @example
   * // Delete one Term
   * const Term = await prisma.term.delete({
   *   where: {
   *     // ... filter to delete one Term
   *   }
   * })
   * 
   */
  delete<T extends TermDeleteArgs>(args: Prisma.SelectSubset<T, TermDeleteArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Term.
   * @param {TermUpdateArgs} args - Arguments to update one Term.
   * @example
   * // Update one Term
   * const term = await prisma.term.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TermUpdateArgs>(args: Prisma.SelectSubset<T, TermUpdateArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Terms.
   * @param {TermDeleteManyArgs} args - Arguments to filter Terms to delete.
   * @example
   * // Delete a few Terms
   * const { count } = await prisma.term.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TermDeleteManyArgs>(args?: Prisma.SelectSubset<T, TermDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Terms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Terms
   * const term = await prisma.term.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TermUpdateManyArgs>(args: Prisma.SelectSubset<T, TermUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Terms and returns the data updated in the database.
   * @param {TermUpdateManyAndReturnArgs} args - Arguments to update many Terms.
   * @example
   * // Update many Terms
   * const term = await prisma.term.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Terms and only return the `id`
   * const termWithIdOnly = await prisma.term.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TermUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TermUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Term.
   * @param {TermUpsertArgs} args - Arguments to update or create a Term.
   * @example
   * // Update or create a Term
   * const term = await prisma.term.upsert({
   *   create: {
   *     // ... data to create a Term
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Term we want to update
   *   }
   * })
   */
  upsert<T extends TermUpsertArgs>(args: Prisma.SelectSubset<T, TermUpsertArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Terms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermCountArgs} args - Arguments to filter Terms to count.
   * @example
   * // Count the number of Terms
   * const count = await prisma.term.count({
   *   where: {
   *     // ... the filter for the Terms we want to count
   *   }
   * })
  **/
  count<T extends TermCountArgs>(
    args?: Prisma.Subset<T, TermCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TermCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Term.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TermAggregateArgs>(args: Prisma.Subset<T, TermAggregateArgs>): Prisma.PrismaPromise<GetTermAggregateType<T>>

  /**
   * Group by Term.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TermGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TermGroupByArgs['orderBy'] }
      : { orderBy?: TermGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Term model
 */
readonly fields: TermFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Term.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TermClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Language<T extends Prisma.LanguageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LanguageDefaultArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Glossary<T extends Prisma.GlossaryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GlossaryDefaultArgs<ExtArgs>>): Prisma.Prisma__GlossaryClient<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  TermRelation<T extends Prisma.Term$TermRelationArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$TermRelationArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  TermTranslaitonRelation<T extends Prisma.Term$TermTranslaitonRelationArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$TermTranslaitonRelationArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Term model
 */
export interface TermFieldRefs {
  readonly id: Prisma.FieldRef<"Term", 'Int'>
  readonly value: Prisma.FieldRef<"Term", 'String'>
  readonly context: Prisma.FieldRef<"Term", 'String'>
  readonly createdAt: Prisma.FieldRef<"Term", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Term", 'DateTime'>
  readonly languageId: Prisma.FieldRef<"Term", 'String'>
  readonly creatorId: Prisma.FieldRef<"Term", 'String'>
  readonly glossaryId: Prisma.FieldRef<"Term", 'String'>
}
    

// Custom InputTypes
/**
 * Term findUnique
 */
export type TermFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Term to fetch.
   */
  where: Prisma.TermWhereUniqueInput
}

/**
 * Term findUniqueOrThrow
 */
export type TermFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Term to fetch.
   */
  where: Prisma.TermWhereUniqueInput
}

/**
 * Term findFirst
 */
export type TermFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Term to fetch.
   */
  where?: Prisma.TermWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terms to fetch.
   */
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Terms.
   */
  cursor?: Prisma.TermWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Terms.
   */
  distinct?: Prisma.TermScalarFieldEnum | Prisma.TermScalarFieldEnum[]
}

/**
 * Term findFirstOrThrow
 */
export type TermFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Term to fetch.
   */
  where?: Prisma.TermWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terms to fetch.
   */
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Terms.
   */
  cursor?: Prisma.TermWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Terms.
   */
  distinct?: Prisma.TermScalarFieldEnum | Prisma.TermScalarFieldEnum[]
}

/**
 * Term findMany
 */
export type TermFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Terms to fetch.
   */
  where?: Prisma.TermWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terms to fetch.
   */
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Terms.
   */
  cursor?: Prisma.TermWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terms.
   */
  skip?: number
  distinct?: Prisma.TermScalarFieldEnum | Prisma.TermScalarFieldEnum[]
}

/**
 * Term create
 */
export type TermCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * The data needed to create a Term.
   */
  data: Prisma.XOR<Prisma.TermCreateInput, Prisma.TermUncheckedCreateInput>
}

/**
 * Term createMany
 */
export type TermCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Terms.
   */
  data: Prisma.TermCreateManyInput | Prisma.TermCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Term createManyAndReturn
 */
export type TermCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * The data used to create many Terms.
   */
  data: Prisma.TermCreateManyInput | Prisma.TermCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Term update
 */
export type TermUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * The data needed to update a Term.
   */
  data: Prisma.XOR<Prisma.TermUpdateInput, Prisma.TermUncheckedUpdateInput>
  /**
   * Choose, which Term to update.
   */
  where: Prisma.TermWhereUniqueInput
}

/**
 * Term updateMany
 */
export type TermUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Terms.
   */
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyInput>
  /**
   * Filter which Terms to update
   */
  where?: Prisma.TermWhereInput
  /**
   * Limit how many Terms to update.
   */
  limit?: number
}

/**
 * Term updateManyAndReturn
 */
export type TermUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * The data used to update Terms.
   */
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyInput>
  /**
   * Filter which Terms to update
   */
  where?: Prisma.TermWhereInput
  /**
   * Limit how many Terms to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Term upsert
 */
export type TermUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * The filter to search for the Term to update in case it exists.
   */
  where: Prisma.TermWhereUniqueInput
  /**
   * In case the Term found by the `where` argument doesn't exist, create a new Term with this data.
   */
  create: Prisma.XOR<Prisma.TermCreateInput, Prisma.TermUncheckedCreateInput>
  /**
   * In case the Term was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TermUpdateInput, Prisma.TermUncheckedUpdateInput>
}

/**
 * Term delete
 */
export type TermDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter which Term to delete.
   */
  where: Prisma.TermWhereUniqueInput
}

/**
 * Term deleteMany
 */
export type TermDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Terms to delete
   */
  where?: Prisma.TermWhereInput
  /**
   * Limit how many Terms to delete.
   */
  limit?: number
}

/**
 * Term.TermRelation
 */
export type Term$TermRelationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TermRelation
   */
  select?: Prisma.TermRelationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TermRelation
   */
  omit?: Prisma.TermRelationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermRelationInclude<ExtArgs> | null
  where?: Prisma.TermRelationWhereInput
  orderBy?: Prisma.TermRelationOrderByWithRelationInput | Prisma.TermRelationOrderByWithRelationInput[]
  cursor?: Prisma.TermRelationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TermRelationScalarFieldEnum | Prisma.TermRelationScalarFieldEnum[]
}

/**
 * Term.TermTranslaitonRelation
 */
export type Term$TermTranslaitonRelationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TermRelation
   */
  select?: Prisma.TermRelationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TermRelation
   */
  omit?: Prisma.TermRelationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermRelationInclude<ExtArgs> | null
  where?: Prisma.TermRelationWhereInput
  orderBy?: Prisma.TermRelationOrderByWithRelationInput | Prisma.TermRelationOrderByWithRelationInput[]
  cursor?: Prisma.TermRelationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TermRelationScalarFieldEnum | Prisma.TermRelationScalarFieldEnum[]
}

/**
 * Term without action
 */
export type TermDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
}
