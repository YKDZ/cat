
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FileType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FileType
 * 
 */
export type FileTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$FileTypePayload>

export type AggregateFileType = {
  _count: FileTypeCountAggregateOutputType | null
  _avg: FileTypeAvgAggregateOutputType | null
  _sum: FileTypeSumAggregateOutputType | null
  _min: FileTypeMinAggregateOutputType | null
  _max: FileTypeMaxAggregateOutputType | null
}

export type FileTypeAvgAggregateOutputType = {
  id: number | null
}

export type FileTypeSumAggregateOutputType = {
  id: number | null
}

export type FileTypeMinAggregateOutputType = {
  id: number | null
  name: string | null
  mimeType: string | null
  icon: string | null
}

export type FileTypeMaxAggregateOutputType = {
  id: number | null
  name: string | null
  mimeType: string | null
  icon: string | null
}

export type FileTypeCountAggregateOutputType = {
  id: number
  name: number
  mimeType: number
  icon: number
  _all: number
}


export type FileTypeAvgAggregateInputType = {
  id?: true
}

export type FileTypeSumAggregateInputType = {
  id?: true
}

export type FileTypeMinAggregateInputType = {
  id?: true
  name?: true
  mimeType?: true
  icon?: true
}

export type FileTypeMaxAggregateInputType = {
  id?: true
  name?: true
  mimeType?: true
  icon?: true
}

export type FileTypeCountAggregateInputType = {
  id?: true
  name?: true
  mimeType?: true
  icon?: true
  _all?: true
}

export type FileTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FileType to aggregate.
   */
  where?: Prisma.FileTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileTypes to fetch.
   */
  orderBy?: Prisma.FileTypeOrderByWithRelationInput | Prisma.FileTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FileTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FileTypes
  **/
  _count?: true | FileTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FileTypeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FileTypeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FileTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FileTypeMaxAggregateInputType
}

export type GetFileTypeAggregateType<T extends FileTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateFileType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFileType[P]>
    : Prisma.GetScalarType<T[P], AggregateFileType[P]>
}




export type FileTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FileTypeWhereInput
  orderBy?: Prisma.FileTypeOrderByWithAggregationInput | Prisma.FileTypeOrderByWithAggregationInput[]
  by: Prisma.FileTypeScalarFieldEnum[] | Prisma.FileTypeScalarFieldEnum
  having?: Prisma.FileTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FileTypeCountAggregateInputType | true
  _avg?: FileTypeAvgAggregateInputType
  _sum?: FileTypeSumAggregateInputType
  _min?: FileTypeMinAggregateInputType
  _max?: FileTypeMaxAggregateInputType
}

export type FileTypeGroupByOutputType = {
  id: number
  name: string
  mimeType: string
  icon: string
  _count: FileTypeCountAggregateOutputType | null
  _avg: FileTypeAvgAggregateOutputType | null
  _sum: FileTypeSumAggregateOutputType | null
  _min: FileTypeMinAggregateOutputType | null
  _max: FileTypeMaxAggregateOutputType | null
}

type GetFileTypeGroupByPayload<T extends FileTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FileTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FileTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FileTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FileTypeGroupByOutputType[P]>
      }
    >
  > 



export type FileTypeWhereInput = {
  AND?: Prisma.FileTypeWhereInput | Prisma.FileTypeWhereInput[]
  OR?: Prisma.FileTypeWhereInput[]
  NOT?: Prisma.FileTypeWhereInput | Prisma.FileTypeWhereInput[]
  id?: Prisma.IntFilter<"FileType"> | number
  name?: Prisma.StringFilter<"FileType"> | string
  mimeType?: Prisma.StringFilter<"FileType"> | string
  icon?: Prisma.StringFilter<"FileType"> | string
  Files?: Prisma.FileListRelationFilter
}

export type FileTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  Files?: Prisma.FileOrderByRelationAggregateInput
  _relevance?: Prisma.FileTypeOrderByRelevanceInput
}

export type FileTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  mimeType?: string
  AND?: Prisma.FileTypeWhereInput | Prisma.FileTypeWhereInput[]
  OR?: Prisma.FileTypeWhereInput[]
  NOT?: Prisma.FileTypeWhereInput | Prisma.FileTypeWhereInput[]
  name?: Prisma.StringFilter<"FileType"> | string
  icon?: Prisma.StringFilter<"FileType"> | string
  Files?: Prisma.FileListRelationFilter
}, "id" | "mimeType">

export type FileTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  _count?: Prisma.FileTypeCountOrderByAggregateInput
  _avg?: Prisma.FileTypeAvgOrderByAggregateInput
  _max?: Prisma.FileTypeMaxOrderByAggregateInput
  _min?: Prisma.FileTypeMinOrderByAggregateInput
  _sum?: Prisma.FileTypeSumOrderByAggregateInput
}

export type FileTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.FileTypeScalarWhereWithAggregatesInput | Prisma.FileTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.FileTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FileTypeScalarWhereWithAggregatesInput | Prisma.FileTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"FileType"> | number
  name?: Prisma.StringWithAggregatesFilter<"FileType"> | string
  mimeType?: Prisma.StringWithAggregatesFilter<"FileType"> | string
  icon?: Prisma.StringWithAggregatesFilter<"FileType"> | string
}

export type FileTypeCreateInput = {
  name: string
  mimeType: string
  icon?: string
  Files?: Prisma.FileCreateNestedManyWithoutTypeInput
}

export type FileTypeUncheckedCreateInput = {
  id?: number
  name: string
  mimeType: string
  icon?: string
  Files?: Prisma.FileUncheckedCreateNestedManyWithoutTypeInput
}

export type FileTypeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  Files?: Prisma.FileUpdateManyWithoutTypeNestedInput
}

export type FileTypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  Files?: Prisma.FileUncheckedUpdateManyWithoutTypeNestedInput
}

export type FileTypeCreateManyInput = {
  id?: number
  name: string
  mimeType: string
  icon?: string
}

export type FileTypeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileTypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileTypeScalarRelationFilter = {
  is?: Prisma.FileTypeWhereInput
  isNot?: Prisma.FileTypeWhereInput
}

export type FileTypeOrderByRelevanceInput = {
  fields: Prisma.FileTypeOrderByRelevanceFieldEnum | Prisma.FileTypeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FileTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  icon?: Prisma.SortOrder
}

export type FileTypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FileTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  icon?: Prisma.SortOrder
}

export type FileTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  icon?: Prisma.SortOrder
}

export type FileTypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FileTypeCreateNestedOneWithoutFilesInput = {
  create?: Prisma.XOR<Prisma.FileTypeCreateWithoutFilesInput, Prisma.FileTypeUncheckedCreateWithoutFilesInput>
  connectOrCreate?: Prisma.FileTypeCreateOrConnectWithoutFilesInput
  connect?: Prisma.FileTypeWhereUniqueInput
}

export type FileTypeUpdateOneRequiredWithoutFilesNestedInput = {
  create?: Prisma.XOR<Prisma.FileTypeCreateWithoutFilesInput, Prisma.FileTypeUncheckedCreateWithoutFilesInput>
  connectOrCreate?: Prisma.FileTypeCreateOrConnectWithoutFilesInput
  upsert?: Prisma.FileTypeUpsertWithoutFilesInput
  connect?: Prisma.FileTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FileTypeUpdateToOneWithWhereWithoutFilesInput, Prisma.FileTypeUpdateWithoutFilesInput>, Prisma.FileTypeUncheckedUpdateWithoutFilesInput>
}

export type FileTypeCreateWithoutFilesInput = {
  name: string
  mimeType: string
  icon?: string
}

export type FileTypeUncheckedCreateWithoutFilesInput = {
  id?: number
  name: string
  mimeType: string
  icon?: string
}

export type FileTypeCreateOrConnectWithoutFilesInput = {
  where: Prisma.FileTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.FileTypeCreateWithoutFilesInput, Prisma.FileTypeUncheckedCreateWithoutFilesInput>
}

export type FileTypeUpsertWithoutFilesInput = {
  update: Prisma.XOR<Prisma.FileTypeUpdateWithoutFilesInput, Prisma.FileTypeUncheckedUpdateWithoutFilesInput>
  create: Prisma.XOR<Prisma.FileTypeCreateWithoutFilesInput, Prisma.FileTypeUncheckedCreateWithoutFilesInput>
  where?: Prisma.FileTypeWhereInput
}

export type FileTypeUpdateToOneWithWhereWithoutFilesInput = {
  where?: Prisma.FileTypeWhereInput
  data: Prisma.XOR<Prisma.FileTypeUpdateWithoutFilesInput, Prisma.FileTypeUncheckedUpdateWithoutFilesInput>
}

export type FileTypeUpdateWithoutFilesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FileTypeUncheckedUpdateWithoutFilesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type FileTypeCountOutputType
 */

export type FileTypeCountOutputType = {
  Files: number
}

export type FileTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Files?: boolean | FileTypeCountOutputTypeCountFilesArgs
}

/**
 * FileTypeCountOutputType without action
 */
export type FileTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileTypeCountOutputType
   */
  select?: Prisma.FileTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FileTypeCountOutputType without action
 */
export type FileTypeCountOutputTypeCountFilesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FileWhereInput
}


export type FileTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  mimeType?: boolean
  icon?: boolean
  Files?: boolean | Prisma.FileType$FilesArgs<ExtArgs>
  _count?: boolean | Prisma.FileTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fileType"]>

export type FileTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  mimeType?: boolean
  icon?: boolean
}, ExtArgs["result"]["fileType"]>

export type FileTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  mimeType?: boolean
  icon?: boolean
}, ExtArgs["result"]["fileType"]>

export type FileTypeSelectScalar = {
  id?: boolean
  name?: boolean
  mimeType?: boolean
  icon?: boolean
}

export type FileTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "mimeType" | "icon", ExtArgs["result"]["fileType"]>
export type FileTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Files?: boolean | Prisma.FileType$FilesArgs<ExtArgs>
  _count?: boolean | Prisma.FileTypeCountOutputTypeDefaultArgs<ExtArgs>
}
export type FileTypeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type FileTypeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $FileTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FileType"
  objects: {
    Files: Prisma.$FilePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    mimeType: string
    icon: string
  }, ExtArgs["result"]["fileType"]>
  composites: {}
}

export type FileTypeGetPayload<S extends boolean | null | undefined | FileTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FileTypePayload, S>

export type FileTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FileTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FileTypeCountAggregateInputType | true
  }

export interface FileTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileType'], meta: { name: 'FileType' } }
  /**
   * Find zero or one FileType that matches the filter.
   * @param {FileTypeFindUniqueArgs} args - Arguments to find a FileType
   * @example
   * // Get one FileType
   * const fileType = await prisma.fileType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FileTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, FileTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FileType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FileTypeFindUniqueOrThrowArgs} args - Arguments to find a FileType
   * @example
   * // Get one FileType
   * const fileType = await prisma.fileType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FileTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FileTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FileType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileTypeFindFirstArgs} args - Arguments to find a FileType
   * @example
   * // Get one FileType
   * const fileType = await prisma.fileType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FileTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, FileTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FileType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileTypeFindFirstOrThrowArgs} args - Arguments to find a FileType
   * @example
   * // Get one FileType
   * const fileType = await prisma.fileType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FileTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FileTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FileTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FileTypes
   * const fileTypes = await prisma.fileType.findMany()
   * 
   * // Get first 10 FileTypes
   * const fileTypes = await prisma.fileType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fileTypeWithIdOnly = await prisma.fileType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FileTypeFindManyArgs>(args?: Prisma.SelectSubset<T, FileTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FileType.
   * @param {FileTypeCreateArgs} args - Arguments to create a FileType.
   * @example
   * // Create one FileType
   * const FileType = await prisma.fileType.create({
   *   data: {
   *     // ... data to create a FileType
   *   }
   * })
   * 
   */
  create<T extends FileTypeCreateArgs>(args: Prisma.SelectSubset<T, FileTypeCreateArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FileTypes.
   * @param {FileTypeCreateManyArgs} args - Arguments to create many FileTypes.
   * @example
   * // Create many FileTypes
   * const fileType = await prisma.fileType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FileTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, FileTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FileTypes and returns the data saved in the database.
   * @param {FileTypeCreateManyAndReturnArgs} args - Arguments to create many FileTypes.
   * @example
   * // Create many FileTypes
   * const fileType = await prisma.fileType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FileTypes and only return the `id`
   * const fileTypeWithIdOnly = await prisma.fileType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FileTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FileTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FileType.
   * @param {FileTypeDeleteArgs} args - Arguments to delete one FileType.
   * @example
   * // Delete one FileType
   * const FileType = await prisma.fileType.delete({
   *   where: {
   *     // ... filter to delete one FileType
   *   }
   * })
   * 
   */
  delete<T extends FileTypeDeleteArgs>(args: Prisma.SelectSubset<T, FileTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FileType.
   * @param {FileTypeUpdateArgs} args - Arguments to update one FileType.
   * @example
   * // Update one FileType
   * const fileType = await prisma.fileType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FileTypeUpdateArgs>(args: Prisma.SelectSubset<T, FileTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FileTypes.
   * @param {FileTypeDeleteManyArgs} args - Arguments to filter FileTypes to delete.
   * @example
   * // Delete a few FileTypes
   * const { count } = await prisma.fileType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FileTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, FileTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FileTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FileTypes
   * const fileType = await prisma.fileType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FileTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, FileTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FileTypes and returns the data updated in the database.
   * @param {FileTypeUpdateManyAndReturnArgs} args - Arguments to update many FileTypes.
   * @example
   * // Update many FileTypes
   * const fileType = await prisma.fileType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FileTypes and only return the `id`
   * const fileTypeWithIdOnly = await prisma.fileType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FileTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FileTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FileType.
   * @param {FileTypeUpsertArgs} args - Arguments to update or create a FileType.
   * @example
   * // Update or create a FileType
   * const fileType = await prisma.fileType.upsert({
   *   create: {
   *     // ... data to create a FileType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FileType we want to update
   *   }
   * })
   */
  upsert<T extends FileTypeUpsertArgs>(args: Prisma.SelectSubset<T, FileTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__FileTypeClient<runtime.Types.Result.GetResult<Prisma.$FileTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FileTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileTypeCountArgs} args - Arguments to filter FileTypes to count.
   * @example
   * // Count the number of FileTypes
   * const count = await prisma.fileType.count({
   *   where: {
   *     // ... the filter for the FileTypes we want to count
   *   }
   * })
  **/
  count<T extends FileTypeCountArgs>(
    args?: Prisma.Subset<T, FileTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FileTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FileType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FileTypeAggregateArgs>(args: Prisma.Subset<T, FileTypeAggregateArgs>): Prisma.PrismaPromise<GetFileTypeAggregateType<T>>

  /**
   * Group by FileType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FileTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FileTypeGroupByArgs['orderBy'] }
      : { orderBy?: FileTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FileTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FileType model
 */
readonly fields: FileTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FileType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FileTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Files<T extends Prisma.FileType$FilesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FileType$FilesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FileType model
 */
export interface FileTypeFieldRefs {
  readonly id: Prisma.FieldRef<"FileType", 'Int'>
  readonly name: Prisma.FieldRef<"FileType", 'String'>
  readonly mimeType: Prisma.FieldRef<"FileType", 'String'>
  readonly icon: Prisma.FieldRef<"FileType", 'String'>
}
    

// Custom InputTypes
/**
 * FileType findUnique
 */
export type FileTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * Filter, which FileType to fetch.
   */
  where: Prisma.FileTypeWhereUniqueInput
}

/**
 * FileType findUniqueOrThrow
 */
export type FileTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * Filter, which FileType to fetch.
   */
  where: Prisma.FileTypeWhereUniqueInput
}

/**
 * FileType findFirst
 */
export type FileTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * Filter, which FileType to fetch.
   */
  where?: Prisma.FileTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileTypes to fetch.
   */
  orderBy?: Prisma.FileTypeOrderByWithRelationInput | Prisma.FileTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FileTypes.
   */
  cursor?: Prisma.FileTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FileTypes.
   */
  distinct?: Prisma.FileTypeScalarFieldEnum | Prisma.FileTypeScalarFieldEnum[]
}

/**
 * FileType findFirstOrThrow
 */
export type FileTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * Filter, which FileType to fetch.
   */
  where?: Prisma.FileTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileTypes to fetch.
   */
  orderBy?: Prisma.FileTypeOrderByWithRelationInput | Prisma.FileTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FileTypes.
   */
  cursor?: Prisma.FileTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FileTypes.
   */
  distinct?: Prisma.FileTypeScalarFieldEnum | Prisma.FileTypeScalarFieldEnum[]
}

/**
 * FileType findMany
 */
export type FileTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * Filter, which FileTypes to fetch.
   */
  where?: Prisma.FileTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileTypes to fetch.
   */
  orderBy?: Prisma.FileTypeOrderByWithRelationInput | Prisma.FileTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FileTypes.
   */
  cursor?: Prisma.FileTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileTypes.
   */
  skip?: number
  distinct?: Prisma.FileTypeScalarFieldEnum | Prisma.FileTypeScalarFieldEnum[]
}

/**
 * FileType create
 */
export type FileTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a FileType.
   */
  data: Prisma.XOR<Prisma.FileTypeCreateInput, Prisma.FileTypeUncheckedCreateInput>
}

/**
 * FileType createMany
 */
export type FileTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FileTypes.
   */
  data: Prisma.FileTypeCreateManyInput | Prisma.FileTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FileType createManyAndReturn
 */
export type FileTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * The data used to create many FileTypes.
   */
  data: Prisma.FileTypeCreateManyInput | Prisma.FileTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FileType update
 */
export type FileTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a FileType.
   */
  data: Prisma.XOR<Prisma.FileTypeUpdateInput, Prisma.FileTypeUncheckedUpdateInput>
  /**
   * Choose, which FileType to update.
   */
  where: Prisma.FileTypeWhereUniqueInput
}

/**
 * FileType updateMany
 */
export type FileTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FileTypes.
   */
  data: Prisma.XOR<Prisma.FileTypeUpdateManyMutationInput, Prisma.FileTypeUncheckedUpdateManyInput>
  /**
   * Filter which FileTypes to update
   */
  where?: Prisma.FileTypeWhereInput
  /**
   * Limit how many FileTypes to update.
   */
  limit?: number
}

/**
 * FileType updateManyAndReturn
 */
export type FileTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * The data used to update FileTypes.
   */
  data: Prisma.XOR<Prisma.FileTypeUpdateManyMutationInput, Prisma.FileTypeUncheckedUpdateManyInput>
  /**
   * Filter which FileTypes to update
   */
  where?: Prisma.FileTypeWhereInput
  /**
   * Limit how many FileTypes to update.
   */
  limit?: number
}

/**
 * FileType upsert
 */
export type FileTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the FileType to update in case it exists.
   */
  where: Prisma.FileTypeWhereUniqueInput
  /**
   * In case the FileType found by the `where` argument doesn't exist, create a new FileType with this data.
   */
  create: Prisma.XOR<Prisma.FileTypeCreateInput, Prisma.FileTypeUncheckedCreateInput>
  /**
   * In case the FileType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FileTypeUpdateInput, Prisma.FileTypeUncheckedUpdateInput>
}

/**
 * FileType delete
 */
export type FileTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
  /**
   * Filter which FileType to delete.
   */
  where: Prisma.FileTypeWhereUniqueInput
}

/**
 * FileType deleteMany
 */
export type FileTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FileTypes to delete
   */
  where?: Prisma.FileTypeWhereInput
  /**
   * Limit how many FileTypes to delete.
   */
  limit?: number
}

/**
 * FileType.Files
 */
export type FileType$FilesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the File
   */
  select?: Prisma.FileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the File
   */
  omit?: Prisma.FileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileInclude<ExtArgs> | null
  where?: Prisma.FileWhereInput
  orderBy?: Prisma.FileOrderByWithRelationInput | Prisma.FileOrderByWithRelationInput[]
  cursor?: Prisma.FileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FileScalarFieldEnum | Prisma.FileScalarFieldEnum[]
}

/**
 * FileType without action
 */
export type FileTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileType
   */
  select?: Prisma.FileTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileType
   */
  omit?: Prisma.FileTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileTypeInclude<ExtArgs> | null
}
