
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Project` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Project
 * 
 */
export type ProjectModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectPayload>

export type AggregateProject = {
  _count: ProjectCountAggregateOutputType | null
  _min: ProjectMinAggregateOutputType | null
  _max: ProjectMaxAggregateOutputType | null
}

export type ProjectMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  sourceLanguageId: string | null
  creatorId: string | null
}

export type ProjectMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  sourceLanguageId: string | null
  creatorId: string | null
}

export type ProjectCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  sourceLanguageId: number
  creatorId: number
  _all: number
}


export type ProjectMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  sourceLanguageId?: true
  creatorId?: true
}

export type ProjectMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  sourceLanguageId?: true
  creatorId?: true
}

export type ProjectCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  sourceLanguageId?: true
  creatorId?: true
  _all?: true
}

export type ProjectAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Project to aggregate.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Projects
  **/
  _count?: true | ProjectCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectMaxAggregateInputType
}

export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
      [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProject[P]>
    : Prisma.GetScalarType<T[P], AggregateProject[P]>
}




export type ProjectGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithAggregationInput | Prisma.ProjectOrderByWithAggregationInput[]
  by: Prisma.ProjectScalarFieldEnum[] | Prisma.ProjectScalarFieldEnum
  having?: Prisma.ProjectScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectCountAggregateInputType | true
  _min?: ProjectMinAggregateInputType
  _max?: ProjectMaxAggregateInputType
}

export type ProjectGroupByOutputType = {
  id: string
  name: string
  description: string | null
  createdAt: Date
  updatedAt: Date
  sourceLanguageId: string
  creatorId: string
  _count: ProjectCountAggregateOutputType | null
  _min: ProjectMinAggregateOutputType | null
  _max: ProjectMaxAggregateOutputType | null
}

type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectGroupByOutputType[P]>
      }
    >
  > 



export type ProjectWhereInput = {
  AND?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  OR?: Prisma.ProjectWhereInput[]
  NOT?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  id?: Prisma.StringFilter<"Project"> | string
  name?: Prisma.StringFilter<"Project"> | string
  description?: Prisma.StringNullableFilter<"Project"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  sourceLanguageId?: Prisma.StringFilter<"Project"> | string
  creatorId?: Prisma.StringFilter<"Project"> | string
  SourceLanguage?: Prisma.XOR<Prisma.LanguageScalarRelationFilter, Prisma.LanguageWhereInput>
  TargetLanguages?: Prisma.LanguageListRelationFilter
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Memories?: Prisma.MemoryListRelationFilter
  Glossaries?: Prisma.GlossaryListRelationFilter
  Documents?: Prisma.DocumentListRelationFilter
}

export type ProjectOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sourceLanguageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  SourceLanguage?: Prisma.LanguageOrderByWithRelationInput
  TargetLanguages?: Prisma.LanguageOrderByRelationAggregateInput
  Creator?: Prisma.UserOrderByWithRelationInput
  Memories?: Prisma.MemoryOrderByRelationAggregateInput
  Glossaries?: Prisma.GlossaryOrderByRelationAggregateInput
  Documents?: Prisma.DocumentOrderByRelationAggregateInput
  _relevance?: Prisma.ProjectOrderByRelevanceInput
}

export type ProjectWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  OR?: Prisma.ProjectWhereInput[]
  NOT?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  name?: Prisma.StringFilter<"Project"> | string
  description?: Prisma.StringNullableFilter<"Project"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  sourceLanguageId?: Prisma.StringFilter<"Project"> | string
  creatorId?: Prisma.StringFilter<"Project"> | string
  SourceLanguage?: Prisma.XOR<Prisma.LanguageScalarRelationFilter, Prisma.LanguageWhereInput>
  TargetLanguages?: Prisma.LanguageListRelationFilter
  Creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Memories?: Prisma.MemoryListRelationFilter
  Glossaries?: Prisma.GlossaryListRelationFilter
  Documents?: Prisma.DocumentListRelationFilter
}, "id">

export type ProjectOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sourceLanguageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  _count?: Prisma.ProjectCountOrderByAggregateInput
  _max?: Prisma.ProjectMaxOrderByAggregateInput
  _min?: Prisma.ProjectMinOrderByAggregateInput
}

export type ProjectScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectScalarWhereWithAggregatesInput | Prisma.ProjectScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectScalarWhereWithAggregatesInput | Prisma.ProjectScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Project"> | string
  name?: Prisma.StringWithAggregatesFilter<"Project"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Project"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Project"> | Date | string
  sourceLanguageId?: Prisma.StringWithAggregatesFilter<"Project"> | string
  creatorId?: Prisma.StringWithAggregatesFilter<"Project"> | string
}

export type ProjectCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  SourceLanguage: Prisma.LanguageCreateNestedOneWithoutSourceProjectsInput
  TargetLanguages?: Prisma.LanguageCreateNestedManyWithoutTargetProjectsInput
  Creator: Prisma.UserCreateNestedOneWithoutProjectsInput
  Memories?: Prisma.MemoryCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sourceLanguageId: string
  creatorId: string
  TargetLanguages?: Prisma.LanguageUncheckedCreateNestedManyWithoutTargetProjectsInput
  Memories?: Prisma.MemoryUncheckedCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryUncheckedCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  SourceLanguage?: Prisma.LanguageUpdateOneRequiredWithoutSourceProjectsNestedInput
  TargetLanguages?: Prisma.LanguageUpdateManyWithoutTargetProjectsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  Memories?: Prisma.MemoryUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  TargetLanguages?: Prisma.LanguageUncheckedUpdateManyWithoutTargetProjectsNestedInput
  Memories?: Prisma.MemoryUncheckedUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUncheckedUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sourceLanguageId: string
  creatorId: string
}

export type ProjectUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectScalarRelationFilter = {
  is?: Prisma.ProjectWhereInput
  isNot?: Prisma.ProjectWhereInput
}

export type ProjectListRelationFilter = {
  every?: Prisma.ProjectWhereInput
  some?: Prisma.ProjectWhereInput
  none?: Prisma.ProjectWhereInput
}

export type ProjectOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectOrderByRelevanceInput = {
  fields: Prisma.ProjectOrderByRelevanceFieldEnum | Prisma.ProjectOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProjectCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sourceLanguageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type ProjectMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sourceLanguageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type ProjectMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sourceLanguageId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type ProjectCreateNestedOneWithoutDocumentsInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutDocumentsInput, Prisma.ProjectUncheckedCreateWithoutDocumentsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutDocumentsInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutDocumentsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutDocumentsInput, Prisma.ProjectUncheckedCreateWithoutDocumentsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutDocumentsInput
  upsert?: Prisma.ProjectUpsertWithoutDocumentsInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutDocumentsInput, Prisma.ProjectUpdateWithoutDocumentsInput>, Prisma.ProjectUncheckedUpdateWithoutDocumentsInput>
}

export type ProjectCreateNestedManyWithoutGlossariesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutGlossariesInput, Prisma.ProjectUncheckedCreateWithoutGlossariesInput> | Prisma.ProjectCreateWithoutGlossariesInput[] | Prisma.ProjectUncheckedCreateWithoutGlossariesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutGlossariesInput | Prisma.ProjectCreateOrConnectWithoutGlossariesInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUncheckedCreateNestedManyWithoutGlossariesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutGlossariesInput, Prisma.ProjectUncheckedCreateWithoutGlossariesInput> | Prisma.ProjectCreateWithoutGlossariesInput[] | Prisma.ProjectUncheckedCreateWithoutGlossariesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutGlossariesInput | Prisma.ProjectCreateOrConnectWithoutGlossariesInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUpdateManyWithoutGlossariesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutGlossariesInput, Prisma.ProjectUncheckedCreateWithoutGlossariesInput> | Prisma.ProjectCreateWithoutGlossariesInput[] | Prisma.ProjectUncheckedCreateWithoutGlossariesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutGlossariesInput | Prisma.ProjectCreateOrConnectWithoutGlossariesInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutGlossariesInput | Prisma.ProjectUpsertWithWhereUniqueWithoutGlossariesInput[]
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutGlossariesInput | Prisma.ProjectUpdateWithWhereUniqueWithoutGlossariesInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutGlossariesInput | Prisma.ProjectUpdateManyWithWhereWithoutGlossariesInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectUncheckedUpdateManyWithoutGlossariesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutGlossariesInput, Prisma.ProjectUncheckedCreateWithoutGlossariesInput> | Prisma.ProjectCreateWithoutGlossariesInput[] | Prisma.ProjectUncheckedCreateWithoutGlossariesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutGlossariesInput | Prisma.ProjectCreateOrConnectWithoutGlossariesInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutGlossariesInput | Prisma.ProjectUpsertWithWhereUniqueWithoutGlossariesInput[]
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutGlossariesInput | Prisma.ProjectUpdateWithWhereUniqueWithoutGlossariesInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutGlossariesInput | Prisma.ProjectUpdateManyWithWhereWithoutGlossariesInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectCreateNestedManyWithoutMemoriesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutMemoriesInput, Prisma.ProjectUncheckedCreateWithoutMemoriesInput> | Prisma.ProjectCreateWithoutMemoriesInput[] | Prisma.ProjectUncheckedCreateWithoutMemoriesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutMemoriesInput | Prisma.ProjectCreateOrConnectWithoutMemoriesInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUncheckedCreateNestedManyWithoutMemoriesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutMemoriesInput, Prisma.ProjectUncheckedCreateWithoutMemoriesInput> | Prisma.ProjectCreateWithoutMemoriesInput[] | Prisma.ProjectUncheckedCreateWithoutMemoriesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutMemoriesInput | Prisma.ProjectCreateOrConnectWithoutMemoriesInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUpdateManyWithoutMemoriesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutMemoriesInput, Prisma.ProjectUncheckedCreateWithoutMemoriesInput> | Prisma.ProjectCreateWithoutMemoriesInput[] | Prisma.ProjectUncheckedCreateWithoutMemoriesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutMemoriesInput | Prisma.ProjectCreateOrConnectWithoutMemoriesInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutMemoriesInput | Prisma.ProjectUpsertWithWhereUniqueWithoutMemoriesInput[]
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutMemoriesInput | Prisma.ProjectUpdateWithWhereUniqueWithoutMemoriesInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutMemoriesInput | Prisma.ProjectUpdateManyWithWhereWithoutMemoriesInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectUncheckedUpdateManyWithoutMemoriesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutMemoriesInput, Prisma.ProjectUncheckedCreateWithoutMemoriesInput> | Prisma.ProjectCreateWithoutMemoriesInput[] | Prisma.ProjectUncheckedCreateWithoutMemoriesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutMemoriesInput | Prisma.ProjectCreateOrConnectWithoutMemoriesInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutMemoriesInput | Prisma.ProjectUpsertWithWhereUniqueWithoutMemoriesInput[]
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutMemoriesInput | Prisma.ProjectUpdateWithWhereUniqueWithoutMemoriesInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutMemoriesInput | Prisma.ProjectUpdateManyWithWhereWithoutMemoriesInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectCreateNestedManyWithoutSourceLanguageInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutSourceLanguageInput, Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput> | Prisma.ProjectCreateWithoutSourceLanguageInput[] | Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutSourceLanguageInput | Prisma.ProjectCreateOrConnectWithoutSourceLanguageInput[]
  createMany?: Prisma.ProjectCreateManySourceLanguageInputEnvelope
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectCreateNestedManyWithoutTargetLanguagesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutTargetLanguagesInput, Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput> | Prisma.ProjectCreateWithoutTargetLanguagesInput[] | Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTargetLanguagesInput | Prisma.ProjectCreateOrConnectWithoutTargetLanguagesInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUncheckedCreateNestedManyWithoutSourceLanguageInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutSourceLanguageInput, Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput> | Prisma.ProjectCreateWithoutSourceLanguageInput[] | Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutSourceLanguageInput | Prisma.ProjectCreateOrConnectWithoutSourceLanguageInput[]
  createMany?: Prisma.ProjectCreateManySourceLanguageInputEnvelope
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUncheckedCreateNestedManyWithoutTargetLanguagesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutTargetLanguagesInput, Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput> | Prisma.ProjectCreateWithoutTargetLanguagesInput[] | Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTargetLanguagesInput | Prisma.ProjectCreateOrConnectWithoutTargetLanguagesInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUpdateManyWithoutSourceLanguageNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutSourceLanguageInput, Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput> | Prisma.ProjectCreateWithoutSourceLanguageInput[] | Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutSourceLanguageInput | Prisma.ProjectCreateOrConnectWithoutSourceLanguageInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutSourceLanguageInput | Prisma.ProjectUpsertWithWhereUniqueWithoutSourceLanguageInput[]
  createMany?: Prisma.ProjectCreateManySourceLanguageInputEnvelope
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutSourceLanguageInput | Prisma.ProjectUpdateWithWhereUniqueWithoutSourceLanguageInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutSourceLanguageInput | Prisma.ProjectUpdateManyWithWhereWithoutSourceLanguageInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectUpdateManyWithoutTargetLanguagesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutTargetLanguagesInput, Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput> | Prisma.ProjectCreateWithoutTargetLanguagesInput[] | Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTargetLanguagesInput | Prisma.ProjectCreateOrConnectWithoutTargetLanguagesInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutTargetLanguagesInput | Prisma.ProjectUpsertWithWhereUniqueWithoutTargetLanguagesInput[]
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutTargetLanguagesInput | Prisma.ProjectUpdateWithWhereUniqueWithoutTargetLanguagesInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutTargetLanguagesInput | Prisma.ProjectUpdateManyWithWhereWithoutTargetLanguagesInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectUncheckedUpdateManyWithoutSourceLanguageNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutSourceLanguageInput, Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput> | Prisma.ProjectCreateWithoutSourceLanguageInput[] | Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutSourceLanguageInput | Prisma.ProjectCreateOrConnectWithoutSourceLanguageInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutSourceLanguageInput | Prisma.ProjectUpsertWithWhereUniqueWithoutSourceLanguageInput[]
  createMany?: Prisma.ProjectCreateManySourceLanguageInputEnvelope
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutSourceLanguageInput | Prisma.ProjectUpdateWithWhereUniqueWithoutSourceLanguageInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutSourceLanguageInput | Prisma.ProjectUpdateManyWithWhereWithoutSourceLanguageInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectUncheckedUpdateManyWithoutTargetLanguagesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutTargetLanguagesInput, Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput> | Prisma.ProjectCreateWithoutTargetLanguagesInput[] | Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTargetLanguagesInput | Prisma.ProjectCreateOrConnectWithoutTargetLanguagesInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutTargetLanguagesInput | Prisma.ProjectUpsertWithWhereUniqueWithoutTargetLanguagesInput[]
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutTargetLanguagesInput | Prisma.ProjectUpdateWithWhereUniqueWithoutTargetLanguagesInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutTargetLanguagesInput | Prisma.ProjectUpdateManyWithWhereWithoutTargetLanguagesInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutCreatorInput, Prisma.ProjectUncheckedCreateWithoutCreatorInput> | Prisma.ProjectCreateWithoutCreatorInput[] | Prisma.ProjectUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutCreatorInput | Prisma.ProjectCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.ProjectCreateManyCreatorInputEnvelope
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutCreatorInput, Prisma.ProjectUncheckedCreateWithoutCreatorInput> | Prisma.ProjectCreateWithoutCreatorInput[] | Prisma.ProjectUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutCreatorInput | Prisma.ProjectCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.ProjectCreateManyCreatorInputEnvelope
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutCreatorInput, Prisma.ProjectUncheckedCreateWithoutCreatorInput> | Prisma.ProjectCreateWithoutCreatorInput[] | Prisma.ProjectUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutCreatorInput | Prisma.ProjectCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutCreatorInput | Prisma.ProjectUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.ProjectCreateManyCreatorInputEnvelope
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutCreatorInput | Prisma.ProjectUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutCreatorInput | Prisma.ProjectUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutCreatorInput, Prisma.ProjectUncheckedCreateWithoutCreatorInput> | Prisma.ProjectCreateWithoutCreatorInput[] | Prisma.ProjectUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutCreatorInput | Prisma.ProjectCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutCreatorInput | Prisma.ProjectUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.ProjectCreateManyCreatorInputEnvelope
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutCreatorInput | Prisma.ProjectUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutCreatorInput | Prisma.ProjectUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectCreateWithoutDocumentsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  SourceLanguage: Prisma.LanguageCreateNestedOneWithoutSourceProjectsInput
  TargetLanguages?: Prisma.LanguageCreateNestedManyWithoutTargetProjectsInput
  Creator: Prisma.UserCreateNestedOneWithoutProjectsInput
  Memories?: Prisma.MemoryCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryCreateNestedManyWithoutProjectsInput
}

export type ProjectUncheckedCreateWithoutDocumentsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sourceLanguageId: string
  creatorId: string
  TargetLanguages?: Prisma.LanguageUncheckedCreateNestedManyWithoutTargetProjectsInput
  Memories?: Prisma.MemoryUncheckedCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryUncheckedCreateNestedManyWithoutProjectsInput
}

export type ProjectCreateOrConnectWithoutDocumentsInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutDocumentsInput, Prisma.ProjectUncheckedCreateWithoutDocumentsInput>
}

export type ProjectUpsertWithoutDocumentsInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutDocumentsInput, Prisma.ProjectUncheckedUpdateWithoutDocumentsInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutDocumentsInput, Prisma.ProjectUncheckedCreateWithoutDocumentsInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutDocumentsInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutDocumentsInput, Prisma.ProjectUncheckedUpdateWithoutDocumentsInput>
}

export type ProjectUpdateWithoutDocumentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  SourceLanguage?: Prisma.LanguageUpdateOneRequiredWithoutSourceProjectsNestedInput
  TargetLanguages?: Prisma.LanguageUpdateManyWithoutTargetProjectsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  Memories?: Prisma.MemoryUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUpdateManyWithoutProjectsNestedInput
}

export type ProjectUncheckedUpdateWithoutDocumentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  TargetLanguages?: Prisma.LanguageUncheckedUpdateManyWithoutTargetProjectsNestedInput
  Memories?: Prisma.MemoryUncheckedUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUncheckedUpdateManyWithoutProjectsNestedInput
}

export type ProjectCreateWithoutGlossariesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  SourceLanguage: Prisma.LanguageCreateNestedOneWithoutSourceProjectsInput
  TargetLanguages?: Prisma.LanguageCreateNestedManyWithoutTargetProjectsInput
  Creator: Prisma.UserCreateNestedOneWithoutProjectsInput
  Memories?: Prisma.MemoryCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutGlossariesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sourceLanguageId: string
  creatorId: string
  TargetLanguages?: Prisma.LanguageUncheckedCreateNestedManyWithoutTargetProjectsInput
  Memories?: Prisma.MemoryUncheckedCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutGlossariesInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutGlossariesInput, Prisma.ProjectUncheckedCreateWithoutGlossariesInput>
}

export type ProjectUpsertWithWhereUniqueWithoutGlossariesInput = {
  where: Prisma.ProjectWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutGlossariesInput, Prisma.ProjectUncheckedUpdateWithoutGlossariesInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutGlossariesInput, Prisma.ProjectUncheckedCreateWithoutGlossariesInput>
}

export type ProjectUpdateWithWhereUniqueWithoutGlossariesInput = {
  where: Prisma.ProjectWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutGlossariesInput, Prisma.ProjectUncheckedUpdateWithoutGlossariesInput>
}

export type ProjectUpdateManyWithWhereWithoutGlossariesInput = {
  where: Prisma.ProjectScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyWithoutGlossariesInput>
}

export type ProjectScalarWhereInput = {
  AND?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
  OR?: Prisma.ProjectScalarWhereInput[]
  NOT?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
  id?: Prisma.StringFilter<"Project"> | string
  name?: Prisma.StringFilter<"Project"> | string
  description?: Prisma.StringNullableFilter<"Project"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  sourceLanguageId?: Prisma.StringFilter<"Project"> | string
  creatorId?: Prisma.StringFilter<"Project"> | string
}

export type ProjectCreateWithoutMemoriesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  SourceLanguage: Prisma.LanguageCreateNestedOneWithoutSourceProjectsInput
  TargetLanguages?: Prisma.LanguageCreateNestedManyWithoutTargetProjectsInput
  Creator: Prisma.UserCreateNestedOneWithoutProjectsInput
  Glossaries?: Prisma.GlossaryCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutMemoriesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sourceLanguageId: string
  creatorId: string
  TargetLanguages?: Prisma.LanguageUncheckedCreateNestedManyWithoutTargetProjectsInput
  Glossaries?: Prisma.GlossaryUncheckedCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutMemoriesInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutMemoriesInput, Prisma.ProjectUncheckedCreateWithoutMemoriesInput>
}

export type ProjectUpsertWithWhereUniqueWithoutMemoriesInput = {
  where: Prisma.ProjectWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutMemoriesInput, Prisma.ProjectUncheckedUpdateWithoutMemoriesInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutMemoriesInput, Prisma.ProjectUncheckedCreateWithoutMemoriesInput>
}

export type ProjectUpdateWithWhereUniqueWithoutMemoriesInput = {
  where: Prisma.ProjectWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutMemoriesInput, Prisma.ProjectUncheckedUpdateWithoutMemoriesInput>
}

export type ProjectUpdateManyWithWhereWithoutMemoriesInput = {
  where: Prisma.ProjectScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyWithoutMemoriesInput>
}

export type ProjectCreateWithoutSourceLanguageInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  TargetLanguages?: Prisma.LanguageCreateNestedManyWithoutTargetProjectsInput
  Creator: Prisma.UserCreateNestedOneWithoutProjectsInput
  Memories?: Prisma.MemoryCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutSourceLanguageInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
  TargetLanguages?: Prisma.LanguageUncheckedCreateNestedManyWithoutTargetProjectsInput
  Memories?: Prisma.MemoryUncheckedCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryUncheckedCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutSourceLanguageInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutSourceLanguageInput, Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput>
}

export type ProjectCreateManySourceLanguageInputEnvelope = {
  data: Prisma.ProjectCreateManySourceLanguageInput | Prisma.ProjectCreateManySourceLanguageInput[]
  skipDuplicates?: boolean
}

export type ProjectCreateWithoutTargetLanguagesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  SourceLanguage: Prisma.LanguageCreateNestedOneWithoutSourceProjectsInput
  Creator: Prisma.UserCreateNestedOneWithoutProjectsInput
  Memories?: Prisma.MemoryCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutTargetLanguagesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sourceLanguageId: string
  creatorId: string
  Memories?: Prisma.MemoryUncheckedCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryUncheckedCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutTargetLanguagesInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutTargetLanguagesInput, Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput>
}

export type ProjectUpsertWithWhereUniqueWithoutSourceLanguageInput = {
  where: Prisma.ProjectWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutSourceLanguageInput, Prisma.ProjectUncheckedUpdateWithoutSourceLanguageInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutSourceLanguageInput, Prisma.ProjectUncheckedCreateWithoutSourceLanguageInput>
}

export type ProjectUpdateWithWhereUniqueWithoutSourceLanguageInput = {
  where: Prisma.ProjectWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutSourceLanguageInput, Prisma.ProjectUncheckedUpdateWithoutSourceLanguageInput>
}

export type ProjectUpdateManyWithWhereWithoutSourceLanguageInput = {
  where: Prisma.ProjectScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyWithoutSourceLanguageInput>
}

export type ProjectUpsertWithWhereUniqueWithoutTargetLanguagesInput = {
  where: Prisma.ProjectWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutTargetLanguagesInput, Prisma.ProjectUncheckedUpdateWithoutTargetLanguagesInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutTargetLanguagesInput, Prisma.ProjectUncheckedCreateWithoutTargetLanguagesInput>
}

export type ProjectUpdateWithWhereUniqueWithoutTargetLanguagesInput = {
  where: Prisma.ProjectWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutTargetLanguagesInput, Prisma.ProjectUncheckedUpdateWithoutTargetLanguagesInput>
}

export type ProjectUpdateManyWithWhereWithoutTargetLanguagesInput = {
  where: Prisma.ProjectScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyWithoutTargetLanguagesInput>
}

export type ProjectCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  SourceLanguage: Prisma.LanguageCreateNestedOneWithoutSourceProjectsInput
  TargetLanguages?: Prisma.LanguageCreateNestedManyWithoutTargetProjectsInput
  Memories?: Prisma.MemoryCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sourceLanguageId: string
  TargetLanguages?: Prisma.LanguageUncheckedCreateNestedManyWithoutTargetProjectsInput
  Memories?: Prisma.MemoryUncheckedCreateNestedManyWithoutProjectsInput
  Glossaries?: Prisma.GlossaryUncheckedCreateNestedManyWithoutProjectsInput
  Documents?: Prisma.DocumentUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutCreatorInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutCreatorInput, Prisma.ProjectUncheckedCreateWithoutCreatorInput>
}

export type ProjectCreateManyCreatorInputEnvelope = {
  data: Prisma.ProjectCreateManyCreatorInput | Prisma.ProjectCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type ProjectUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.ProjectWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutCreatorInput, Prisma.ProjectUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutCreatorInput, Prisma.ProjectUncheckedCreateWithoutCreatorInput>
}

export type ProjectUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.ProjectWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutCreatorInput, Prisma.ProjectUncheckedUpdateWithoutCreatorInput>
}

export type ProjectUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.ProjectScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyWithoutCreatorInput>
}

export type ProjectUpdateWithoutGlossariesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  SourceLanguage?: Prisma.LanguageUpdateOneRequiredWithoutSourceProjectsNestedInput
  TargetLanguages?: Prisma.LanguageUpdateManyWithoutTargetProjectsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  Memories?: Prisma.MemoryUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutGlossariesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  TargetLanguages?: Prisma.LanguageUncheckedUpdateManyWithoutTargetProjectsNestedInput
  Memories?: Prisma.MemoryUncheckedUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateManyWithoutGlossariesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectUpdateWithoutMemoriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  SourceLanguage?: Prisma.LanguageUpdateOneRequiredWithoutSourceProjectsNestedInput
  TargetLanguages?: Prisma.LanguageUpdateManyWithoutTargetProjectsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutMemoriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  TargetLanguages?: Prisma.LanguageUncheckedUpdateManyWithoutTargetProjectsNestedInput
  Glossaries?: Prisma.GlossaryUncheckedUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateManyWithoutMemoriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectCreateManySourceLanguageInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: string
}

export type ProjectUpdateWithoutSourceLanguageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  TargetLanguages?: Prisma.LanguageUpdateManyWithoutTargetProjectsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  Memories?: Prisma.MemoryUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutSourceLanguageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  TargetLanguages?: Prisma.LanguageUncheckedUpdateManyWithoutTargetProjectsNestedInput
  Memories?: Prisma.MemoryUncheckedUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUncheckedUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateManyWithoutSourceLanguageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectUpdateWithoutTargetLanguagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  SourceLanguage?: Prisma.LanguageUpdateOneRequiredWithoutSourceProjectsNestedInput
  Creator?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  Memories?: Prisma.MemoryUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutTargetLanguagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  Memories?: Prisma.MemoryUncheckedUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUncheckedUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateManyWithoutTargetLanguagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectCreateManyCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sourceLanguageId: string
}

export type ProjectUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  SourceLanguage?: Prisma.LanguageUpdateOneRequiredWithoutSourceProjectsNestedInput
  TargetLanguages?: Prisma.LanguageUpdateManyWithoutTargetProjectsNestedInput
  Memories?: Prisma.MemoryUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
  TargetLanguages?: Prisma.LanguageUncheckedUpdateManyWithoutTargetProjectsNestedInput
  Memories?: Prisma.MemoryUncheckedUpdateManyWithoutProjectsNestedInput
  Glossaries?: Prisma.GlossaryUncheckedUpdateManyWithoutProjectsNestedInput
  Documents?: Prisma.DocumentUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sourceLanguageId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ProjectCountOutputType
 */

export type ProjectCountOutputType = {
  TargetLanguages: number
  Memories: number
  Glossaries: number
  Documents: number
}

export type ProjectCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TargetLanguages?: boolean | ProjectCountOutputTypeCountTargetLanguagesArgs
  Memories?: boolean | ProjectCountOutputTypeCountMemoriesArgs
  Glossaries?: boolean | ProjectCountOutputTypeCountGlossariesArgs
  Documents?: boolean | ProjectCountOutputTypeCountDocumentsArgs
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectCountOutputType
   */
  select?: Prisma.ProjectCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountTargetLanguagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LanguageWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountMemoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MemoryWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountGlossariesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GlossaryWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountDocumentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentWhereInput
}


export type ProjectSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sourceLanguageId?: boolean
  creatorId?: boolean
  SourceLanguage?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  TargetLanguages?: boolean | Prisma.Project$TargetLanguagesArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Memories?: boolean | Prisma.Project$MemoriesArgs<ExtArgs>
  Glossaries?: boolean | Prisma.Project$GlossariesArgs<ExtArgs>
  Documents?: boolean | Prisma.Project$DocumentsArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["project"]>

export type ProjectSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sourceLanguageId?: boolean
  creatorId?: boolean
  SourceLanguage?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["project"]>

export type ProjectSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sourceLanguageId?: boolean
  creatorId?: boolean
  SourceLanguage?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["project"]>

export type ProjectSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sourceLanguageId?: boolean
  creatorId?: boolean
}

export type ProjectOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt" | "sourceLanguageId" | "creatorId", ExtArgs["result"]["project"]>
export type ProjectInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  SourceLanguage?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  TargetLanguages?: boolean | Prisma.Project$TargetLanguagesArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Memories?: boolean | Prisma.Project$MemoriesArgs<ExtArgs>
  Glossaries?: boolean | Prisma.Project$GlossariesArgs<ExtArgs>
  Documents?: boolean | Prisma.Project$DocumentsArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProjectIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  SourceLanguage?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  SourceLanguage?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  Creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ProjectPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Project"
  objects: {
    SourceLanguage: Prisma.$LanguagePayload<ExtArgs>
    TargetLanguages: Prisma.$LanguagePayload<ExtArgs>[]
    Creator: Prisma.$UserPayload<ExtArgs>
    Memories: Prisma.$MemoryPayload<ExtArgs>[]
    Glossaries: Prisma.$GlossaryPayload<ExtArgs>[]
    Documents: Prisma.$DocumentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    sourceLanguageId: string
    creatorId: string
  }, ExtArgs["result"]["project"]>
  composites: {}
}

export type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectPayload, S>

export type ProjectCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectCountAggregateInputType | true
  }

export interface ProjectDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
  /**
   * Find zero or one Project that matches the filter.
   * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Project that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Project that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindFirstArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Project that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Projects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Projects
   * const projects = await prisma.project.findMany()
   * 
   * // Get first 10 Projects
   * const projects = await prisma.project.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Project.
   * @param {ProjectCreateArgs} args - Arguments to create a Project.
   * @example
   * // Create one Project
   * const Project = await prisma.project.create({
   *   data: {
   *     // ... data to create a Project
   *   }
   * })
   * 
   */
  create<T extends ProjectCreateArgs>(args: Prisma.SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Projects.
   * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
   * @example
   * // Create many Projects
   * const project = await prisma.project.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Projects and returns the data saved in the database.
   * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
   * @example
   * // Create many Projects
   * const project = await prisma.project.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Projects and only return the `id`
   * const projectWithIdOnly = await prisma.project.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Project.
   * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
   * @example
   * // Delete one Project
   * const Project = await prisma.project.delete({
   *   where: {
   *     // ... filter to delete one Project
   *   }
   * })
   * 
   */
  delete<T extends ProjectDeleteArgs>(args: Prisma.SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Project.
   * @param {ProjectUpdateArgs} args - Arguments to update one Project.
   * @example
   * // Update one Project
   * const project = await prisma.project.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectUpdateArgs>(args: Prisma.SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Projects.
   * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
   * @example
   * // Delete a few Projects
   * const { count } = await prisma.project.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Projects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Projects
   * const project = await prisma.project.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Projects and returns the data updated in the database.
   * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
   * @example
   * // Update many Projects
   * const project = await prisma.project.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Projects and only return the `id`
   * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Project.
   * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
   * @example
   * // Update or create a Project
   * const project = await prisma.project.upsert({
   *   create: {
   *     // ... data to create a Project
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Project we want to update
   *   }
   * })
   */
  upsert<T extends ProjectUpsertArgs>(args: Prisma.SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Projects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
   * @example
   * // Count the number of Projects
   * const count = await prisma.project.count({
   *   where: {
   *     // ... the filter for the Projects we want to count
   *   }
   * })
  **/
  count<T extends ProjectCountArgs>(
    args?: Prisma.Subset<T, ProjectCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Project.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectAggregateArgs>(args: Prisma.Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

  /**
   * Group by Project.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectGroupByArgs['orderBy'] }
      : { orderBy?: ProjectGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Project model
 */
readonly fields: ProjectFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Project.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  SourceLanguage<T extends Prisma.LanguageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LanguageDefaultArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  TargetLanguages<T extends Prisma.Project$TargetLanguagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$TargetLanguagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Memories<T extends Prisma.Project$MemoriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$MemoriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Glossaries<T extends Prisma.Project$GlossariesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$GlossariesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Documents<T extends Prisma.Project$DocumentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$DocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Project model
 */
export interface ProjectFieldRefs {
  readonly id: Prisma.FieldRef<"Project", 'String'>
  readonly name: Prisma.FieldRef<"Project", 'String'>
  readonly description: Prisma.FieldRef<"Project", 'String'>
  readonly createdAt: Prisma.FieldRef<"Project", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Project", 'DateTime'>
  readonly sourceLanguageId: Prisma.FieldRef<"Project", 'String'>
  readonly creatorId: Prisma.FieldRef<"Project", 'String'>
}
    

// Custom InputTypes
/**
 * Project findUnique
 */
export type ProjectFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project findUniqueOrThrow
 */
export type ProjectFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project findFirst
 */
export type ProjectFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Projects.
   */
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project findFirstOrThrow
 */
export type ProjectFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Projects.
   */
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project findMany
 */
export type ProjectFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Projects to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project create
 */
export type ProjectCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The data needed to create a Project.
   */
  data: Prisma.XOR<Prisma.ProjectCreateInput, Prisma.ProjectUncheckedCreateInput>
}

/**
 * Project createMany
 */
export type ProjectCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Projects.
   */
  data: Prisma.ProjectCreateManyInput | Prisma.ProjectCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Project createManyAndReturn
 */
export type ProjectCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * The data used to create many Projects.
   */
  data: Prisma.ProjectCreateManyInput | Prisma.ProjectCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Project update
 */
export type ProjectUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The data needed to update a Project.
   */
  data: Prisma.XOR<Prisma.ProjectUpdateInput, Prisma.ProjectUncheckedUpdateInput>
  /**
   * Choose, which Project to update.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project updateMany
 */
export type ProjectUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Projects.
   */
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyInput>
  /**
   * Filter which Projects to update
   */
  where?: Prisma.ProjectWhereInput
  /**
   * Limit how many Projects to update.
   */
  limit?: number
}

/**
 * Project updateManyAndReturn
 */
export type ProjectUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * The data used to update Projects.
   */
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyInput>
  /**
   * Filter which Projects to update
   */
  where?: Prisma.ProjectWhereInput
  /**
   * Limit how many Projects to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Project upsert
 */
export type ProjectUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The filter to search for the Project to update in case it exists.
   */
  where: Prisma.ProjectWhereUniqueInput
  /**
   * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
   */
  create: Prisma.XOR<Prisma.ProjectCreateInput, Prisma.ProjectUncheckedCreateInput>
  /**
   * In case the Project was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectUpdateInput, Prisma.ProjectUncheckedUpdateInput>
}

/**
 * Project delete
 */
export type ProjectDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter which Project to delete.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project deleteMany
 */
export type ProjectDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Projects to delete
   */
  where?: Prisma.ProjectWhereInput
  /**
   * Limit how many Projects to delete.
   */
  limit?: number
}

/**
 * Project.TargetLanguages
 */
export type Project$TargetLanguagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  where?: Prisma.LanguageWhereInput
  orderBy?: Prisma.LanguageOrderByWithRelationInput | Prisma.LanguageOrderByWithRelationInput[]
  cursor?: Prisma.LanguageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LanguageScalarFieldEnum | Prisma.LanguageScalarFieldEnum[]
}

/**
 * Project.Memories
 */
export type Project$MemoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memory
   */
  select?: Prisma.MemorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memory
   */
  omit?: Prisma.MemoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoryInclude<ExtArgs> | null
  where?: Prisma.MemoryWhereInput
  orderBy?: Prisma.MemoryOrderByWithRelationInput | Prisma.MemoryOrderByWithRelationInput[]
  cursor?: Prisma.MemoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MemoryScalarFieldEnum | Prisma.MemoryScalarFieldEnum[]
}

/**
 * Project.Glossaries
 */
export type Project$GlossariesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Glossary
   */
  select?: Prisma.GlossarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Glossary
   */
  omit?: Prisma.GlossaryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GlossaryInclude<ExtArgs> | null
  where?: Prisma.GlossaryWhereInput
  orderBy?: Prisma.GlossaryOrderByWithRelationInput | Prisma.GlossaryOrderByWithRelationInput[]
  cursor?: Prisma.GlossaryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GlossaryScalarFieldEnum | Prisma.GlossaryScalarFieldEnum[]
}

/**
 * Project.Documents
 */
export type Project$DocumentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null
  where?: Prisma.DocumentWhereInput
  orderBy?: Prisma.DocumentOrderByWithRelationInput | Prisma.DocumentOrderByWithRelationInput[]
  cursor?: Prisma.DocumentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DocumentScalarFieldEnum | Prisma.DocumentScalarFieldEnum[]
}

/**
 * Project without action
 */
export type ProjectDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
}
