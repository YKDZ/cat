
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
export const prismaVersion: PrismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Document: 'Document',
  TranslatableElement: 'TranslatableElement',
  DocumentVersion: 'DocumentVersion',
  File: 'File',
  FileType: 'FileType',
  StorageType: 'StorageType',
  Glossary: 'Glossary',
  Term: 'Term',
  TermRelation: 'TermRelation',
  Memory: 'Memory',
  MemoryItem: 'MemoryItem',
  Language: 'Language',
  Task: 'Task',
  Permission: 'Permission',
  Setting: 'Setting',
  Plugin: 'Plugin',
  PluginVersion: 'PluginVersion',
  PluginPermission: 'PluginPermission',
  PluginConfig: 'PluginConfig',
  PluginUserConfigInstance: 'PluginUserConfigInstance',
  PluginTag: 'PluginTag',
  PluginComponent: 'PluginComponent',
  Project: 'Project',
  Translation: 'Translation',
  TranslationVote: 'TranslationVote',
  TranslationApprovment: 'TranslationApprovment',
  User: 'User',
  Account: 'Account',
  Vector: 'Vector'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "document" | "translatableElement" | "documentVersion" | "file" | "fileType" | "storageType" | "glossary" | "term" | "termRelation" | "memory" | "memoryItem" | "language" | "task" | "permission" | "setting" | "plugin" | "pluginVersion" | "pluginPermission" | "pluginConfig" | "pluginUserConfigInstance" | "pluginTag" | "pluginComponent" | "project" | "translation" | "translationVote" | "translationApprovment" | "user" | "account" | "vector"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Document: {
      payload: Prisma.$DocumentPayload<ExtArgs>
      fields: Prisma.DocumentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DocumentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        findFirst: {
          args: Prisma.DocumentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        findMany: {
          args: Prisma.DocumentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>[]
        }
        create: {
          args: Prisma.DocumentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        createMany: {
          args: Prisma.DocumentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>[]
        }
        delete: {
          args: Prisma.DocumentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        update: {
          args: Prisma.DocumentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        deleteMany: {
          args: Prisma.DocumentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DocumentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>[]
        }
        upsert: {
          args: Prisma.DocumentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        aggregate: {
          args: Prisma.DocumentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDocument>
        }
        groupBy: {
          args: Prisma.DocumentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DocumentGroupByOutputType>[]
        }
        count: {
          args: Prisma.DocumentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DocumentCountAggregateOutputType> | number
        }
      }
    }
    TranslatableElement: {
      payload: Prisma.$TranslatableElementPayload<ExtArgs>
      fields: Prisma.TranslatableElementFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TranslatableElementFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TranslatableElementFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>
        }
        findFirst: {
          args: Prisma.TranslatableElementFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TranslatableElementFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>
        }
        findMany: {
          args: Prisma.TranslatableElementFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>[]
        }
        create: {
          args: Prisma.TranslatableElementCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>
        }
        createMany: {
          args: Prisma.TranslatableElementCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TranslatableElementCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>[]
        }
        delete: {
          args: Prisma.TranslatableElementDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>
        }
        update: {
          args: Prisma.TranslatableElementUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>
        }
        deleteMany: {
          args: Prisma.TranslatableElementDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TranslatableElementUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TranslatableElementUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>[]
        }
        upsert: {
          args: Prisma.TranslatableElementUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslatableElementPayload>
        }
        aggregate: {
          args: Prisma.TranslatableElementAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTranslatableElement>
        }
        groupBy: {
          args: Prisma.TranslatableElementGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslatableElementGroupByOutputType>[]
        }
        count: {
          args: Prisma.TranslatableElementCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslatableElementCountAggregateOutputType> | number
        }
      }
    }
    DocumentVersion: {
      payload: Prisma.$DocumentVersionPayload<ExtArgs>
      fields: Prisma.DocumentVersionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DocumentVersionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DocumentVersionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>
        }
        findFirst: {
          args: Prisma.DocumentVersionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DocumentVersionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>
        }
        findMany: {
          args: Prisma.DocumentVersionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>[]
        }
        create: {
          args: Prisma.DocumentVersionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>
        }
        createMany: {
          args: Prisma.DocumentVersionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DocumentVersionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>[]
        }
        delete: {
          args: Prisma.DocumentVersionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>
        }
        update: {
          args: Prisma.DocumentVersionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>
        }
        deleteMany: {
          args: Prisma.DocumentVersionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DocumentVersionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DocumentVersionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>[]
        }
        upsert: {
          args: Prisma.DocumentVersionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentVersionPayload>
        }
        aggregate: {
          args: Prisma.DocumentVersionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDocumentVersion>
        }
        groupBy: {
          args: Prisma.DocumentVersionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DocumentVersionGroupByOutputType>[]
        }
        count: {
          args: Prisma.DocumentVersionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DocumentVersionCountAggregateOutputType> | number
        }
      }
    }
    File: {
      payload: Prisma.$FilePayload<ExtArgs>
      fields: Prisma.FileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findFirst: {
          args: Prisma.FileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findMany: {
          args: Prisma.FileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        create: {
          args: Prisma.FileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        createMany: {
          args: Prisma.FileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        delete: {
          args: Prisma.FileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        update: {
          args: Prisma.FileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        deleteMany: {
          args: Prisma.FileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        upsert: {
          args: Prisma.FileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        aggregate: {
          args: Prisma.FileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFile>
        }
        groupBy: {
          args: Prisma.FileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileGroupByOutputType>[]
        }
        count: {
          args: Prisma.FileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileCountAggregateOutputType> | number
        }
      }
    }
    FileType: {
      payload: Prisma.$FileTypePayload<ExtArgs>
      fields: Prisma.FileTypeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FileTypeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FileTypeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>
        }
        findFirst: {
          args: Prisma.FileTypeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FileTypeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>
        }
        findMany: {
          args: Prisma.FileTypeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>[]
        }
        create: {
          args: Prisma.FileTypeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>
        }
        createMany: {
          args: Prisma.FileTypeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FileTypeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>[]
        }
        delete: {
          args: Prisma.FileTypeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>
        }
        update: {
          args: Prisma.FileTypeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>
        }
        deleteMany: {
          args: Prisma.FileTypeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FileTypeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FileTypeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>[]
        }
        upsert: {
          args: Prisma.FileTypeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileTypePayload>
        }
        aggregate: {
          args: Prisma.FileTypeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFileType>
        }
        groupBy: {
          args: Prisma.FileTypeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileTypeGroupByOutputType>[]
        }
        count: {
          args: Prisma.FileTypeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileTypeCountAggregateOutputType> | number
        }
      }
    }
    StorageType: {
      payload: Prisma.$StorageTypePayload<ExtArgs>
      fields: Prisma.StorageTypeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StorageTypeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StorageTypeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>
        }
        findFirst: {
          args: Prisma.StorageTypeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StorageTypeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>
        }
        findMany: {
          args: Prisma.StorageTypeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>[]
        }
        create: {
          args: Prisma.StorageTypeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>
        }
        createMany: {
          args: Prisma.StorageTypeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StorageTypeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>[]
        }
        delete: {
          args: Prisma.StorageTypeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>
        }
        update: {
          args: Prisma.StorageTypeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>
        }
        deleteMany: {
          args: Prisma.StorageTypeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StorageTypeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StorageTypeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>[]
        }
        upsert: {
          args: Prisma.StorageTypeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StorageTypePayload>
        }
        aggregate: {
          args: Prisma.StorageTypeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStorageType>
        }
        groupBy: {
          args: Prisma.StorageTypeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StorageTypeGroupByOutputType>[]
        }
        count: {
          args: Prisma.StorageTypeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StorageTypeCountAggregateOutputType> | number
        }
      }
    }
    Glossary: {
      payload: Prisma.$GlossaryPayload<ExtArgs>
      fields: Prisma.GlossaryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.GlossaryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.GlossaryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>
        }
        findFirst: {
          args: Prisma.GlossaryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.GlossaryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>
        }
        findMany: {
          args: Prisma.GlossaryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>[]
        }
        create: {
          args: Prisma.GlossaryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>
        }
        createMany: {
          args: Prisma.GlossaryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.GlossaryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>[]
        }
        delete: {
          args: Prisma.GlossaryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>
        }
        update: {
          args: Prisma.GlossaryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>
        }
        deleteMany: {
          args: Prisma.GlossaryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.GlossaryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.GlossaryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>[]
        }
        upsert: {
          args: Prisma.GlossaryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GlossaryPayload>
        }
        aggregate: {
          args: Prisma.GlossaryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGlossary>
        }
        groupBy: {
          args: Prisma.GlossaryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GlossaryGroupByOutputType>[]
        }
        count: {
          args: Prisma.GlossaryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GlossaryCountAggregateOutputType> | number
        }
      }
    }
    Term: {
      payload: Prisma.$TermPayload<ExtArgs>
      fields: Prisma.TermFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TermFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TermFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        findFirst: {
          args: Prisma.TermFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TermFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        findMany: {
          args: Prisma.TermFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>[]
        }
        create: {
          args: Prisma.TermCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        createMany: {
          args: Prisma.TermCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TermCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>[]
        }
        delete: {
          args: Prisma.TermDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        update: {
          args: Prisma.TermUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        deleteMany: {
          args: Prisma.TermDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TermUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TermUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>[]
        }
        upsert: {
          args: Prisma.TermUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        aggregate: {
          args: Prisma.TermAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTerm>
        }
        groupBy: {
          args: Prisma.TermGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TermGroupByOutputType>[]
        }
        count: {
          args: Prisma.TermCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TermCountAggregateOutputType> | number
        }
      }
    }
    TermRelation: {
      payload: Prisma.$TermRelationPayload<ExtArgs>
      fields: Prisma.TermRelationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TermRelationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TermRelationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>
        }
        findFirst: {
          args: Prisma.TermRelationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TermRelationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>
        }
        findMany: {
          args: Prisma.TermRelationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>[]
        }
        create: {
          args: Prisma.TermRelationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>
        }
        createMany: {
          args: Prisma.TermRelationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TermRelationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>[]
        }
        delete: {
          args: Prisma.TermRelationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>
        }
        update: {
          args: Prisma.TermRelationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>
        }
        deleteMany: {
          args: Prisma.TermRelationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TermRelationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TermRelationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>[]
        }
        upsert: {
          args: Prisma.TermRelationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermRelationPayload>
        }
        aggregate: {
          args: Prisma.TermRelationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTermRelation>
        }
        groupBy: {
          args: Prisma.TermRelationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TermRelationGroupByOutputType>[]
        }
        count: {
          args: Prisma.TermRelationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TermRelationCountAggregateOutputType> | number
        }
      }
    }
    Memory: {
      payload: Prisma.$MemoryPayload<ExtArgs>
      fields: Prisma.MemoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MemoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MemoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>
        }
        findFirst: {
          args: Prisma.MemoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MemoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>
        }
        findMany: {
          args: Prisma.MemoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>[]
        }
        create: {
          args: Prisma.MemoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>
        }
        createMany: {
          args: Prisma.MemoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MemoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>[]
        }
        delete: {
          args: Prisma.MemoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>
        }
        update: {
          args: Prisma.MemoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>
        }
        deleteMany: {
          args: Prisma.MemoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MemoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MemoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>[]
        }
        upsert: {
          args: Prisma.MemoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryPayload>
        }
        aggregate: {
          args: Prisma.MemoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMemory>
        }
        groupBy: {
          args: Prisma.MemoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MemoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.MemoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MemoryCountAggregateOutputType> | number
        }
      }
    }
    MemoryItem: {
      payload: Prisma.$MemoryItemPayload<ExtArgs>
      fields: Prisma.MemoryItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MemoryItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MemoryItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>
        }
        findFirst: {
          args: Prisma.MemoryItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MemoryItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>
        }
        findMany: {
          args: Prisma.MemoryItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>[]
        }
        create: {
          args: Prisma.MemoryItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>
        }
        createMany: {
          args: Prisma.MemoryItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MemoryItemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>[]
        }
        delete: {
          args: Prisma.MemoryItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>
        }
        update: {
          args: Prisma.MemoryItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>
        }
        deleteMany: {
          args: Prisma.MemoryItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MemoryItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MemoryItemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>[]
        }
        upsert: {
          args: Prisma.MemoryItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemoryItemPayload>
        }
        aggregate: {
          args: Prisma.MemoryItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMemoryItem>
        }
        groupBy: {
          args: Prisma.MemoryItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MemoryItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.MemoryItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MemoryItemCountAggregateOutputType> | number
        }
      }
    }
    Language: {
      payload: Prisma.$LanguagePayload<ExtArgs>
      fields: Prisma.LanguageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LanguageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LanguageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>
        }
        findFirst: {
          args: Prisma.LanguageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LanguageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>
        }
        findMany: {
          args: Prisma.LanguageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>[]
        }
        create: {
          args: Prisma.LanguageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>
        }
        createMany: {
          args: Prisma.LanguageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LanguageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>[]
        }
        delete: {
          args: Prisma.LanguageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>
        }
        update: {
          args: Prisma.LanguageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>
        }
        deleteMany: {
          args: Prisma.LanguageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LanguageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LanguageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>[]
        }
        upsert: {
          args: Prisma.LanguageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LanguagePayload>
        }
        aggregate: {
          args: Prisma.LanguageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLanguage>
        }
        groupBy: {
          args: Prisma.LanguageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LanguageGroupByOutputType>[]
        }
        count: {
          args: Prisma.LanguageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LanguageCountAggregateOutputType> | number
        }
      }
    }
    Task: {
      payload: Prisma.$TaskPayload<ExtArgs>
      fields: Prisma.TaskFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TaskFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        findFirst: {
          args: Prisma.TaskFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        findMany: {
          args: Prisma.TaskFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        create: {
          args: Prisma.TaskCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        createMany: {
          args: Prisma.TaskCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        delete: {
          args: Prisma.TaskDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        update: {
          args: Prisma.TaskUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        deleteMany: {
          args: Prisma.TaskDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TaskUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        upsert: {
          args: Prisma.TaskUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        aggregate: {
          args: Prisma.TaskAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTask>
        }
        groupBy: {
          args: Prisma.TaskGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TaskGroupByOutputType>[]
        }
        count: {
          args: Prisma.TaskCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TaskCountAggregateOutputType> | number
        }
      }
    }
    Permission: {
      payload: Prisma.$PermissionPayload<ExtArgs>
      fields: Prisma.PermissionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PermissionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>
        }
        findFirst: {
          args: Prisma.PermissionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>
        }
        findMany: {
          args: Prisma.PermissionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>[]
        }
        create: {
          args: Prisma.PermissionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>
        }
        createMany: {
          args: Prisma.PermissionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>[]
        }
        delete: {
          args: Prisma.PermissionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>
        }
        update: {
          args: Prisma.PermissionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>
        }
        deleteMany: {
          args: Prisma.PermissionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PermissionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PermissionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>[]
        }
        upsert: {
          args: Prisma.PermissionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PermissionPayload>
        }
        aggregate: {
          args: Prisma.PermissionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePermission>
        }
        groupBy: {
          args: Prisma.PermissionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PermissionGroupByOutputType>[]
        }
        count: {
          args: Prisma.PermissionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PermissionCountAggregateOutputType> | number
        }
      }
    }
    Setting: {
      payload: Prisma.$SettingPayload<ExtArgs>
      fields: Prisma.SettingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SettingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>
        }
        findFirst: {
          args: Prisma.SettingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>
        }
        findMany: {
          args: Prisma.SettingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>[]
        }
        create: {
          args: Prisma.SettingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>
        }
        createMany: {
          args: Prisma.SettingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>[]
        }
        delete: {
          args: Prisma.SettingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>
        }
        update: {
          args: Prisma.SettingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>
        }
        deleteMany: {
          args: Prisma.SettingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SettingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SettingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>[]
        }
        upsert: {
          args: Prisma.SettingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingPayload>
        }
        aggregate: {
          args: Prisma.SettingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSetting>
        }
        groupBy: {
          args: Prisma.SettingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SettingGroupByOutputType>[]
        }
        count: {
          args: Prisma.SettingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SettingCountAggregateOutputType> | number
        }
      }
    }
    Plugin: {
      payload: Prisma.$PluginPayload<ExtArgs>
      fields: Prisma.PluginFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PluginFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PluginFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>
        }
        findFirst: {
          args: Prisma.PluginFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PluginFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>
        }
        findMany: {
          args: Prisma.PluginFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>[]
        }
        create: {
          args: Prisma.PluginCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>
        }
        createMany: {
          args: Prisma.PluginCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PluginCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>[]
        }
        delete: {
          args: Prisma.PluginDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>
        }
        update: {
          args: Prisma.PluginUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>
        }
        deleteMany: {
          args: Prisma.PluginDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PluginUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PluginUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>[]
        }
        upsert: {
          args: Prisma.PluginUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPayload>
        }
        aggregate: {
          args: Prisma.PluginAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlugin>
        }
        groupBy: {
          args: Prisma.PluginGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginGroupByOutputType>[]
        }
        count: {
          args: Prisma.PluginCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginCountAggregateOutputType> | number
        }
      }
    }
    PluginVersion: {
      payload: Prisma.$PluginVersionPayload<ExtArgs>
      fields: Prisma.PluginVersionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PluginVersionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PluginVersionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>
        }
        findFirst: {
          args: Prisma.PluginVersionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PluginVersionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>
        }
        findMany: {
          args: Prisma.PluginVersionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>[]
        }
        create: {
          args: Prisma.PluginVersionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>
        }
        createMany: {
          args: Prisma.PluginVersionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PluginVersionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>[]
        }
        delete: {
          args: Prisma.PluginVersionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>
        }
        update: {
          args: Prisma.PluginVersionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>
        }
        deleteMany: {
          args: Prisma.PluginVersionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PluginVersionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PluginVersionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>[]
        }
        upsert: {
          args: Prisma.PluginVersionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginVersionPayload>
        }
        aggregate: {
          args: Prisma.PluginVersionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePluginVersion>
        }
        groupBy: {
          args: Prisma.PluginVersionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginVersionGroupByOutputType>[]
        }
        count: {
          args: Prisma.PluginVersionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginVersionCountAggregateOutputType> | number
        }
      }
    }
    PluginPermission: {
      payload: Prisma.$PluginPermissionPayload<ExtArgs>
      fields: Prisma.PluginPermissionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PluginPermissionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PluginPermissionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>
        }
        findFirst: {
          args: Prisma.PluginPermissionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PluginPermissionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>
        }
        findMany: {
          args: Prisma.PluginPermissionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>[]
        }
        create: {
          args: Prisma.PluginPermissionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>
        }
        createMany: {
          args: Prisma.PluginPermissionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PluginPermissionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>[]
        }
        delete: {
          args: Prisma.PluginPermissionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>
        }
        update: {
          args: Prisma.PluginPermissionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>
        }
        deleteMany: {
          args: Prisma.PluginPermissionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PluginPermissionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PluginPermissionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>[]
        }
        upsert: {
          args: Prisma.PluginPermissionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginPermissionPayload>
        }
        aggregate: {
          args: Prisma.PluginPermissionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePluginPermission>
        }
        groupBy: {
          args: Prisma.PluginPermissionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginPermissionGroupByOutputType>[]
        }
        count: {
          args: Prisma.PluginPermissionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginPermissionCountAggregateOutputType> | number
        }
      }
    }
    PluginConfig: {
      payload: Prisma.$PluginConfigPayload<ExtArgs>
      fields: Prisma.PluginConfigFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PluginConfigFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PluginConfigFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>
        }
        findFirst: {
          args: Prisma.PluginConfigFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PluginConfigFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>
        }
        findMany: {
          args: Prisma.PluginConfigFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>[]
        }
        create: {
          args: Prisma.PluginConfigCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>
        }
        createMany: {
          args: Prisma.PluginConfigCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PluginConfigCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>[]
        }
        delete: {
          args: Prisma.PluginConfigDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>
        }
        update: {
          args: Prisma.PluginConfigUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>
        }
        deleteMany: {
          args: Prisma.PluginConfigDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PluginConfigUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PluginConfigUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>[]
        }
        upsert: {
          args: Prisma.PluginConfigUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginConfigPayload>
        }
        aggregate: {
          args: Prisma.PluginConfigAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePluginConfig>
        }
        groupBy: {
          args: Prisma.PluginConfigGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginConfigGroupByOutputType>[]
        }
        count: {
          args: Prisma.PluginConfigCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginConfigCountAggregateOutputType> | number
        }
      }
    }
    PluginUserConfigInstance: {
      payload: Prisma.$PluginUserConfigInstancePayload<ExtArgs>
      fields: Prisma.PluginUserConfigInstanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PluginUserConfigInstanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PluginUserConfigInstanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>
        }
        findFirst: {
          args: Prisma.PluginUserConfigInstanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PluginUserConfigInstanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>
        }
        findMany: {
          args: Prisma.PluginUserConfigInstanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>[]
        }
        create: {
          args: Prisma.PluginUserConfigInstanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>
        }
        createMany: {
          args: Prisma.PluginUserConfigInstanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PluginUserConfigInstanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>[]
        }
        delete: {
          args: Prisma.PluginUserConfigInstanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>
        }
        update: {
          args: Prisma.PluginUserConfigInstanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>
        }
        deleteMany: {
          args: Prisma.PluginUserConfigInstanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PluginUserConfigInstanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PluginUserConfigInstanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>[]
        }
        upsert: {
          args: Prisma.PluginUserConfigInstanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginUserConfigInstancePayload>
        }
        aggregate: {
          args: Prisma.PluginUserConfigInstanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePluginUserConfigInstance>
        }
        groupBy: {
          args: Prisma.PluginUserConfigInstanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginUserConfigInstanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.PluginUserConfigInstanceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginUserConfigInstanceCountAggregateOutputType> | number
        }
      }
    }
    PluginTag: {
      payload: Prisma.$PluginTagPayload<ExtArgs>
      fields: Prisma.PluginTagFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PluginTagFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PluginTagFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>
        }
        findFirst: {
          args: Prisma.PluginTagFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PluginTagFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>
        }
        findMany: {
          args: Prisma.PluginTagFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>[]
        }
        create: {
          args: Prisma.PluginTagCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>
        }
        createMany: {
          args: Prisma.PluginTagCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PluginTagCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>[]
        }
        delete: {
          args: Prisma.PluginTagDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>
        }
        update: {
          args: Prisma.PluginTagUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>
        }
        deleteMany: {
          args: Prisma.PluginTagDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PluginTagUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PluginTagUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>[]
        }
        upsert: {
          args: Prisma.PluginTagUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginTagPayload>
        }
        aggregate: {
          args: Prisma.PluginTagAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePluginTag>
        }
        groupBy: {
          args: Prisma.PluginTagGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginTagGroupByOutputType>[]
        }
        count: {
          args: Prisma.PluginTagCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginTagCountAggregateOutputType> | number
        }
      }
    }
    PluginComponent: {
      payload: Prisma.$PluginComponentPayload<ExtArgs>
      fields: Prisma.PluginComponentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PluginComponentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PluginComponentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>
        }
        findFirst: {
          args: Prisma.PluginComponentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PluginComponentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>
        }
        findMany: {
          args: Prisma.PluginComponentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>[]
        }
        create: {
          args: Prisma.PluginComponentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>
        }
        createMany: {
          args: Prisma.PluginComponentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PluginComponentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>[]
        }
        delete: {
          args: Prisma.PluginComponentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>
        }
        update: {
          args: Prisma.PluginComponentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>
        }
        deleteMany: {
          args: Prisma.PluginComponentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PluginComponentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PluginComponentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>[]
        }
        upsert: {
          args: Prisma.PluginComponentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PluginComponentPayload>
        }
        aggregate: {
          args: Prisma.PluginComponentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePluginComponent>
        }
        groupBy: {
          args: Prisma.PluginComponentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginComponentGroupByOutputType>[]
        }
        count: {
          args: Prisma.PluginComponentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PluginComponentCountAggregateOutputType> | number
        }
      }
    }
    Project: {
      payload: Prisma.$ProjectPayload<ExtArgs>
      fields: Prisma.ProjectFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProjectFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        findFirst: {
          args: Prisma.ProjectFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        findMany: {
          args: Prisma.ProjectFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>[]
        }
        create: {
          args: Prisma.ProjectCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        createMany: {
          args: Prisma.ProjectCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>[]
        }
        delete: {
          args: Prisma.ProjectDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        update: {
          args: Prisma.ProjectUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        deleteMany: {
          args: Prisma.ProjectDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProjectUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>[]
        }
        upsert: {
          args: Prisma.ProjectUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        aggregate: {
          args: Prisma.ProjectAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProject>
        }
        groupBy: {
          args: Prisma.ProjectGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProjectGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProjectCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProjectCountAggregateOutputType> | number
        }
      }
    }
    Translation: {
      payload: Prisma.$TranslationPayload<ExtArgs>
      fields: Prisma.TranslationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TranslationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TranslationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        findFirst: {
          args: Prisma.TranslationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TranslationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        findMany: {
          args: Prisma.TranslationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>[]
        }
        create: {
          args: Prisma.TranslationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        createMany: {
          args: Prisma.TranslationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TranslationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>[]
        }
        delete: {
          args: Prisma.TranslationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        update: {
          args: Prisma.TranslationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        deleteMany: {
          args: Prisma.TranslationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TranslationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TranslationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>[]
        }
        upsert: {
          args: Prisma.TranslationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        aggregate: {
          args: Prisma.TranslationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTranslation>
        }
        groupBy: {
          args: Prisma.TranslationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslationGroupByOutputType>[]
        }
        count: {
          args: Prisma.TranslationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslationCountAggregateOutputType> | number
        }
      }
    }
    TranslationVote: {
      payload: Prisma.$TranslationVotePayload<ExtArgs>
      fields: Prisma.TranslationVoteFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TranslationVoteFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TranslationVoteFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>
        }
        findFirst: {
          args: Prisma.TranslationVoteFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TranslationVoteFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>
        }
        findMany: {
          args: Prisma.TranslationVoteFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>[]
        }
        create: {
          args: Prisma.TranslationVoteCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>
        }
        createMany: {
          args: Prisma.TranslationVoteCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TranslationVoteCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>[]
        }
        delete: {
          args: Prisma.TranslationVoteDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>
        }
        update: {
          args: Prisma.TranslationVoteUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>
        }
        deleteMany: {
          args: Prisma.TranslationVoteDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TranslationVoteUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TranslationVoteUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>[]
        }
        upsert: {
          args: Prisma.TranslationVoteUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationVotePayload>
        }
        aggregate: {
          args: Prisma.TranslationVoteAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTranslationVote>
        }
        groupBy: {
          args: Prisma.TranslationVoteGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslationVoteGroupByOutputType>[]
        }
        count: {
          args: Prisma.TranslationVoteCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslationVoteCountAggregateOutputType> | number
        }
      }
    }
    TranslationApprovment: {
      payload: Prisma.$TranslationApprovmentPayload<ExtArgs>
      fields: Prisma.TranslationApprovmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TranslationApprovmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TranslationApprovmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>
        }
        findFirst: {
          args: Prisma.TranslationApprovmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TranslationApprovmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>
        }
        findMany: {
          args: Prisma.TranslationApprovmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>[]
        }
        create: {
          args: Prisma.TranslationApprovmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>
        }
        createMany: {
          args: Prisma.TranslationApprovmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TranslationApprovmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>[]
        }
        delete: {
          args: Prisma.TranslationApprovmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>
        }
        update: {
          args: Prisma.TranslationApprovmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>
        }
        deleteMany: {
          args: Prisma.TranslationApprovmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TranslationApprovmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TranslationApprovmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>[]
        }
        upsert: {
          args: Prisma.TranslationApprovmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationApprovmentPayload>
        }
        aggregate: {
          args: Prisma.TranslationApprovmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTranslationApprovment>
        }
        groupBy: {
          args: Prisma.TranslationApprovmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslationApprovmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.TranslationApprovmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslationApprovmentCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>
      fields: Prisma.AccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>
        }
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number
        }
      }
    }
    Vector: {
      payload: Prisma.$VectorPayload<ExtArgs>
      fields: Prisma.VectorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VectorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VectorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VectorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VectorPayload>
        }
        findFirst: {
          args: Prisma.VectorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VectorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VectorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VectorPayload>
        }
        findMany: {
          args: Prisma.VectorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VectorPayload>[]
        }
        delete: {
          args: Prisma.VectorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VectorPayload>
        }
        update: {
          args: Prisma.VectorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VectorPayload>
        }
        deleteMany: {
          args: Prisma.VectorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VectorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.VectorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VectorPayload>[]
        }
        aggregate: {
          args: Prisma.VectorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVector>
        }
        groupBy: {
          args: Prisma.VectorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VectorGroupByOutputType>[]
        }
        count: {
          args: Prisma.VectorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VectorCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const DocumentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId',
  creatorId: 'creatorId'
} as const

export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


export const TranslatableElementScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  value: 'value',
  meta: 'meta',
  version: 'version',
  isActive: 'isActive',
  documentVersionId: 'documentVersionId',
  documentId: 'documentId',
  embeddingId: 'embeddingId',
  previousVersionId: 'previousVersionId'
} as const

export type TranslatableElementScalarFieldEnum = (typeof TranslatableElementScalarFieldEnum)[keyof typeof TranslatableElementScalarFieldEnum]


export const DocumentVersionScalarFieldEnum = {
  id: 'id',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  documentId: 'documentId'
} as const

export type DocumentVersionScalarFieldEnum = (typeof DocumentVersionScalarFieldEnum)[keyof typeof DocumentVersionScalarFieldEnum]


export const FileScalarFieldEnum = {
  id: 'id',
  originName: 'originName',
  storedPath: 'storedPath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  typeId: 'typeId',
  storageTypeId: 'storageTypeId',
  documentId: 'documentId',
  userId: 'userId'
} as const

export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


export const FileTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  mimeType: 'mimeType',
  icon: 'icon'
} as const

export type FileTypeScalarFieldEnum = (typeof FileTypeScalarFieldEnum)[keyof typeof FileTypeScalarFieldEnum]


export const StorageTypeScalarFieldEnum = {
  id: 'id',
  name: 'name'
} as const

export type StorageTypeScalarFieldEnum = (typeof StorageTypeScalarFieldEnum)[keyof typeof StorageTypeScalarFieldEnum]


export const GlossaryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorId: 'creatorId'
} as const

export type GlossaryScalarFieldEnum = (typeof GlossaryScalarFieldEnum)[keyof typeof GlossaryScalarFieldEnum]


export const TermScalarFieldEnum = {
  id: 'id',
  value: 'value',
  context: 'context',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  languageId: 'languageId',
  creatorId: 'creatorId',
  glossaryId: 'glossaryId'
} as const

export type TermScalarFieldEnum = (typeof TermScalarFieldEnum)[keyof typeof TermScalarFieldEnum]


export const TermRelationScalarFieldEnum = {
  termId: 'termId',
  translationId: 'translationId'
} as const

export type TermRelationScalarFieldEnum = (typeof TermRelationScalarFieldEnum)[keyof typeof TermRelationScalarFieldEnum]


export const MemoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorId: 'creatorId'
} as const

export type MemoryScalarFieldEnum = (typeof MemoryScalarFieldEnum)[keyof typeof MemoryScalarFieldEnum]


export const MemoryItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  source: 'source',
  translation: 'translation',
  sourceEmbeddingId: 'sourceEmbeddingId',
  translationEmbeddingId: 'translationEmbeddingId',
  creatorId: 'creatorId',
  memoryId: 'memoryId',
  sourceElementId: 'sourceElementId',
  translationId: 'translationId',
  sourceLanguageId: 'sourceLanguageId',
  translationLanguageId: 'translationLanguageId'
} as const

export type MemoryItemScalarFieldEnum = (typeof MemoryItemScalarFieldEnum)[keyof typeof MemoryItemScalarFieldEnum]


export const LanguageScalarFieldEnum = {
  id: 'id',
  name: 'name'
} as const

export type LanguageScalarFieldEnum = (typeof LanguageScalarFieldEnum)[keyof typeof LanguageScalarFieldEnum]


export const TaskScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  meta: 'meta',
  type: 'type'
} as const

export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


export const PermissionScalarFieldEnum = {
  permission: 'permission',
  userId: 'userId'
} as const

export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


export const SettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


export const PluginScalarFieldEnum = {
  id: 'id',
  origin: 'origin',
  name: 'name',
  overview: 'overview',
  enabled: 'enabled',
  isExternal: 'isExternal',
  entry: 'entry',
  iconURL: 'iconURL',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PluginScalarFieldEnum = (typeof PluginScalarFieldEnum)[keyof typeof PluginScalarFieldEnum]


export const PluginVersionScalarFieldEnum = {
  id: 'id',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pluginId: 'pluginId'
} as const

export type PluginVersionScalarFieldEnum = (typeof PluginVersionScalarFieldEnum)[keyof typeof PluginVersionScalarFieldEnum]


export const PluginPermissionScalarFieldEnum = {
  id: 'id',
  permission: 'permission',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pluginId: 'pluginId'
} as const

export type PluginPermissionScalarFieldEnum = (typeof PluginPermissionScalarFieldEnum)[keyof typeof PluginPermissionScalarFieldEnum]


export const PluginConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  schema: 'schema',
  userOverridable: 'userOverridable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pluginId: 'pluginId'
} as const

export type PluginConfigScalarFieldEnum = (typeof PluginConfigScalarFieldEnum)[keyof typeof PluginConfigScalarFieldEnum]


export const PluginUserConfigInstanceScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  creatorId: 'creatorId',
  configId: 'configId'
} as const

export type PluginUserConfigInstanceScalarFieldEnum = (typeof PluginUserConfigInstanceScalarFieldEnum)[keyof typeof PluginUserConfigInstanceScalarFieldEnum]


export const PluginTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PluginTagScalarFieldEnum = (typeof PluginTagScalarFieldEnum)[keyof typeof PluginTagScalarFieldEnum]


export const PluginComponentScalarFieldEnum = {
  id: 'id',
  entry: 'entry',
  mountOn: 'mountOn',
  pluginId: 'pluginId'
} as const

export type PluginComponentScalarFieldEnum = (typeof PluginComponentScalarFieldEnum)[keyof typeof PluginComponentScalarFieldEnum]


export const ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sourceLanguageId: 'sourceLanguageId',
  creatorId: 'creatorId'
} as const

export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


export const TranslationScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  meta: 'meta',
  translatorId: 'translatorId',
  translatableElementId: 'translatableElementId',
  languageId: 'languageId',
  embeddingId: 'embeddingId'
} as const

export type TranslationScalarFieldEnum = (typeof TranslationScalarFieldEnum)[keyof typeof TranslationScalarFieldEnum]


export const TranslationVoteScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  voterId: 'voterId',
  translationId: 'translationId'
} as const

export type TranslationVoteScalarFieldEnum = (typeof TranslationVoteScalarFieldEnum)[keyof typeof TranslationVoteScalarFieldEnum]


export const TranslationApprovmentScalarFieldEnum = {
  id: 'id',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  translationId: 'translationId',
  userId: 'userId'
} as const

export type TranslationApprovmentScalarFieldEnum = (typeof TranslationApprovmentScalarFieldEnum)[keyof typeof TranslationApprovmentScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const AccountScalarFieldEnum = {
  type: 'type',
  provider: 'provider',
  providedAccountId: 'providedAccountId',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
} as const

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


export const VectorScalarFieldEnum = {
  id: 'id'
} as const

export type VectorScalarFieldEnum = (typeof VectorScalarFieldEnum)[keyof typeof VectorScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const DocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  creatorId: 'creatorId'
} as const

export type DocumentOrderByRelevanceFieldEnum = (typeof DocumentOrderByRelevanceFieldEnum)[keyof typeof DocumentOrderByRelevanceFieldEnum]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const TranslatableElementOrderByRelevanceFieldEnum = {
  value: 'value',
  documentId: 'documentId'
} as const

export type TranslatableElementOrderByRelevanceFieldEnum = (typeof TranslatableElementOrderByRelevanceFieldEnum)[keyof typeof TranslatableElementOrderByRelevanceFieldEnum]


export const DocumentVersionOrderByRelevanceFieldEnum = {
  documentId: 'documentId'
} as const

export type DocumentVersionOrderByRelevanceFieldEnum = (typeof DocumentVersionOrderByRelevanceFieldEnum)[keyof typeof DocumentVersionOrderByRelevanceFieldEnum]


export const FileOrderByRelevanceFieldEnum = {
  originName: 'originName',
  storedPath: 'storedPath',
  documentId: 'documentId',
  userId: 'userId'
} as const

export type FileOrderByRelevanceFieldEnum = (typeof FileOrderByRelevanceFieldEnum)[keyof typeof FileOrderByRelevanceFieldEnum]


export const FileTypeOrderByRelevanceFieldEnum = {
  name: 'name',
  mimeType: 'mimeType',
  icon: 'icon'
} as const

export type FileTypeOrderByRelevanceFieldEnum = (typeof FileTypeOrderByRelevanceFieldEnum)[keyof typeof FileTypeOrderByRelevanceFieldEnum]


export const StorageTypeOrderByRelevanceFieldEnum = {
  name: 'name'
} as const

export type StorageTypeOrderByRelevanceFieldEnum = (typeof StorageTypeOrderByRelevanceFieldEnum)[keyof typeof StorageTypeOrderByRelevanceFieldEnum]


export const GlossaryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId'
} as const

export type GlossaryOrderByRelevanceFieldEnum = (typeof GlossaryOrderByRelevanceFieldEnum)[keyof typeof GlossaryOrderByRelevanceFieldEnum]


export const TermOrderByRelevanceFieldEnum = {
  value: 'value',
  context: 'context',
  languageId: 'languageId',
  creatorId: 'creatorId',
  glossaryId: 'glossaryId'
} as const

export type TermOrderByRelevanceFieldEnum = (typeof TermOrderByRelevanceFieldEnum)[keyof typeof TermOrderByRelevanceFieldEnum]


export const MemoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId'
} as const

export type MemoryOrderByRelevanceFieldEnum = (typeof MemoryOrderByRelevanceFieldEnum)[keyof typeof MemoryOrderByRelevanceFieldEnum]


export const MemoryItemOrderByRelevanceFieldEnum = {
  source: 'source',
  translation: 'translation',
  creatorId: 'creatorId',
  memoryId: 'memoryId',
  sourceLanguageId: 'sourceLanguageId',
  translationLanguageId: 'translationLanguageId'
} as const

export type MemoryItemOrderByRelevanceFieldEnum = (typeof MemoryItemOrderByRelevanceFieldEnum)[keyof typeof MemoryItemOrderByRelevanceFieldEnum]


export const LanguageOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
} as const

export type LanguageOrderByRelevanceFieldEnum = (typeof LanguageOrderByRelevanceFieldEnum)[keyof typeof LanguageOrderByRelevanceFieldEnum]


export const TaskOrderByRelevanceFieldEnum = {
  id: 'id',
  status: 'status',
  type: 'type'
} as const

export type TaskOrderByRelevanceFieldEnum = (typeof TaskOrderByRelevanceFieldEnum)[keyof typeof TaskOrderByRelevanceFieldEnum]


export const PermissionOrderByRelevanceFieldEnum = {
  permission: 'permission',
  userId: 'userId'
} as const

export type PermissionOrderByRelevanceFieldEnum = (typeof PermissionOrderByRelevanceFieldEnum)[keyof typeof PermissionOrderByRelevanceFieldEnum]


export const SettingOrderByRelevanceFieldEnum = {
  key: 'key'
} as const

export type SettingOrderByRelevanceFieldEnum = (typeof SettingOrderByRelevanceFieldEnum)[keyof typeof SettingOrderByRelevanceFieldEnum]


export const PluginOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  overview: 'overview',
  entry: 'entry',
  iconURL: 'iconURL'
} as const

export type PluginOrderByRelevanceFieldEnum = (typeof PluginOrderByRelevanceFieldEnum)[keyof typeof PluginOrderByRelevanceFieldEnum]


export const PluginVersionOrderByRelevanceFieldEnum = {
  version: 'version',
  pluginId: 'pluginId'
} as const

export type PluginVersionOrderByRelevanceFieldEnum = (typeof PluginVersionOrderByRelevanceFieldEnum)[keyof typeof PluginVersionOrderByRelevanceFieldEnum]


export const PluginPermissionOrderByRelevanceFieldEnum = {
  permission: 'permission',
  description: 'description',
  pluginId: 'pluginId'
} as const

export type PluginPermissionOrderByRelevanceFieldEnum = (typeof PluginPermissionOrderByRelevanceFieldEnum)[keyof typeof PluginPermissionOrderByRelevanceFieldEnum]


export const PluginConfigOrderByRelevanceFieldEnum = {
  key: 'key',
  pluginId: 'pluginId'
} as const

export type PluginConfigOrderByRelevanceFieldEnum = (typeof PluginConfigOrderByRelevanceFieldEnum)[keyof typeof PluginConfigOrderByRelevanceFieldEnum]


export const PluginUserConfigInstanceOrderByRelevanceFieldEnum = {
  creatorId: 'creatorId'
} as const

export type PluginUserConfigInstanceOrderByRelevanceFieldEnum = (typeof PluginUserConfigInstanceOrderByRelevanceFieldEnum)[keyof typeof PluginUserConfigInstanceOrderByRelevanceFieldEnum]


export const PluginTagOrderByRelevanceFieldEnum = {
  name: 'name'
} as const

export type PluginTagOrderByRelevanceFieldEnum = (typeof PluginTagOrderByRelevanceFieldEnum)[keyof typeof PluginTagOrderByRelevanceFieldEnum]


export const PluginComponentOrderByRelevanceFieldEnum = {
  id: 'id',
  entry: 'entry',
  mountOn: 'mountOn',
  pluginId: 'pluginId'
} as const

export type PluginComponentOrderByRelevanceFieldEnum = (typeof PluginComponentOrderByRelevanceFieldEnum)[keyof typeof PluginComponentOrderByRelevanceFieldEnum]


export const ProjectOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  sourceLanguageId: 'sourceLanguageId',
  creatorId: 'creatorId'
} as const

export type ProjectOrderByRelevanceFieldEnum = (typeof ProjectOrderByRelevanceFieldEnum)[keyof typeof ProjectOrderByRelevanceFieldEnum]


export const TranslationOrderByRelevanceFieldEnum = {
  value: 'value',
  translatorId: 'translatorId',
  languageId: 'languageId'
} as const

export type TranslationOrderByRelevanceFieldEnum = (typeof TranslationOrderByRelevanceFieldEnum)[keyof typeof TranslationOrderByRelevanceFieldEnum]


export const TranslationVoteOrderByRelevanceFieldEnum = {
  voterId: 'voterId'
} as const

export type TranslationVoteOrderByRelevanceFieldEnum = (typeof TranslationVoteOrderByRelevanceFieldEnum)[keyof typeof TranslationVoteOrderByRelevanceFieldEnum]


export const TranslationApprovmentOrderByRelevanceFieldEnum = {
  userId: 'userId'
} as const

export type TranslationApprovmentOrderByRelevanceFieldEnum = (typeof TranslationApprovmentOrderByRelevanceFieldEnum)[keyof typeof TranslationApprovmentOrderByRelevanceFieldEnum]


export const UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email'
} as const

export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


export const AccountOrderByRelevanceFieldEnum = {
  type: 'type',
  provider: 'provider',
  providedAccountId: 'providedAccountId',
  userId: 'userId'
} as const

export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  document?: Prisma.DocumentOmit
  translatableElement?: Prisma.TranslatableElementOmit
  documentVersion?: Prisma.DocumentVersionOmit
  file?: Prisma.FileOmit
  fileType?: Prisma.FileTypeOmit
  storageType?: Prisma.StorageTypeOmit
  glossary?: Prisma.GlossaryOmit
  term?: Prisma.TermOmit
  termRelation?: Prisma.TermRelationOmit
  memory?: Prisma.MemoryOmit
  memoryItem?: Prisma.MemoryItemOmit
  language?: Prisma.LanguageOmit
  task?: Prisma.TaskOmit
  permission?: Prisma.PermissionOmit
  setting?: Prisma.SettingOmit
  plugin?: Prisma.PluginOmit
  pluginVersion?: Prisma.PluginVersionOmit
  pluginPermission?: Prisma.PluginPermissionOmit
  pluginConfig?: Prisma.PluginConfigOmit
  pluginUserConfigInstance?: Prisma.PluginUserConfigInstanceOmit
  pluginTag?: Prisma.PluginTagOmit
  pluginComponent?: Prisma.PluginComponentOmit
  project?: Prisma.ProjectOmit
  translation?: Prisma.TranslationOmit
  translationVote?: Prisma.TranslationVoteOmit
  translationApprovment?: Prisma.TranslationApprovmentOmit
  user?: Prisma.UserOmit
  account?: Prisma.AccountOmit
  vector?: Prisma.VectorOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

