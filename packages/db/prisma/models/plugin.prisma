model Plugin {
    id         String   @id
    origin     Json
    name       String
    overview   String?
    enabled    Boolean  @default(true)
    isExternal Boolean  @default(false)
    entry      String?
    iconURL    String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    Configs     PluginConfig[]
    Permissions PluginPermission[]
    Versions    PluginVersion[]
    Tags        PluginTag[]
    Components  PluginComponent[]
}

model PluginVersion {
    id        Int      @id @default(autoincrement())
    version   String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    pluginId String
    Plugin   Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

    @@unique([pluginId, version])
}

model PluginPermission {
    id          Int      @id @default(autoincrement())
    permission  String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    pluginId String
    Plugin   Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

    @@unique([pluginId, permission])
}

model PluginConfig {
    id          Int      @id @default(autoincrement())
    key         String
    schema      Json
    overridable Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    pluginId String
    Plugin   Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

    Instances PluginConfigInstance[]

    @@unique([pluginId, key])
    @@index([pluginId])
    @@index([key])
}

model PluginConfigInstance {
    id        Int                            @id @default(autoincrement())
    value     Json
    scopeType PluginConfigInstatnceScopeType
    scopeId   String
    scopeMeta Json?
    createdAt DateTime                       @default(now())
    updatedAt DateTime                       @default(now()) @updatedAt

    creatorId String?
    Creator   User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    configId Int
    Config   PluginConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@unique([configId, scopeType, scopeId])
}

model PluginTag {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    Plugin Plugin[]
}

model PluginComponent {
    id      String
    entry   String
    mountOn String

    pluginId String
    Plugin   Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

    @@unique([id, pluginId])
}

enum PluginConfigInstatnceScopeType {
    GLOBAL
    USER
    PROJECT
}
