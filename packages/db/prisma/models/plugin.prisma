model Plugin {
    id         String   @id
    name       String
    overview   String?
    isExternal Boolean  @default(false)
    entry      String
    iconURL    String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    Config PluginConfig?

    Permissions   PluginPermission[]
    Versions      PluginVersion[]
    Tags          PluginTag[]
    Installations PluginInstallation[]
}

model PluginInstallation {
    id        Int       @id @default(autoincrement())
    scopeType ScopeType
    scopeId   String
    scopeMeta Json?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    pluginId String
    Plugin   Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

    PluginServices        PluginService[]
    PluginConfigInstances PluginConfigInstance[]

    @@unique([scopeId, scopeType, pluginId])
}

model PluginVersion {
    id        Int      @id @default(autoincrement())
    version   String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    pluginId String
    Plugin   Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

    @@unique([pluginId, version])
}

model PluginPermission {
    id          Int      @id @default(autoincrement())
    permission  String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    pluginId String
    Plugin   Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

    @@unique([pluginId, permission])
}

model PluginConfig {
    id        Int      @id @default(autoincrement())
    schema    Json
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    pluginId String @unique
    plugin   Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

    PluginConfigInstances PluginConfigInstance[]
}

model PluginConfigInstance {
    id        Int      @id @default(autoincrement())
    value     Json
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    creatorId String?
    Creator   User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    configId Int
    Config   PluginConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    pluginInstallationId Int
    PluginInstallation   PluginInstallation @relation(fields: [pluginInstallationId], references: [id], onDelete: Cascade)

    @@unique([pluginInstallationId, configId])
}

model PluginTag {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    Plugin Plugin[]
}

enum ScopeType {
    GLOBAL
    USER
    PROJECT
}

enum PluginServiceType {
    TRANSLATION_ADVISOR
    STORAGE_PROVIDER
    AUTH_PROVIDER
    TERM_SERVICE
    TRANSLATABLE_FILE_HANDLER
    TEXT_VECTORIZER
}

model PluginService {
    id Int @id @default(autoincrement())

    serviceId   String
    serviceType PluginServiceType

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    pluginInstallationId Int
    PluginInstallation   PluginInstallation @relation(fields: [pluginInstallationId], references: [id], onDelete: Cascade)

    Files        File[]
    Documents    Document[]
    Translations Translation[]

    @@unique([serviceType, serviceId, pluginInstallationId])
}
